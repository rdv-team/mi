
#Область ПрограммныйИнтерфейс

// Хеш объекта на основании всех реквизитов кроме:
// ИмяПредопределенныхДанных, Предопределенный, Ссылка если не указаны конкретные значения в параметрах Включая, Исключая
//
// Параметры:
//  Объект			 - ОпределяемыйТип.рдв_ХешируемыйОбъект, ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  СписокСвойств	 - см. рдв_ХешиОбъектов.ХешируемыеРеквизиты
//  ИсключаяСвойства - см. рдв_ХешиОбъектов.ХешируемыеРеквизиты
// 
// Возвращаемое значение:
//  Строка - хеш
//
Функция ХешРассчитать(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Хеш = рдв_ХешиОбъектовПереопределяемый.ХешРассчитать(Объект, СписокСвойств, ИсключаяСвойства);
	Если Не Хеш = Неопределено Тогда
		Возврат Хеш;	
	КонецЕсли;
	
	ЭтоСсылка = ЭтоСсылка(Объект);
	Если ЭтоСсылка Тогда
		ОбъектСсылка = Объект;
		ОбъектОбъект = Объект.ПолучитьОбъект();
	Иначе
		ОбъектСсылка = Объект.Ссылка;
		ОбъектОбъект = Объект;
	КонецЕсли;
	
	МассивХеша = Новый Массив;
	ХешируемыеРеквизиты = ХешируемыеРеквизиты(ОбъектСсылка.Метаданные(), СписокСвойств, ИсключаяСвойства);
	
	УпорядоченныеРеквизиты = УпорядочитьМассив(ХешируемыеРеквизиты.Реквизиты); 
	Для Каждого Реквизит Из УпорядоченныеРеквизиты Цикл
		МассивХеша.Добавить(ЗначениеВСтроку(ОбъектОбъект[Реквизит]));
	КонецЦикла;
	
	УпорядоченныеТабличныеЧасти = УпорядочитьМассив(КлючиКоллекции(ХешируемыеРеквизиты.ТабличныеЧасти));
	Для Каждого ИмяТЧ Из УпорядоченныеТабличныеЧасти Цикл
		
		ТабличнаяЧасть = ОбъектОбъект[ИмяТЧ];
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		УпорядоченныеРеквизиты = УпорядочитьМассив(ХешируемыеРеквизиты.ТабличныеЧасти[ИмяТЧ]);
		УпорядоченныеКолонки   = СтрСоединить(УпорядоченныеРеквизиты, ", ");

		ДанныеТабличнойЧасти = ТабличнаяЧасть.Выгрузить(, УпорядоченныеКолонки);
		ДанныеТабличнойЧасти.Сортировать(УпорядоченныеКолонки);
		
		Для Каждого СтрокаТаблицы Из ДанныеТабличнойЧасти Цикл
			Для Каждого ИмяРеквизита Из УпорядоченныеРеквизиты Цикл
				МассивХеша.Добавить(ЗначениеВСтроку(СтрокаТаблицы[ИмяРеквизита]));
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Хеш = КонтрольнаяСуммаСтрокой(МассивХеша);
	
	Возврат Хеш;
	
КонецФункции

// Хеш коллекции на основании всех значений
//
// Параметры:
//  Коллекция - ТаблицаЗначений, Массив, СписокЗначений, ДеревоЗначений, Соответствие
// 
// Возвращаемое значение:
//  Строка - хеш
//
Функция ХешСтандартныйКоллекции(Коллекция) Экспорт
	
	Хеш = рдв_ХешиОбъектовПереопределяемый.ХешСтандартныйКоллекции(Коллекция);
	Если Не Хеш = Неопределено Тогда
		Возврат Хеш;	
	КонецЕсли;
	
	МассивХеша = Новый Массив;
	
	ДополнитьМассивХеша(МассивХеша, Коллекция);
	
	УпорядоченныйМассив = УпорядочитьМассив(МассивХеша);
	
	Хеш = КонтрольнаяСуммаСтрокой(УпорядоченныйМассив);
	
	Возврат Хеш;
	
КонецФункции

// Добавляет хеш в таблицу объекта для дальнейшей записи
//
// Параметры:
//  ТаблицаХешей - ТаблицаЗначений				 - см. ВидХешаПоУмолчанию
//  Хеш			 - Строка						 - хеш для записи
//  ВидХеша		 - СправочникСсылка.рдв_ВидыХешей
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавленная строка
//
Функция ХешДобавитьКРасчету(ТаблицаХешей, Хеш, Знач ВидХеша = Неопределено) Экспорт
	
	Если ВидХеша = Неопределено Тогда
		ВидХеша = ХешВидПоУмолчанию();
	КонецЕсли;
	
	СтрокаХеша = ТаблицаХешей.Найти(ВидХеша, "ВидХеша");
	Если СтрокаХеша = Неопределено Тогда
		СтрокаХеша = ТаблицаХешей.Добавить();
		СтрокаХеша.ВидХеша = ВидХеша;
	КонецЕсли;
	СтрокаХеша.Хеш = Хеш;
	
	Возврат СтрокаХеша;
	
КонецФункции

// Вид хеша по умолчанию
// 
// Возвращаемое значение:
//  см. рдв_ХешиОбъектовПовтИсп.ХешВидПоУмолчанию
//
Функция ХешВидПоУмолчанию() Экспорт
	
	Возврат рдв_ХешиОбъектовПовтИсп.ХешВидПоУмолчанию();
	
КонецФункции

// Хеш объекта, ранее посчитанный и записанный
//
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект
//  		- ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ВидХеша	- СправочникСсылка.рдв_ВидыХешей
//			- Неопределено - будет использоваться вид по умолчанию
//  ДополнительныеПараметры	- Неопределено, Структура - для случаев переопределения регистра хранения записей
// 
// Возвращаемое значение:
//	Строка,Неопределено
//
Функция ХешСохраненный(Объект, Знач ВидХеша = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВидХеша = Неопределено Тогда
		ВидХеша = ХешВидПоУмолчанию();
	КонецЕсли;
	
	СсылкаНаОбъект = СсылкаНаОбъект(Объект);
	
	ХешСохраненный = рдв_ХешиОбъектовПереопределяемый.ХешСохраненный(СсылкаНаОбъект, ВидХеша, ДополнительныеПараметры);
	Если ЗначениеЗаполнено(ХешСохраненный) Тогда
		Возврат ХешСохраненный;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХешиОбъектов.Хеш КАК Хеш
	|ИЗ
	|	РегистрСведений.рдв_ХешиОбъектов КАК ХешиОбъектов
	|ГДЕ
	|	ХешиОбъектов.Объект = &Объект
	|	И ХешиОбъектов.ВидХеша = &ВидХеша";
	Запрос.УстановитьПараметр("Объект",	 СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВидХеша", ВидХеша);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(ВыборкаЗапроса.Следующий(), ВыборкаЗапроса.Хеш, Неопределено);
	
КонецФункции

// Хеши объекта, ранее посчитанные и записанные
//
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект
//  		- ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ДополнительныеПараметры	- Неопределено, Структура - для случаев переопределения регистра хранения записей
// 
// Возвращаемое значение:
//	ТаблицаЗначений 
//
Функция ХешиСохраненные(Объект, ДополнительныеПараметры = Неопределено) Экспорт
	
	СсылкаНаОбъект = СсылкаНаОбъект(Объект);
	
	ХешиСохраненные = рдв_ХешиОбъектовПереопределяемый.ХешиСохраненные(СсылкаНаОбъект, ДополнительныеПараметры);
	Если Не ХешиСохраненные = Неопределено Тогда
		Возврат ХешиСохраненные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХешиОбъектов.Хеш КАК Хеш,
	|	ХешиОбъектов.ВидХеша
	|ИЗ
	|	РегистрСведений.рдв_ХешиОбъектов КАК ХешиОбъектов
	|ГДЕ
	|	ХешиОбъектов.Объект = &Объект
	|	И ХешиОбъектов.ВидХеша = &ВидХеша";
	Запрос.УстановитьПараметр("Объект",	 СсылкаНаОбъект);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции

// Рассчитывает и записывает расчитаный хеш
// 
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект
//  		- ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ВидХеша - СправочникСсылка.рдв_ВидыХешей
//			- Неопределено - будет использоваться вид по умолчанию
//	Записать - Булево - если истина обновит запись в БД		
// Возвращаемое значение:
//	ОпределяемыйТип.рдв_ХешируемыйОбъект
//
Функция ХешСтандартныйОбъекта(Объект, ВидХеша = Неопределено, Записать=Ложь) Экспорт
	
	ТаблицаХешей = РассчитатьХеш(Объект, ВидХеша);
	
	Если Записать Тогда
		ЗаписатьХеши(Объект, ТаблицаХешей);
	КонецЕсли;
	
	Хеш = ?(ТаблицаХешей.Количество()=0, Неопределено, ТаблицаХешей[0].Хеш);
	
	Возврат Хеш;
	
КонецФункции

// Свойство отказаться от расчета хеша при записи.
// 
// Возвращаемое значение:
//  Строка - Свойство отказаться от расчета хеша
Функция ХешСвойствоОтказатьсяОтРасчета() Экспорт
	
	Свойство = "рдв_ОтказатьсяОтРасчетаХешаПриЗаписи";
	
	Возврат Свойство;
	
КонецФункции

// Записать отдельно рассчитаный хеш
// 
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект
//  		- ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ВидХеша - СправочникСсылка.рдв_ВидыХешей
//  Хеш - Строка - 
//  ДополнительныеПараметры - Структура
//  
Процедура ХешЗаписать(Объект, ВидХеша, Хеш, ДополнительныеПараметры) Экспорт
	
	Таблица = НоваяТаблицаХешей();
	
	ХешВТаблицуХешей(Таблица, ВидХеша, Хеш);
	
	ЗаписатьХеши(Объект, Таблица, ДополнительныеПараметры);
	
КонецПроцедуры

// Записать отдельно рассчитаные хеши
// 
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект
//  		- ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  Таблица - ТаблицаЗначений - см.рдв_ХешиОбъектовПовтИсп.НоваяТаблицаХешей
//  Хеш - Строка - 
//  ДополнительныеПараметры - Структура
//
Процедура ХешиЗаписать(Объект, Таблица, ДополнительныеПараметры) Экспорт
	
	ЗаписатьХеши(Объект, Таблица, ДополнительныеПараметры);
	
КонецПроцедуры

Функция НоваяТаблицаХешей() Экспорт
	
	Возврат рдв_ХешиОбъектовПовтИсп.НоваяТаблицаХешей().СкопироватьКолонки();
	
КонецФункции

Функция ХешВТаблицуХешей(ТаблицаХешей, ВидХеша, Хеш) Экспорт
	
	НоваяСтрока = ТаблицаХешей.Добавить();
	НоваяСтрока.ВидХеша = ВидХеша;
	НоваяСтрока.Хеш = Хеш;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ИдентификаторИнтернетПоддержки - Строка - уникальное имя программы в сервисах Интернет-поддержки.
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//   * ЗаполнятьДанныеНовыхПодсистемПриПереходеСДругойПрограммы - Булево - если установить Истина, то при переходе с
//                                    другой программы будут автоматически выполнены обработчики начального заполнения
//                                    новых подсистем. При описании обработчика обновления можно при необходимости
//                                    отключить его выполнение, указав свойство НеВыполнятьПриПереходеСДругойПрограммы.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "рдв_ХешиОбъектов";
	Описание.Версия = "1.0.0.0";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// В зависимости от тех или иных условий можно отключить штатное открытие формы
// с описанием изменений в новой версии программы при первом входе в нее (после обновления),
// а также выполнить другие действия.
//
// Не рекомендуется выполнять в данной процедуре какую-либо обработку данных.
// Такие процедуры следует оформлять штатными обработчиками обновления, выполняемыми на каждую версию "*".
// 
// Параметры:
//   ПредыдущаяВерсия     - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия        - Строка - версия после обновления. Как правило, соответствует Метаданные.Версия.
//   ВыполненныеОбработчики - ДеревоЗначений:
//     * НачальноеЗаполнение - Булево - если Истина, то обработчик должен срабатывать при запуске на "пустой" базе.
//     * Версия              - Строка - например, "2.1.3.39". Номер версии конфигурации, при переходе
//                                      на которую должна быть выполнена процедура-обработчик обновления.
//                                      Если указана пустая строка, то это обработчик только для начального заполнения
//                                      (должно быть указано свойство НачальноеЗаполнение).
//     * Процедура           - Строка - полное имя процедуры-обработчика обновления/начального заполнения. 
//                                      Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьНовыйРеквизит"
//                                      Обязательно должна быть экспортной.
//     * РежимВыполнения     - Строка - режим выполнения обработчика обновления. Допустимые значения:
//                                      Монопольно, Отложенно, Оперативно. Если значение не заполнено, обработчик
//                                      считается монопольным.
//     * ОбщиеДанные         - Булево - если Истина, то обработчик должен срабатывать до
//                                      выполнения любых обработчиков, использующих разделенные данные.
//                                      Допустимо указывать только для обработчиков с режимом выполнения Монопольно и Оперативно.
//                                      Если указать значение Истина для обработчика с режимом
//                                      выполнения Отложенно, будет выдано исключение.
//     * УправлениеОбработчиками - Булево - если Истина, то обработчик должен иметь параметр типа Структура, в котором
//                                          есть свойство РазделенныеОбработчики - таблица значений со структурой,
//                                          возвращаемой этой функцией.
//                                      При этом колонка Версия игнорируется. В случае необходимости выполнения
//                                      разделенного обработчика в данную таблицу необходимо добавить строку с
//                                      описанием процедуры обработчика.
//                                      Имеет смысл только для обязательных (Версия = *) обработчиков обновления 
//                                      с установленным флагом ОбщиеДанные.
//     * Комментарий         - Строка - описание действий, выполняемых обработчиком обновления.
//     * Идентификатор       - УникальныйИдентификатор - необходимо заполнять для обработчиков отложенного обновления,
//                                                 для остальных заполнение не требуется. Требуется для идентификации
//                                                 обработчика в случае его переименования.
//     
//     * БлокируемыеОбъекты  - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Полные имена объектов через запятую, 
//                                      которые следует блокировать от изменения до завершения процедуры обработки данных.
//                                      Если заполнено, то также требуется заполнить и свойство ПроцедураПроверки.
//     * ПроцедураПроверки   - Строка - необходимо заполнять для обработчиков отложенного обновления,
//                                      для остальных заполнение не требуется. Имя функции, которая для переданного объекта 
//                                      определяет, завершена ли для него процедура обработки данных. 
//                                      Если переданный объект обработан, то следует вернуть значение Истина. 
//                                      Вызывается из процедуры ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан.
//                                      Параметры, передаваемые в функцию:
//                                         Параметры - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//     * ПроцедураЗаполненияДанныхОбновления - Строка - указывается процедура, которая регистрирует данные,
//                                      подлежащие обновлению данным обработчиком.
//     * ЗапускатьТолькоВГлавномУзле  - Булево - только для обработчиков отложенного обновления с режимом выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен выполняться только в главном
//                                      узле РИБ.
//     * ЗапускатьИВПодчиненномУзлеРИБСФильтрами - Булево - только для обработчиков отложенного обновления с режимом
//                                      выполнения Параллельно.
//                                      Указать Истина, если обработчик обновления должен также выполняться в
//                                      подчиненном узле РИБ с фильтрами.
//     * ЧитаемыеОбъекты              - Строка - объекты, которые обработчик обновления будет читать при обработке данных.
//     * ИзменяемыеОбъекты            - Строка - объекты, которые обработчик обновления будет изменять при обработке данных.
//     * ПриоритетыВыполнения         - ТаблицаЗначений - таблица приоритетов выполнения между отложенными обработчиками,
//                                      изменяющими или читающими одни и те же данные. Подробнее см. в комментарии
//                                      к функции ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика.
//     * ВыполнятьВГруппеОбязательных - Булево - следует указывать, если обработчик требуется
//                                      выполнять в одной группе с обработчиками на версии "*".
//                                      При этом возможно менять порядок выполнения обработчика
//                                      относительно других путем изменения приоритета.
//     * Приоритет           - Число  - для внутреннего использования.
//     * МонопольныйРежим    - Неопределено
//                           - Булево - если указано Неопределено, то обработчик 
//                                      должен безусловно выполняться в монопольном режиме.
//                                      Для обработчиков перехода на конкретную версию (версия <> *):
//                                        Ложь   - обработчик не требует монопольного режима для выполнения.
//                                        Истина - обработчик требует монопольного режима для выполнения.
//                                      Для обязательных обработчиков обновления (Версия = "*"):
//                                        Ложь   - обработчик не требует монопольного режима.
//                                        Истина - обработчик может требовать монопольного режима для выполнения.
//                                                 В такие обработчики передается параметр типа структура
//                                                 со свойством МонопольныйРежим (типа Булево).
//                                                 При запуске обработчика в монопольном режиме передается
//                                                 значение Истина. В этом случае обработчик должен выполнить
//                                                 требуемые действия по обновлению. Изменение параметра
//                                                 в теле обработчика игнорируется.
//                                                 При запуске обработчика в немонопольном режиме передается
//                                                 значение Ложь. В этом случае обработчик не должен вносить никакие
//                                                 изменения в ИБ.
//                                                 Если в результате анализа выясняется, что обработчику требуется
//                                                 изменить данные ИБ, следует установить значение параметра в Истина
//                                                 и прекратить выполнение обработчика.
//                                                 В этом случае оперативное (немонопольное) обновление ИБ будет
//                                                 отменено и будет выдана ошибка с требованием выполнить обновление в
//                                                 монопольном режиме.
//   ВыводитьОписаниеОбновлений - Булево - если установить Ложь, то не будет открыта форма
//                                с описанием изменений в новой версии программы. По умолчанию Истина.
//   МонопольныйРежим           - Булево - признак того, что обновление выполнилось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, Знач МонопольныйРежим) Экспорт
		
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПодпискиНаСобытия

// При записи объекта выполняется расчет и запись хеша объекта
//
// Параметры:
//  Источник - ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  Отказ	 - Булево
//
Процедура ПриЗаписиОбъектаХеша(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СвойствоОтказатьсяОтРасчетаХеша = ХешСвойствоОтказатьсяОтРасчета();
	ОтказатьсяОтРасчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства
														, СвойствоОтказатьсяОтРасчетаХеша
														, Ложь); 
	
	Если ОтказатьсяОтРасчета Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешей = РассчитатьХеш(Источник);
	
	ЗаписатьХеши(Источник.Ссылка, ТаблицаХешей);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОпределениеХешируемыхРеквизитовОбъекта

// Хешируемые реквизиты
//
// Параметры:
//  МетаданныеОбъекта	- ОбъектМетаданных
//  СписокСвойств		- Соответствие, Строка, Массив из Строка, Неопределено
//  ИсключаяСвойства	- Соответствие, Строка, Массив из Строка, Неопределено
// 
// Возвращаемое значение:
//  Структура:
//	  * Реквизиты - Массив из Строка
//	  * ТабличныеЧасти - Структура из КлючИЗначение:
//		  ** Ключ - Строка - имя ТЧ
//		  ** Значение - Массив из Строка - реквизиты ТЧ
//
Функция ХешируемыеРеквизиты(МетаданныеОбъекта, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено) Экспорт
	
	РежимВсеРеквизиты = (СписокСвойств = Неопределено И ИсключаяСвойства = Неопределено);

	СписокСвойств	 = УсловияРасчетаВСоответствии(СписокСвойств);	
	ИсключаяСвойства = УсловияРасчетаВСоответствии(ИсключаяСвойства);
	
	СписокСвойствПослеУдаления	  = ОбщегоНазначения.СкопироватьРекурсивно(СписокСвойств, Ложь);
	ИсключаяСвойстваПослеУдаления = ОбщегоНазначения.СкопироватьРекурсивно(ИсключаяСвойства, Ложь);
	
	Реквизиты = Новый Массив;
	
	#Область Добавляем_реквизиты
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		ДополнитьХешируемыеРеквизитыОбъекта(Реквизиты, Реквизит.Имя, РежимВсеРеквизиты, СписокСвойств, ИсключаяСвойства);
		
		УдалитьСвойство(Реквизит.Имя, СписокСвойствПослеУдаления, ИсключаяСвойстваПослеУдаления);
		
	КонецЦикла;	
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = "Ссылка"
				ИЛИ Реквизит.Имя = "Предопределенный" Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьХешируемыеРеквизитыОбъекта(Реквизиты, Реквизит.Имя, РежимВсеРеквизиты, СписокСвойств, ИсключаяСвойства);
		
		УдалитьСвойство(Реквизит.Имя, СписокСвойствПослеУдаления, ИсключаяСвойстваПослеУдаления);
		
	КонецЦикла;

	#КонецОбласти
	
	ТабличныеЧасти = Новый Структура;
	
	#Область Добавляем_табличные_части
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		РеквизитыТЧ = ХешируемыеРеквизитыТабличнойЧасти(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Реквизиты, РежимВсеРеквизиты, СписокСвойств, ИсключаяСвойства);
		
		Если РеквизитыТЧ.Количество() > 0 Тогда
			ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, РеквизитыТЧ);
		КонецЕсли;
		
		УдалитьСвойство(ТабличнаяЧасть.Имя, СписокСвойствПослеУдаления, ИсключаяСвойстваПослеУдаления);
		
	КонецЦикла;
	
	#КонецОбласти
	
	Если СписокСвойствПослеУдаления.Количество() <> 0 ИЛИ ИсключаяСвойстваПослеУдаления.Количество() <> 0 Тогда
		ОтсутствующиеСвойства = КлючиСвойствВМассив(СписокСвойствПослеУдаления, ИсключаяСвойстваПослеУдаления);
		ВызватьИсключение СтрШаблон("Не обнаружены реквизиты: %1", СтрСоединить(ОтсутствующиеСвойства, ", "));
	КонецЕсли;
	
	Ответ = Новый Структура("Реквизиты, ТабличныеЧасти", Реквизиты, ТабличныеЧасти);
	
	Возврат Ответ;
	
КонецФункции

Функция ХешируемыеРеквизитыТабличнойЧасти(ИмяТЧ, МетаданныеРеквизитовТЧ, РежимВсеРеквизиты, СписокСвойств, ИсключаяСвойства)
	
	Реквизиты = Новый Массив;		

	Если Не РежимВсеРеквизиты
			И Не ВключитьРеквизитВРасчетХеша(ИмяТЧ, СписокСвойств, ИсключаяСвойства, Истина) Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Если Не РежимВсеРеквизиты Тогда
		СписокСвойствТЧ		= СписокСвойств.Получить(ИмяТч);
		ИсключаяСвойстваТЧ	= ИсключаяСвойства.Получить(ИмяТч);
	КонецЕсли;
	
	ВключаемыеСвойстваТЧ	= ?(РежимВсеРеквизиты ИЛИ СписокСвойств.Количество() = 0 ИЛИ СписокСвойствТЧ = Истина, НовыеУсловияРасчета(), СписокСвойствТЧ);
	ИсключаемыеСвойстваТЧ	= ?(РежимВсеРеквизиты ИЛИ ИсключаяСвойстваТЧ = Неопределено ИЛИ ИсключаяСвойстваТЧ = Ложь, НовыеУсловияРасчета(), ИсключаяСвойстваТЧ);
	РежимВсеРеквизитыТЧ		= ВключаемыеСвойстваТЧ.Количество() = 0 И ИсключаемыеСвойстваТЧ.Количество() = 0;
	
	ВключаемыеСвойстваТЧПослеУдаления	= ОбщегоНазначения.СкопироватьРекурсивно(ВключаемыеСвойстваТЧ, Ложь);
	ИсключаемыеСвойстваТЧПослеУдаления	= ОбщегоНазначения.СкопироватьРекурсивно(ИсключаемыеСвойстваТЧ, Ложь);
	
	#Область Добавляем_реквизиты
	
	Для Каждого Реквизит Из МетаданныеРеквизитовТЧ Цикл
		
		ДополнитьХешируемыеРеквизитыОбъекта(Реквизиты, Реквизит.Имя, РежимВсеРеквизитыТЧ, ВключаемыеСвойстваТЧ, ИсключаемыеСвойстваТЧ);
		
		УдалитьСвойство(Реквизит.Имя, ВключаемыеСвойстваТЧПослеУдаления, ИсключаемыеСвойстваТЧПослеУдаления);
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Добавляем_стандартные_реквизиты
	
	Если Не РежимВсеРеквизитыТЧ Тогда // в ТЧ только один стандартный реквизит - добавляем его, только если он указан явно
		
		РеквизитНомерСтроки = "НомерСтроки";
		
		Если ВключаемыеСвойстваТЧ.Количество() > 0
				И ВключитьРеквизитВРасчетХеша(РеквизитНомерСтроки, ВключаемыеСвойстваТЧ, ИсключаемыеСвойстваТЧ) Тогда
			Реквизиты.Добавить(РеквизитНомерСтроки);
		КонецЕсли;
		
		УдалитьСвойство(РеквизитНомерСтроки, ВключаемыеСвойстваТЧПослеУдаления, ИсключаемыеСвойстваТЧПослеУдаления);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ВключаемыеСвойстваТЧПослеУдаления.Количество() <> 0 ИЛИ ИсключаемыеСвойстваТЧПослеУдаления.Количество() <> 0 Тогда
		ОтсутствующиеСвойства = КлючиСвойствВМассив(ВключаемыеСвойстваТЧПослеУдаления, ИсключаемыеСвойстваТЧПослеУдаления);
		ВызватьИсключение СтрШаблон("В табличной части '%1' не обнаружены реквизиты: %2", ИмяТЧ, СтрСоединить(ОтсутствующиеСвойства, ", "));
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ДополнитьХешируемыеРеквизитыОбъекта(Реквизиты, ИмяРеквизита, РежимВсеРеквизиты, СписокСвойств, ИсключаяСвойства)
	
	Если РежимВсеРеквизиты
			ИЛИ ВключитьРеквизитВРасчетХеша(ИмяРеквизита, СписокСвойств, ИсключаяСвойства) Тогда
		Реквизиты.Добавить(ИмяРеквизита);
	КонецЕсли;

КонецПроцедуры

Функция УсловияРасчетаВСоответствии(СписокСвойств)
	
	Если СписокСвойств = Неопределено Тогда
		Соответствие = НовыеУсловияРасчета();
	ИначеЕсли ТипЗнч(СписокСвойств) = Тип("Строка") ИЛИ ТипЗнч(СписокСвойств) = Тип("Массив") Тогда
		Соответствие = ПутиКРеквизитамВУсловиеРасчета(СписокСвойств);
	Иначе
		Соответствие = СписокСвойств;
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает условия расчета, полученные по пути к реквизитам,
// для использования в параметрах СписокСвойств / ИсключаяСвойства метода ХешРассчитать
//
// Параметры:
//  ПутиКРеквизитам - Массив из Строка	- пути к ревизитам. Для реквизита табличной части в начале указывается имя табличной части и точка.
//					- Строка			- пути к ревизитам, разделенные запятой
//
// Возвращаемое значение:
//  Соответствие
//
Функция ПутиКРеквизитамВУсловиеРасчета(ПутиКРеквизитам)
	
	СписокСвойств = НовыеУсловияРасчета();	
	
	МассивПутей = ?(ТипЗнч(ПутиКРеквизитам) = Тип("Строка"), СтрРазделить(ПутиКРеквизитам, ", ", Ложь), ПутиКРеквизитам);
	
	Для Каждого ПутьКРеквизиту Из МассивПутей Цикл
		
		Если СтрНайти(ПутьКРеквизиту, ".") = 0 Тогда
			ДобавитьРеквизитВУсловиеРасчета(СписокСвойств, ПутьКРеквизиту);
		Иначе
			ПутьКРеквизитуТЧ = СтрРазделить(ПутьКРеквизиту, ". ", Ложь);
			Если ПутьКРеквизитуТЧ.Количество() <> 2 Тогда // Путь к реквизиту ТЧ должен состоять из 2-х компонент
				ВызватьИсключение СтрШаблон("Некорректный путь к реквизиту '%1'", ПутьКРеквизиту);
			КонецЕсли;
			ДобавитьРеквизитТабличнойЧастиВУсловиеРасчета(СписокСвойств, ПутьКРеквизитуТЧ[0], ПутьКРеквизитуТЧ[1]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСвойств;
	
КонецФункции

// Проверяет, следует ли включить реквизит в расчет хеша по переданным включаемым/исключаемым свойствам
//
// Правила исключения реквизита:
// - Истина - исключается
// - Ложь, Неопределено - не исключается	
//
// Правила исключения табличной части:
// - Истина - исключается
// - Ложь, Неопределено - не исключается
// - Соответствие
//   - пустое - не исключается
//   - иначе - исключаются указанные реквизиты ТЧ
//	
// Правила включения реквизита:
// - Истина - включается
// - Ложь, Неопределено - не включается	
//
// Правила включения табличной части:
// - Истина - включается
// - Ложь, Неопределено - не включается
// - Соответствие
//   - пустое - не включается (т.к. нет реквизитов)
//   - иначе - включаются указанные реквизиты ТЧ
//
// Параметры:
//  ИмяРеквизита	  - Строка - имя проверяемого реквизита или табличной части
//  СписокСвойств	  - Соответствие из КлючИЗначение:
//						* Ключ - Строка - имя реквизита или ТЧ
//						* Значение - Булево - включать реквизит или все реквизиты ТЧ
//								   - Соответствие - включать реквизиты табличной части
//  ИсключаяСвойства  - Соответствие из КлючИЗначение:
//						* Ключ - Строка - имя реквизита или ТЧ
//						* Значение - Булево - исключать реквизит или ТЧ
//								   - Соответствие - исключать реквизиты табличной части
//	ЭтоТабличнаяЧасть - Булево - указывает, что проверяется табличная часть объекта
//
// Возвращаемое значение:
//  Булево - реквизит включен в расчет
//
Функция ВключитьРеквизитВРасчетХеша(ИмяРеквизита, СписокСвойств, ИсключаяСвойства, ЭтоТабличнаяЧасть = Ложь)
	
	Если ИсключаяСвойства.Получить(ИмяРеквизита) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СписокСвойств.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		Свойство = СписокСвойств.Получить(ИмяРеквизита);
		Возврат Свойство = Истина ИЛИ ЭтоТабличнаяЧасть И ТипЗнч(Свойство) = Тип("Соответствие") И Свойство.Количество() > 0;
	КонецЕсли;

КонецФункции

Процедура УдалитьСвойство(ИмяСвойства, СписокСвойств, ИсключаяСвойства)

	СписокСвойств.Удалить(ИмяСвойства);	
	ИсключаяСвойства.Удалить(ИмяСвойства);
	
КонецПроцедуры

Функция КлючиСвойствВМассив(СписокСвойств, ИсключаяСвойства)

	МассивКлючей = КлючиКоллекции(СписокСвойств);

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКлючей, КлючиКоллекции(ИсключаяСвойства), Истина);
	
	Возврат МассивКлючей;
	
КонецФункции

#КонецОбласти

#Область ОпределениеХешируемыхЗначений

Процедура ДополнитьМассивХеша(МассивХеша, Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("ТаблицаЗначений") Тогда
		
		ДополнитьМассивХешаПоТаблицеЗначений(МассивХеша, Значение);
		
	ИначеЕсли ТипЗначения = Тип("ДеревоЗначений") Тогда
		
		ДополнитьМассивХешаПоДеревуЗначений(МассивХеша, Значение);
		
	ИначеЕсли ТипЗначения = Тип("Массив")
			ИЛИ ТипЗначения = Тип("ФиксированныйМассив")
			ИЛИ ТипЗначения = Тип("Структура")
			ИЛИ ТипЗначения = Тип("ФиксированнаяСтруктура")
			ИЛИ ТипЗначения = Тип("Соответствие")
			ИЛИ ТипЗначения = Тип("ФиксированноеСоответствие")
			ИЛИ ТипЗначения = Тип("СписокЗначений") Тогда
			
		ЭтоМассив = ТипЗначения = Тип("Массив") ИЛИ ТипЗначения = Тип("ФиксированныйМассив");
		Для Каждого Элемент Из Значение Цикл
			ДополнитьМассивХеша(МассивХеша, ?(ЭтоМассив, Элемент, Элемент.Значение));
		КонецЦикла;
		
	Иначе
			
		ЗначениеДляХеша = ЗначениеВСтроку(Значение);
		МассивХеша.Добавить(ЗначениеДляХеша);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМассивХешаПоДеревуЗначений(МассивХеша, Коллекция)
	
	КоллекцияТаблица = Неопределено;
	
	ПреобразоватьДеревоЗначенийВТаблицуЗначений(Коллекция, КоллекцияТаблица);
		
	ДополнитьМассивХешаПоТаблицеЗначений(МассивХеша, КоллекцияТаблица);
	
КонецПроцедуры

Процедура ДополнитьМассивХешаПоТаблицеЗначений(МассивХеша, Коллекция)
	
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из Коллекция.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	СтрокаСортировки = СтрСоединить(МассивКолонок, ",");
	Коллекция.Сортировать(СтрокаСортировки);
	
	Для Каждого СтрокаТаблицы Из Коллекция Цикл
		Для Каждого Колонка Из МассивКолонок Цикл
			ЗначениеДляХеша = ЗначениеВСтроку(СтрокаТаблицы[Колонка]);
			МассивХеша.Добавить(ЗначениеДляХеша);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПреобразоватьДеревоЗначенийВТаблицуЗначений(КоллекцияДерево, КоллекцияТаблица, УИД = Неопределено)
	
	Если УИД = Неопределено Тогда
		УИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Если КоллекцияТаблица = Неопределено Тогда
		
		КоллекцияТаблица = Новый ТаблицаЗначений;
		КоллекцияТаблица.Колонки.Добавить("Родитель");
		КоллекцияТаблица.Колонки.Добавить("УИД");
		Для Каждого Колонка Из КоллекцияДерево.Колонки Цикл
			КоллекцияТаблица.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из КоллекцияДерево.Строки Цикл
		
		СтрокаТаблицы = КоллекцияТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
		
		СтрокаТаблицы.УИД = Новый УникальныйИдентификатор();
		СтрокаТаблицы.Родитель = УИД;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПреобразоватьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, КоллекцияТаблица, СтрокаТаблицы.УИД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначениеВСтроку(Значение)
	
	ЗначениеСтрокой = "";
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Строка") Тогда
		ЗначениеСтрокой = Значение;
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		ЗначениеСтрокой = Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		ЗначениеСтрокой = Формат(Значение, "ДФ=ггггММддЧЧммсс");
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		ЗначениеСтрокой = Формат(Значение, "БЛ=false; БИ=true");
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		ЗначениеСтрокой = XMLСтрока(Значение);
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) И ОбщегоНазначения.ЭтоПеречисление(Значение.Метаданные()) Тогда
		ЗначениеСтрокой = ?(Значение.Пустая(), "", ОбщегоНазначения.ИмяЗначенияПеречисления(Значение));
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		ЗначениеСтрокой = Строка(Значение.УникальныйИдентификатор());
	Иначе
		ЗначениеСтрокой = Строка(Значение);
	КонецЕсли;
	
	Возврат ЗначениеСтрокой;
	
КонецФункции

#КонецОбласти

// Добавляет реквизит в условие расчета в свойства СписокСвойств / ИсключаяСвойства для метода ХешРассчитать
//
// Параметры:
//  Свойства	 - см. НовыеУсловияРасчета
//  ИмяРеквизита - Строка - реквизит для условия
//
Процедура ДобавитьРеквизитВУсловиеРасчета(Свойства, ИмяРеквизита)
	
	Свойства.Вставить(ИмяРеквизита, Истина);
	
КонецПроцедуры

// Добавляет реквизит в условие расчета в свойство СписокСвойств / ИсключаяСвойства для метода ХешРассчитать
//
// Параметры:
//  Свойства			- см. НовыеУсловияРасчета
//  ИмяТабличнойЧасти	- Строка - имя табличной части
//  ИмяРеквизита		- Строка - имя реквизита табличной части
//
Процедура ДобавитьРеквизитТабличнойЧастиВУсловиеРасчета(Свойства, ИмяТабличнойЧасти, ИмяРеквизита) Экспорт
	
	ТЧ = Свойства.Получить(ИмяТабличнойЧасти);
	Если ТЧ = Неопределено Тогда
		ТЧ = НовыеУсловияРасчета();
		Свойства.Вставить(ИмяТабличнойЧасти, ТЧ);
	КонецЕсли;
	
	ТЧ.Вставить(ИмяРеквизита, Истина);
	
КонецПроцедуры

// Конструктор новых условий расчета, используемых в параметрах СписокСвойств / ИсключаяСвойства метода ХешРассчитать
//
// Возвращаемое значение:
//	Соответствие
//
Функция НовыеУсловияРасчета()
	
	Возврат Новый Соответствие;

КонецФункции

Функция ИспользуетСтандартныйРасчетХеша(Объект)
	
	ОбъектыНестандартногоРасчетаХеша = Новый Массив;
	
	рдв_ХешиОбъектовПереопределяемый.ПриОпределенииОбъектовНестандартногоРасчетаХеша(ОбъектыНестандартногоРасчетаХеша);
	
	Возврат ОбъектыНестандартногоРасчетаХеша.Найти(Объект.Метаданные().ПолноеИмя()) = Неопределено;
	
КонецФункции

Функция ЭтоСсылка(Объект)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект));
	
КонецФункции

// Хеш объекта
//
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект, ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ВидХеша	- СправочникСсылка.рдв_ВидыХешей
//			- Неопределено - будет использоваться вид по умолчанию
// 
// Возвращаемое значение:
//	ОпределяемыйТип.рдв_ХешТип
//
Функция Хеш(Объект, Знач ВидХеша = Неопределено)

	Если ВидХеша = Неопределено Тогда
		ВидХеша = ХешВидПоУмолчанию();
	КонецЕсли;

	ЭтоСсылка	= ЭтоСсылка(Объект);
	Ссылка		= ?(ЭтоСсылка, Объект, Объект.Ссылка);
	ХешОбъекта	= Неопределено;
	
	Если ЭтоСсылка
			ИЛИ Не Объект.ЭтоНовый() И Не Объект.Модифицированность() Тогда
		ХешОбъекта = ХешСохраненный(Ссылка, ВидХеша);
	КонецЕсли;
	
	Если ХешОбъекта = Неопределено Тогда
	
		ОбъектОбъект = ?(ЭтоСсылка, Объект.ПолучитьОбъект(), Объект);
		ТаблицаХешей = РассчитатьХеш(ОбъектОбъект, ВидХеша);
		ХешОбъекта	 = ?(ТаблицаХешей.Количество() = 0, Неопределено, ТаблицаХешей[0].Хеш);
		
	КонецЕсли;
	
	Возврат ХешОбъекта;
	
КонецФункции

// Рассчитывает таблицу хешей объекта
//
// Параметры:
//  Объект	- ОпределяемыйТип.рдв_ХешируемыйОбъект, ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
//  ВидХеша	- СправочникСсылка.рдв_ВидыХешей
//			- Неопределено - будут рассчитаны хеши всех определенных для объекта видов
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. рдв_ХешиОбъектов.НоваяТаблицаХешей 
//
Функция РассчитатьХеш(Объект, ВидХеша = Неопределено)
	
	ТаблицаХешей = НоваяТаблицаХешей();

	Если ИспользуетСтандартныйРасчетХеша(Объект) Тогда
		
		Если ВидХеша = Неопределено Тогда
			ВидХеша = ХешВидПоУмолчанию();
		КонецЕсли;
		
		Хеш = ХешРассчитать(Объект);
		
		ХешДобавитьКРасчету(ТаблицаХешей, Хеш, ВидХеша);
		
	Иначе
		
		рдв_ХешиОбъектовПереопределяемый.ХешПерсональныйРасчет(Объект, ТаблицаХешей, ВидХеша);
		
	КонецЕсли;
		
	Возврат ТаблицаХешей; 
	
КонецФункции

// Ссылка на объект
//
// Параметры:
//  Объект - ОпределяемыйТип.рдв_ХешируемыйОбъект, ОпределяемыйТип.рдв_ХешируемыйОбъектОбъект
// 
// Возвращаемое значение:
//	ОпределяемыйТип.рдв_ХешируемыйОбъект
//
Функция СсылкаНаОбъект(Объект)
	
	Если ЭтоСсылка(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

Процедура ЗаписатьХеши(Объект, Таблица, ДополнительныеПараметры = Неопределено)
	
	ВидыХешейОбъекта = Таблица.Скопировать(, "ВидХеша");
	ВидыХешейОбъекта.Свернуть("ВидХеша");
	Если ВидыХешейОбъекта.Количество() <> Таблица.Количество() Тогда
		ВызватьИсключение "В таблице хешей объекта обнаружены дубли по видам хеша";
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка

		Записано = рдв_ХешиОбъектовПереопределяемый.ЗаписатьХеши(Объект, Таблица, ДополнительныеПараметры);
		
		Если Не Записано = Истина Тогда
	
			Для Каждого СтрокаХеша Из Таблица Цикл
				
				Набор = РегистрыСведений.рдв_ХешиОбъектов.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(Объект);
				Набор.Отбор.ВидХеша.Установить(СтрокаХеша.ВидХеша);
				
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Объект	= Объект;
				НоваяЗапись.ВидХеша	= СтрокаХеша.ВидХеша;
				НоваяЗапись.Хеш		= СтрокаХеша.Хеш;
				
				Набор.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция УпорядочитьМассив(МассивДляУпорядочивания, Знач ПорядокСортировки = "Возр", Знач СортироватьПоЗначению = Истина)

	НаправлениеСортировкиКИспользованию = НаправлениеСортировки.Возр;
	Если СтрСравнить(ПорядокСортировки, "Убыв") = 0 Тогда
		ПорядокСортировки = НаправлениеСортировки.Убыв;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(МассивДляУпорядочивания);
	Если СортироватьПоЗначению Тогда
		Список.СортироватьПоЗначению(НаправлениеСортировкиКИспользованию);
	Иначе
		Список.СортироватьПоПредставлению(НаправлениеСортировкиКИспользованию);
	КонецЕсли;
	Упорядочен = Список.ВыгрузитьЗначения();
	
	Возврат Упорядочен;

КонецФункции

Функция КонтрольнаяСуммаСтрокой(Данные)
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Данные, ХешФункция.MD5);
	
КонецФункции

Функция КлючиКоллекции(Коллекция)
	
	Ключи = Новый Массив;
	
	Для Каждого Элемент Из Коллекция Цикл
		Ключи.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти
