
#Область ПрограммныйИнтерфейс

// Возвращает описание динамических настроек интеграции.
// Возвращаемое значение:
//  Структура - Описание параметров интеграции, содержащее:
//   * Таймаут - Число - Таймаут соединения в секундах (по умолчанию 30)
//   * ПисатьЗаголовки - Булево - логи будут содержать заголовки обращений
//   * HTTPМетод - Строка - GET, POST
//   * АдресСервиса - Строка
//   * ТокенАвторизации - Строка
//
Функция ДинамическиеНастройкиИтеграцииОписание() Экспорт
	
	ПараметрыИтеграции = Новый Структура;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("рдв_Интеграция");
	ЗначениеПоУмолчанию = 30;
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "Таймаут", "Таймаут"
										, ОбщегоНазначения.ОписаниеТипаЧисло(10,0), ЗначениеПоУмолчанию);
										
	ЗначениеПоУмолчанию = Истина;
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "ПисатьЗаголовки", "Писать заголовки"
										, Новый ОписаниеТипов("Булево"), ЗначениеПоУмолчанию);
										
	ЗначениеПоУмолчанию = "POST";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "HTTPМетод", "HTTP метод"
										, ОбщегоНазначения.ОписаниеТипаСтрока(150), ЗначениеПоУмолчанию);
										
	ЗначениеПоУмолчанию = "";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "АдресСервиса", "Адрес сервиса"
										, ОбщегоНазначения.ОписаниеТипаСтрока(150), ЗначениеПоУмолчанию);
										

	ЗначениеПоУмолчанию = "";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "ПараметрыURL", "Параметры URL"
										, ОбщегоНазначения.ОписаниеТипаСтрока(300), ЗначениеПоУмолчанию);
										
										
	ЗначениеПоУмолчанию = "";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "ТокенАвторизации", "Токена авторизации"
										, ОбщегоНазначения.ОписаниеТипаСтрока(150), ЗначениеПоУмолчанию);
	
	Возврат ПараметрыИтеграции;
	
КонецФункции

// Устанавливает соединение с HTTP-сервером.
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения:
//   * Адрес - Строка - Адрес сервера
//   * Порт - Число - Порт сервера (по умолчанию 80/443)
//   * Пользователь - Строка - Имя пользователя
//   * Пароль - Строка - Пароль пользователя
//   * ЗащищенноеСоединение - Булево - Признак использования HTTPS
//  ДополнительныеПараметры - Структура - Дополнительные параметры соединения
// Возвращаемое значение:
//  HTTPСоединение - Объект соединения с сервером
//
Функция СоединениеОткрыть(ПараметрыСоединения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ЭтоВходящийЗапрос = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭтоВходящийЗапрос", Ложь);
	Если ЭтоВходящийЗапрос Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Порт = ПараметрыСоединения.Порт;
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Порт = ?(ПараметрыСоединения.ЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	Таймаут = 30;
	
	Соединение = Новый HTTPСоединение(
		ПараметрыСоединения.Адрес,
		Порт,
		ПараметрыСоединения.Пользователь,
		ПараметрыСоединения.Пароль,,
		Таймаут,
		ЗащищенноеСоединение
	);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыСоединения", ПараметрыСоединения);
	КонецЕсли;
	
	Возврат Соединение;
	
КонецФункции

// Отправляет сообщение на веб сервер.
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения
//  Соединение - ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения
//  Сообщение - Структура - Данные сообщения:
//   * ТекстСообщения - Строка - Текст сообщения
//   * ИдентификаторСообщения - Строка - Идентификатор сообщения
//   * ИдентификаторСобытия - Строка - Идентификатор события
//   * АдресМетода - Строка - адрес метода
//  РезультатОтправки - Структура -  - Результат отправки:
//   * Успешно - Булево - Признак успешной отправки
//   * Статус - Строка - Статус отправки ("SUCCESS"/"FAILURE")
//   * Ответ - Строка - Текст ответа
//   * ДополнительныеНаборы - Структура - Дополнительные данные
//  ДополнительныеПараметры - Структура - см.ДинамическиеНастройкиИтеграцииОписание
//
Процедура ОтправитьСообщение(ПараметрыСоединения, Соединение, Сообщение, РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Заголовки = ЗаголовкиСтандартногоЗапроса();
	ДополнительныеНастройки = ПараметрыСоединения.ДополнительныеНастройки;
	
	АдресРесурса = АдресРесурса(ДополнительныеНастройки, Сообщение.АдресМетода);
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Сообщение.ТекстСообщения);
	
	ТекстОшибки = "";
	Успешно = Ложь;;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ДополнительныеНастройки.HTTPМетод, Запрос);
		Успешно = Ответ.КодСостояния >= 200 И Ответ.КодСостояния <= 299;
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	РезультатОтправки.Успешно = Успешно;
	РезультатОтправки.Статус= ?(Успешно, "SUCCESS", "FAILURE");
	Если РезультатОтправки.Успешно Тогда
		РезультатОтправки.Ответ = Ответ.ПолучитьТелоКакСтроку();
		РезультатОтправки.ТекстОшибки = ТекстОшибки;
	Иначе
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			РезультатОтправки.ТекстОшибки = ТекстОшибки;
		Иначе
			РезультатОтправки.ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
		КонецЕсли;
		РезультатОтправки.Вставить("Ответ", "");
	КонецЕсли;
	ДополнительныеНаборы = Новый Структура;
	ДополнительныеНаборы.Вставить("ЗаголовкиОтвета", ?(Ответ=Неопределено, Ответ, Ответ.Заголовки));
	ДополнительныеНаборы.Вставить("ЗаголовкиСообщения", Заголовки);
	РезультатОтправки.ДополнительныеНаборы = ДополнительныеНаборы;
	
КонецПроцедуры

// Получает сообщение
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения
//  Соединение - HTTPСоединение - Объект соединения
//  Сообщение - Структура - Структура для заполнения данными сообщения
//  ОтветСервиса - Структура - Структура для заполнения результатом получения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
// Возвращаемое значение:
//  Булево - Признак успешного получения сообщения
//
Функция ПолучитьСообщение(ПараметрыСоединения, Соединение, Сообщение, ОтветСервиса, ДополнительныеПараметры) Экспорт
	
	СообщениеОбработано = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СообщениеОбработано", Ложь);
	Если СообщениеОбработано Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = ДополнительныеПараметры.Запрос;
	ДанныеЗапроса = ДанныеЗапроса(Запрос);
	
	ТекстОшибки = "";
	Успешно = Ложь;
	Попытка
		ДанныеРазбора = РазобратьДанныеСтандартногоЗапроса(ДанныеЗапроса);
		Успешно = Истина;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ОтветСервиса = Новый Структура;
	ОтветСервиса.Вставить("ТекстОшибки", ТекстОшибки);
	ОтветСервиса.Вставить("Успешно", Успешно);
	Ответ = СформироватьСтандартныйОтветСервиса(Сообщение.ИдентификаторСообщения);
	ОтветСервиса.Вставить("Ответ", Ответ.ПолучитьТелоКакСтроку());
	ОтветСервиса.Вставить("ДополнительныеНаборы", Неопределено);
	ОтветСервиса.Вставить("Статус", ?(ОтветСервиса.Успешно
									, "SUCCESS"
									, "FAILURE"));
									
	Если ПараметрыСоединения.ДополнительныеНастройки.ПисатьЗаголовки Тогда
		ДополнительныеНаборы = Новый Структура;
		ДополнительныеНаборы.Вставить("Заголовки"		, Новый Соответствие(Запрос.Заголовки));
		ДополнительныеНаборы.Вставить("ПараметрыURL"	, Новый Соответствие(Запрос.ПараметрыURL));
		ДополнительныеНаборы.Вставить("ПараметрыЗапроса", Новый Соответствие(Запрос.ПараметрыЗапроса));
		ОтветСервиса.Вставить("ДополнительныеНаборы", ДополнительныеНаборы);
	КонецЕсли;
									
	Сообщение.ИдентификаторСобытия = ДанныеРазбора.Мета.eventid;
	Сообщение.ИдентификаторСообщения = ДанныеРазбора.Мета.id;
	Сообщение.ВидСообщения = ДополнительныеПараметры.ИмяВидаСообщения;
	Сообщение.ТекстСообщения = ДанныеЗапроса.Тело;
	
	ДополнительныеПараметры.Вставить("Ответ", Ответ);
	ДополнительныеПараметры.Вставить("СообщениеОбработано", Истина);
	
	Возврат Истина;
	
КонецФункции

// Подтверждает получение сообщения
// Параметры:
//  Соединение - Object - Объект соединения
//  ПараметрыСоединения - Структура - Параметры соединения
//  Сообщение - Структура - Данные сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры, содержащие:
//   * ТегСообщения - Строка - Тег сообщения для подтверждения
// Возвращаемое значение:
//  Булево - Признак успешного подтверждения
//
Функция ПодтвердитьПолучениеСообщения(Соединение, ПараметрыСоединения, Сообщение, ДополнительныеПараметры) Экспорт
	
	
	
КонецФункции

// Закрывает соединение с HTTP-сервером.
// Параметры:
//  Соединение - HTTPСоединение - Объект соединения для закрытия
// Возвращаемое значение:
//  Булево - Признак успешного закрытия соединения
//
Функция СоединениеЗакрыть(Соединение) Экспорт
	
	Соединение = Неопределено;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаголовкиСтандартногоЗапроса() Экспорт
	Заголовки = Новый Соответствие();
	ДобавитьЗаголовокContentTypeApplicationJson(Заголовки);
	ДобавитьЗаголовокContentTypeCharset(Заголовки, "utf-8");
	
	Возврат Заголовки;
КонецФункции

Процедура ДобавитьЗаголовокContentTypeApplicationJson(Заголовки)
	ДобавитьЗаголовок(Заголовки, "Content-Type", "application/json");
КонецПроцедуры

Процедура ДобавитьЗаголовокContentTypeCharset(Заголовки, Кодировка = "utf-8")
	ДобавитьЗаголовок(Заголовки, "Content-Type", "charset=" + Кодировка);
КонецПроцедуры

Функция ДобавитьЗаголовок(Заголовки, Ключ, Значение) Экспорт
	ТекущееЗначение = Заголовки[Ключ];
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Или ПустаяСтрока(ТекущееЗначение) Тогда 
		Заголовки.Вставить(Ключ, Значение);
	Иначе
		ЭлементыЗначения = СтрРазделить(ТекущееЗначение, ";");
		НовыеЭлементыЗначения = СтрРазделить(Значение, ";");
		Для ИндексЭлемента = 0 По ЭлементыЗначения.Количество() - 1 Цикл
			ЭлементыЗначения[ИндексЭлемента] = НРег(СокрЛП(ЭлементыЗначения[ИндексЭлемента]));
		КонецЦикла;
		Для Каждого НовыйЭлемент Из НовыеЭлементыЗначения Цикл
			НовыйЭлемент = НРег(СокрЛП(НовыйЭлемент));
			Если ЭлементыЗначения.Найти(НовыйЭлемент) = Неопределено Тогда
				ЭлементыЗначения.Добавить(НовыйЭлемент);
			КонецЕсли;
		КонецЦикла;
		Заголовки.Вставить(Ключ, СтрСоединить(ЭлементыЗначения, "; "));
	КонецЕсли;
КонецФункции

Функция РазобратьДанныеСтандартногоЗапроса(ДанныеЗапроса)
	
	ДанныеРазбора = Новый Структура("Данные,Мета");
	
	Если ДанныеЗапроса.HTTPМетод = "GET" Тогда
		Возврат ДанныеРазбора;
	КонецЕсли;
	
	Попытка
		ДанныеJSON = ПолучитьДанныеJSON(ДанныеЗапроса.Тело);
	ИСключение
		ОписаниеОшибки = ОписаниеОшибки();
		Ошибка = НСтр("ru = 'Ошибка разбора JSON входящего запроса.'");
		Ошибка = Ошибка + "
		|" + ОписаниеОшибки;
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	СостояниеЧтения = рдв_ЧтениеJSON.НовоеСостояниеЧтения();
	Если ТипЗнч(ДанныеJSON) = Тип("Массив") Тогда
		ДанныеРазбора.Данные = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON[0], "data",,, СостояниеЧтения);
		ДанныеРазбора.Мета = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON[0], "meta",,, СостояниеЧтения);
	Иначе
		ДанныеРазбора.Данные = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "data",,, СостояниеЧтения);
		ДанныеРазбора.Мета = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "meta",,, СостояниеЧтения);
	КонецЕсли;
	
	Если СостояниеЧтения.ЕстьОшибки Тогда
		ВызватьИсключение СостояниеЧтения.Ошибка;
	КонецЕсли;
	
	Возврат ДанныеРазбора;
	
КонецФункции

Функция ДанныеЗапроса(Запрос)
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("HTTPМетод", Запрос.HTTPМетод);
	ДанныеЗапроса.Вставить("БазовыйURL", Запрос.БазовыйURL);
	ДанныеЗапроса.Вставить("ОтносительныйURL", Запрос.ОтносительныйURL);
	ДанныеЗапроса.Вставить("Заголовки", Новый Соответствие(Запрос.Заголовки));
	ДанныеЗапроса.Вставить("Тело", Запрос.ПолучитьТелоКакСтроку());
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ПолучитьДанныеJSON(ТекстJSON, ПрочитатьВСоответствие = Ложь)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	
КонецФункции

Функция СформироватьСтандартныйОтветСервиса(ИдентификаторСообщения, Успешно = Истина, Данные = Неопределено, Ошибки = Неопределено) Экспорт
	
	КодСостоянияОтвета = 200; // Транспорт отработал
	
	Ответ = Новый HTTPСервисОтвет(КодСостоянияОтвета);
	ДобавитьЗаголовокContentTypeApplicationJson(Ответ.Заголовки);
	ДобавитьЗаголовокContentTypeCharset(Ответ.Заголовки, "utf-8");
	
	СтруктураJSON = Новый Структура();
	СтруктураJSON.Вставить("success", Успешно);
	Если ЗначениеЗаполнено(Данные) Тогда
		СтруктураJSON.Вставить("data", Данные);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Мета = Новый Структура("id", ИдентификаторСообщения);
		СтруктураJSON.Вставить("meta", Мета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		СтруктураJSON.Вставить("errors", Ошибки);
	КонецЕсли;
	
	ТекстJSON = ПолучитьТекстJSON(СтруктураJSON);
	Ответ.УстановитьТелоИзСтроки(ТекстJSON);

	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТекстJSON(ДанныеJSON) Экспорт
	
	Если ДанныеJSON = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция АдресРесурса(ДополнительныеНастройки, АдресМетода)
	
	МассивПути = Новый Массив;
	АдресСервиса = ДополнительныеНастройки.АдресСервиса;
	ПараметрыURL = ДополнительныеНастройки.ПараметрыURL;
	
	Если ЗначениеЗаполнено(ДополнительныеНастройки.АдресСервиса) Тогда
		МассивПути.Добавить("/");
		МассивПути.Добавить(ДополнительныеНастройки.АдресСервиса);//БазовыйURL
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресМетода) Тогда
		МассивПути.Добавить("/");
		МассивПути.Добавить(АдресМетода);//ОтносительныйURL
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеНастройки.ПараметрыURL) Тогда
		МассивПути.Добавить(ДополнительныеНастройки.ПараметрыURL);//Дополнительные параметры передаваемые в http-запрос
	КонецЕсли;
	
	АдресРесурса = СтрСоединить(МассивПути);
	
	Возврат АдресРесурса;
	
КонецФункции

#КонецОбласти
