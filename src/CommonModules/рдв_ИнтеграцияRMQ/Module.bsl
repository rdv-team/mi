
#Область ПрограммныйИнтерфейс

// Возвращает описание динамических настроек интеграции.
// Возвращаемое значение:
//  Структура - Описание параметров интеграции, содержащее:
//   * ТаймаутПолучение - Число - Таймаут получения сообщений в миллисекундах (по умолчанию 1000)
//
Функция ДинамическиеНастройкиИтеграцииОписание() Экспорт
	
	ПараметрыИтеграции = Новый Структура;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("рдв_Интеграция");
	
	ЗначениеПоУмолчанию = 1000;
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "ТаймаутПолучение", "Таймаут получение (мс)"
										, ОбщегоНазначения.ОписаниеТипаЧисло(10,0), ЗначениеПоУмолчанию);
										
	ЗначениеПоУмолчанию = "";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "ОчередьОбмена", "Очередь обмена"
										, ОбщегоНазначения.ОписаниеТипаСтрока(100), ЗначениеПоУмолчанию);
										
	ЗначениеПоУмолчанию = "";
	Модуль.ИнтеграцияДобавитьОписаниеПараметра(ПараметрыИтеграции, "Хост", "Vhost"
										, ОбщегоНазначения.ОписаниеТипаСтрока(100), ЗначениеПоУмолчанию);
	
	Возврат ПараметрыИтеграции;
	
КонецФункции

// Устанавливает соединение с RabbitMQ сервером.
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения:
//   * Адрес - Строка - Адрес сервера
//   * ВиртуальныйХост - Строка - Имя виртуального хоста
//   * Пользователь - Строка - Имя пользователя
//   * Пароль - Строка - Пароль пользователя
//   * ДополнительныеНастройки - Структура - см.ДинамическиеНастройкиИтеграцииОписание
//  ДополнительныеПараметры - Структура - Дополнительные параметры соединения
// Возвращаемое значение:
//  ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения с RabbitMQ
//
Функция СоединениеОткрыть(ПараметрыСоединения, ДополнительныеПараметры) Экспорт
	
	ДопНастройки = ПараметрыСоединения.ДополнительныеНастройки;
	
	Компонента = Обработки.рдв_КомпонентаRabbitMQ.Создать();
	ЗаполнитьЗначенияСвойств(Компонента, ПараметрыСоединения);
	Компонента.ВиртуальныйХост = ДопНастройки.Хост;
	Попытка
		Компонента.УстановитьСоединение();
	Исключение
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ШаблонОшибки = "ru = 'Не удалось записать набор записей по причине: %1'";
		ТекстОшибки = НСтр(СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())), КодОсновногоЯзыка);
		
		ЗаписьЖурналаРегистрации(
			"Инициализация внешней компоненты RMQ",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Обработки.рдв_КомпонентаRabbitMQ,
			, ТекстОшибки
		);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Компонента;
	
КонецФункции

// Отправляет сообщение в очередь RabbitMQ.
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения
//  Соединение - ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения
//  Сообщение - Структура - Данные сообщения:
//   * ТекстСообщения - Строка - Текст сообщения
//   * ИдентификаторСообщения - Строка - Идентификатор сообщения
//   * ИдентификаторСобытия - Строка - Идентификатор события
//  РезультатОтправки - Структура -  - Результат отправки:
//   * Успешно - Булево - Признак успешной отправки
//   * Статус - Строка - Статус отправки ("SUCCESS"/"FAILURE")
//   * Ответ - Строка - Текст ответа
//   * ДополнительныеНаборы - Структура - Дополнительные данные
//  ДополнительныеПараметры - Структура - см.ДинамическиеНастройкиИтеграцииОписание
//
Процедура ОтправитьСообщение(ПараметрыСоединения, Соединение, Сообщение, РезультатОтправки, ДополнительныеПараметры) Экспорт
	
	Соединение.ТочкаОбмена = Сообщение.АдресМетода;
	
	Ответ = Соединение.ОтправитьСообщение(Сообщение.ТекстСообщения,
											Сообщение.КлючМаршрутизации,
											Сообщение.ИдентификаторСообщения,
											Сообщение.ИдентификаторСобытия);
	ЗаполнитьЗначенияСвойств(РезультатОтправки, Ответ);
	РезультатОтправки.Статус = ?(РезультатОтправки.Успешно
									, "SUCCESS"
									, "FAILURE");
	РезультатОтправки.Маршрут = Сообщение.КлючМаршрутизации; //может быть переопределен на проекте
	
КонецПроцедуры

// Получает сообщение из очереди RabbitMQ.
// Параметры:
//  ПараметрыСоединения - Структура - Параметры соединения
//  Соединение - ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения
//  Сообщение - Структура - Структура для заполнения данными сообщения.
//  							Обязательна к заполнению.
//  							Эти данные будут сохранены для последующей обработки.
//   * ВидСообщения- Строка - представление вида сообщения в системе
//   * ТекстСообщения - Строка - входящее сообщение
//   * ИдентификаторСообщения - УИД сообщения
//   * ИдентификаторСобытия - УИД события
//  ОтветСервиса - Структура - Структура для заполнения результатом получения
//  							Обязательна к заполнению.
//  							Эти данные будут сохранены для последующей обработки.
//   					* ТекстОшибки- Строка - представление вида сообщения в системе
//   					* Успешно - Булево - признак факта получения сообщения
//   					* Ответ - УИД сообщения
//   					* ДополнительныеНаборы - Структура - коллекции для сохранения в логах (заголовки, параметрыURI и т.д.)
//   					* Статус - Строка - представление статуса SUCCES, FAILER и т.д.
//  ДополнительныеПараметры - Структура - см.ДинамическиеНастройкиИтеграцииОписание
// Возвращаемое значение:
//  Булево - Признак успешного получения сообщения
//
Функция ПолучитьСообщение(ПараметрыСоединения, Соединение, Сообщение, ОтветСервиса, ДополнительныеПараметры) Экспорт
	
	ДополнительныеНастройки = ПараметрыСоединения.ДополнительныеНастройки;
	Таймаут = ДополнительныеНастройки.ТаймаутПолучение;
	ОчередьОбмена = ДополнительныеНастройки.ОчередьОбмена;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		Потребитель = Соединение.НачатьЧтение(ОчередьОбмена, , Ложь);
		ДополнительныеПараметры.Вставить("Потребитель", Потребитель);
	КонецЕсли;
	
	Потребитель = ДополнительныеПараметры.Потребитель;
	
	Результат = Неопределено;
	ВыполнитьПодтверждение = Ложь;
	
	Получено = Соединение.ПолучитьСообщение(Результат, Таймаут, ВыполнитьПодтверждение);
	Если Результат.Успешно Тогда
		ДополнительныеПараметры.Вставить("ТегСообщения", Результат.ТегСообщения);
		Сообщение.ИдентификаторСобытия = Результат.СвойстваСообщения.AppId;
		Сообщение.ИдентификаторСообщения = Результат.СвойстваСообщения.MessageId;
		Сообщение.ВидСообщения = Результат.КлючМаршрутизации;
		Сообщение.ТекстСообщения = Результат.ТекстСообщения;
	КонецЕсли;
	
	Если Не Получено Тогда
		Соединение.ЗакончитьЧтение(Потребитель);
	КонецЕсли;
	
	ОтветСервиса = Новый Структура;
	ОтветСервиса.Вставить("ТекстОшибки", "");
	ОтветСервиса.Вставить("Успешно", Получено);
	ОтветСервиса.Вставить("Ответ", "");
	ОтветСервиса.Вставить("ДополнительныеНаборы", Неопределено);
	ОтветСервиса.Вставить("Статус", ?(ОтветСервиса.Успешно
									, "SUCCESS"
									, "FAILURE"));
	
	Возврат Получено;
	
КонецФункции

// Подтверждает получение сообщения в очереди RabbitMQ.
// Параметры:
//  Соединение - ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения
//  ПараметрыСоединения - Структура - Параметры соединения
//  Сообщение - Структура - Данные сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры, содержащие:
//   * ТегСообщения - Строка - Тег сообщения для подтверждения
// Возвращаемое значение:
//  Булево - Признак успешного подтверждения
//
Функция ПодтвердитьПолучениеСообщения(Соединение, ПараметрыСоединения, Сообщение, ДополнительныеПараметры) Экспорт
	
	Подтверждено = Соединение.ПодтвердитьСообщение(ДополнительныеПараметры.ТегСообщения, 1);
	Возврат Подтверждено;
	
КонецФункции

// Закрывает соединение с RabbitMQ сервером.
// Параметры:
//  Соединение - ОбработкаОбъект.рдв_КомпонентаRabbitMQ - Объект соединения для закрытия
// Возвращаемое значение:
//  Булево - Признак успешного закрытия соединения
//
Функция СоединениеЗакрыть(Соединение) Экспорт
	
	Если Соединение = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Соединение.ЗавершитьСоединение();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс



#КонецОбласти
