
#Область ПрограммныйИнтерфейс

// Модуль бизнес логики интеграции. На него будут перенаправлены все вызовы для бизнес логики решения.
// 
// Возвращаемое значение:
//  Неопределено, ОбщийМодуль, Произвольный - Модуль бизнес логики интеграции
Функция МодульПрикладнойЛогики() Экспорт
	
	Возврат рдв_ИнтеграцияПереопределяемый.МодульПрикладнойЛогикиФормированияХешей();
	
КонецФункции

#Область ОчередиОбработкиДанных

// Имя очереди для пересчета хеша объекта
// 
// Возвращаемое значение:
//  Строка - Имя очереди контроля
Функция ИмяОчередиФормированияХеша() Экспорт
	
	Возврат "СформироватьХешОбъектов";
	
КонецФункции

Процедура ЗаполнитьСписокОчередей(СписокОчередей) Экспорт
	
	СписокОчередей.Добавить(ИмяОчередиФормированияХеша(), 
		НСтр("ru = 'Сформировать хеш объектов'"));
		
КонецПроцедуры

Процедура ЗаполнитьТипОчередиПоУмолчанию(ИмяОчереди, ТипОчередиОбъект) Экспорт
	
	Если ИмяОчереди = ИмяОчередиФормированияХеша() Тогда
		
		ТипОчередиОбъект.ПорционнаяОбработка = Истина;
		ТипОчередиОбъект.МаксЗаписейВПорции = 4;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОчереди(ИмяОчереди, ИдентификаторыОчереди, РезультатОбработки) Экспорт
	
	Если ИмяОчереди = ИмяОчередиФормированияХеша() Тогда
		ОбработатьОчередь(ИмяОчереди, ИдентификаторыОчереди, РезультатОбработки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Справочники при записи. Регистрация изменений к отправке.
// 
// Параметры:
//  Источник - СправочникОбъект - 
//  Отказ - Булево - 
//
Процедура СправочникиПриЗаписи(Источник, Отказ) Экспорт
	
	Используется = ИсточникИспользуетсяВИнтеграции(Источник);
	Если Не Используется Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеИсключения = ЭтоСлужебныеДанныеИсключения(Источник);
	
	Если СлужебныеИсключения Тогда
		Возврат;
	КонецЕсли;
	
	рдв_РаботаСОчередями.ДобавитьВОчередь(ИмяОчередиФормированияХеша(), Источник.Ссылка);
	
КонецПроцедуры

// Документы при записи. Регистрация изменений к отправке.
// 
// Параметры:
//  Источник - ДокументОбъект
//  Отказ - Булево
//
Процедура ДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	Используется = ИсточникИспользуетсяВИнтеграции(Источник);
	Если Не Используется Тогда
		Возврат;
	КонецЕсли;
	
	рдв_РаботаСОчередями.ДобавитьВОчередь(ИмяОчередиФормированияХеша(), Источник.Ссылка);
	
КонецПроцедуры

// Наборы записей при записи. Регистрация изменений к отправке.
// 
// Параметры:
//  Источник - РегистрСведенийНаборЗаписей
//  Отказ - Булево
//  Замещение - Булево
//
Процедура НаборыЗаписейПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Хеш

// Инициализирует правила расчета хеша на основании правил конвертации
// 
// Возвращаемое значение:
//  ТаблицаЗначений -
//
Функция ИнициализироватьПравилаРасчетаХеша() Экспорт
	
	ПравилаКонвертации = рдв_МенеджерОбмена.ИнициализироватьПравилаКонвертации("Отправка");
	
	ПравилаРасчетаХеша = ПравилаКонвертации.СкопироватьКолонки("ИмяОбъекта,ИмяПКО,МетаданныеОбъекта");
	ПравилаРасчетаХеша.Колонки.Добавить("ВидХеша", Новый ОписаниеТипов("СправочникСсылка.рдв_ВидыХешей"));
	ПравилаРасчетаХеша.Колонки.Добавить("КонвертацияШапки");
	ПравилаРасчетаХеша.Колонки.Добавить("КонвертацияТабличныхЧастей");
	
	Для Каждого ПравилоКонвертации Из ПравилаКонвертации Цикл
		
		ДобавитьПравилоРасчетаХешаПоПравилуКонвертации(ПравилоКонвертации, ПравилаРасчетаХеша);
		
	КонецЦикла;
	
	ПравилаКонвертацииОтправка = рдв_МенеджерОбмена.ИнициализироватьПравилаКонвертации("Получение");
	Для Каждого ПравилоКонвертации Из ПравилаКонвертацииОтправка Цикл
		
		Существующая = ПравилаРасчетаХеша.Найти(ПравилоКонвертации.МетаданныеОбъекта, "МетаданныеОбъекта");
		Если Существующая = Неопределено Тогда
			ДобавитьПравилоРасчетаХешаПоПравилуКонвертации(ПравилоКонвертации, ПравилаРасчетаХеша);
		КонецЕсли;
		
	КонецЦикла;
	
	ПравилаРасчетаХеша.Колонки["ИмяПКО"].Имя = "ИмяПРХ";
	ПравилаРасчетаХеша.Колонки["ИмяПРХ"].Заголовок = "Имя ПРХ";
	
	рдв_ФомированиеХешейОбъектовПереопределяемый.ИнициализироватьПравилаРасчетаХеша(ПравилаРасчетаХеша);
	
	Возврат ПравилаРасчетаХеша;
	
КонецФункции

// Добавить правило расчета в таблицу расчета хеша.
// 
// Параметры:
//  ПравилаРасчетаХеша - ТаблицаЗначений - см.ИнициализироватьПравилаРасчетаХеша()
//  ОбъектМетаданных - ОбъектМетаданных -
//  ВидХеша - СправочникСсылка.рдв_ВидыХешей,Неопределено - Вид хеша
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений -
Функция ДобавитьПравилоРасчета(ПравилаРасчетаХеша, ОбъектМетаданных, ВидХеша=Неопределено) Экспорт
	
	Если ВидХеша = Неопределено Тогда
		ВидХеша = Справочники.рдв_ВидыХешей.Предопределенный("Актуальный");
	КонецЕсли;
	
	НовоеПравило = ПравилаРасчетаХеша.Добавить();
	НовоеПравило.ВидХеша = ВидХеша;
	НовоеПравило.МетаданныеОбъекта = ОбъектМетаданных;
	НовоеПравило.КонвертацияШапки = ТаблицаОписаниеПравила();
	НовоеПравило.КонвертацияТабличныхЧастей = ТаблицаОписаниеТабличнойЧасти();
	
	Возврат НовоеПравило;
	
КонецФункции

// Добавить правило расчета свойства в шапку или табличную часть.
// 
// Параметры:
//  Свойства - ТаблицаЗначений - 
//  ИмяРеквизита - Строка -
//  ИмяПРХ - Строка - Имя правила расчета хеша
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - 
Функция ДобавитьПравилоРасчетаСвойства(Свойства, ИмяРеквизита, ИмяПРХ = "") Экспорт
	
	НоваяСтрока = Свойства.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.ИмяПРХ = ИмяПРХ;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Найти правила расчета по объекту метаданных.
// 
// Параметры:
//  ПравилаРасчетаХеша - ТаблицаЗначений - см.ИнициализироватьПравилаРасчетаХеша()
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Массив из СтрокаТаблицыЗначений - строки найденных правил по объекту метаданных
//
Функция НайтиПравилаРасчета(ПравилаРасчетаХеша, ОбъектМетаданных) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("МетаданныеОбъекта", ОбъектМетаданных);
	
	Правила = ПравилаРасчетаХеша.НайтиСтроки(Отбор);
	
	Возврат Правила;
	
КонецФункции

// Найти правила расчета по имени правил расчета хеша
// 
// Параметры:
//  ПравилаРасчетаХеша - ТаблицаЗначений - см.ИнициализироватьПравилаРасчетаХеша()
//  ИмяПравил - Строка
// 
// Возвращаемое значение:
//  Массив из СтрокаТаблицыЗначений - строки найденных правил по объекту метаданных
//
Функция НайтиПравилоРасчетаПоИмени(ПравилаРасчетаХеша, ИмяПравил) Экспорт
	
	Возврат ПравилаРасчетаХеша.Найти(ИмяПравил, "ИмяПРХ");
	
КонецФункции

// Найти правила расчета свойства по имени свойства
// 
// Параметры:
//  Свойства - ТаблицаЗначений - см.ИнициализироватьПравилаРасчетаХеша()
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  Массив из СтрокаТаблицыЗначений - строки найденных правил по объекту метаданных
//
Функция НайтиПравилоРасчетаСвойства(Свойства, ИмяРеквизита) Экспорт
	
	Возврат Свойства.Найти(ИмяРеквизита, "ИмяРеквизита");
	
КонецФункции

#КонецОбласти

#Область РегистрацияИзменений

// Добавить ПКО формирования хешей объектов для служебных объектов.
// 
// Параметры:
//  СвойстваКонвертации - Структура - Структура, которая содержит настройки правил конвертации и таблицу ПКО
//  НаправлениеОбмена - Строка - "Отправка" или "Получение.
//
Процедура ДобавитьПКО_ФормированияХешейОбъектов(СвойстваКонвертации, НаправлениеОбмена) Экспорт
	
	ДобавитьПКО_РегистрСведений_рдв_ХешиСообщенийИнтеграции(СвойстваКонвертации);
	ДобавитьПКО_Справочник_рдв_ВидыХешей(СвойстваКонвертации);
	ДобавитьПКО_Справочник_рдв_ИнформационныеБазы(СвойстваКонвертации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИсточникИспользуетсяВИнтеграции(Источник)
	
	ПолноеИмяОбъектаМетаданных = Источник.Метаданные().ПолноеИмя();
	Возврат рдв_ФормированиеХешейОбъектовПовтИсп.ИсточникИспользуетсяВИнтеграции(ПолноеИмяОбъектаМетаданных);
	
КонецФункции

Процедура ОбработатьОчередь(ИмяОчереди, ИдентификаторыОчереди, РезультатОбработки)

	// Запрос данных очереди
	ДанныеОчереди = рдв_РаботаСОчередями.ПолучитьДанныеОчереди(ИмяОчереди,
		ИдентификаторыОчереди, "Объект, ХранилищеПараметров");
		
	Если Не ЗначениеЗаполнено(ДанныеОчереди) Тогда
		Возврат;	
	КонецЕсли;
	
	// могут записать несколько раз, хеш считаем единожды
	ОбработанныеОбъекты = Новый Соответствие();
	Для Каждого ОбъектОчереди Из ДанныеОчереди Цикл
		
		Если Не ОбработанныеОбъекты.Получить(ОбъектОчереди.Объект) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры = ОбъектОчереди.ХранилищеПараметров.Получить();
		РассчитатьХешВыгружаемогоОбъекта(ОбъектОчереди.Объект, Параметры);
		
		// регистрация пройдет через подписку у регистра рдв_ХешиСообщенийИнтеграции
		ОбработанныеОбъекты.Вставить(ОбъектОчереди.Объект, Истина);
		
	КонецЦикла;
	
	ОбъектыОчереди = ДанныеОчереди.ВыгрузитьКолонку("Объект"); 
	ПредставлениеОбъектов = СтрСоединить(ОбъектыОчереди, ", ");
	Комментрарий = НСтр("ru = 'Обработана очередь ""%1"" по объектам: [%2]'");
	Комментрарий = СтрШаблон(Комментрарий, ИмяОчереди, ПредставлениеОбъектов);
	 	
	ЗаписьЖурналаРегистрации("Обработана очередь контроля целостности данных интеграции.",
		УровеньЖурналаРегистрации.Информация,,
		ПредставлениеОбъектов,
		Комментрарий);
		
КонецПроцедуры

// Рассчитать хеш выгружаемого объекта.
// 
// Параметры:
//  ОбъектОчереди - ЛюбаяСсылка -
//  Параметры - Неопределено - Параметры
//
Процедура РассчитатьХешВыгружаемогоОбъекта(ОбъектОчереди, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектОчереди.Метаданные();
	
	ПравилаИзКонвертации = рдв_ФормированиеХешейОбъектовПовтИсп.ИнициализироватьПравилаРасчетаХеша();
	
	ПравилаДляРасчета = Новый Массив;
	рдв_ФомированиеХешейОбъектовПереопределяемый.ПравилаРасчетаХеша(ОбъектОчереди, ПравилаИзКонвертации, ПравилаДляРасчета);
																							
	Если ПравилаДляРасчета.Количество() =0 Тогда
		
		// если на объект метаданных несколько правил то задавать 
		// в рдв_ФомированиеХешейОбъектовПереопределяемый.ПравилаРасчетаХеша
		ПравилоДляРасчета = ПравилаИзКонвертации.Найти(ОбъектМетаданных, "МетаданныеОбъекта");
		ПравилаДляРасчета.Добавить(ПравилоДляРасчета);
		
	КонецЕсли;
	
	ТаблицаХешей = рдв_ХешиОбъектов.НоваяТаблицаХешей();
	рдв_ФомированиеХешейОбъектовПереопределяемый.ХешРассчитать(ОбъектОчереди, ПравилаДляРасчета, ТаблицаХешей);
	
	Если ТаблицаХешей.Количество() = 0 Тогда
	
		Для Каждого ПравилоРасчетаХеша Из ПравилаДляРасчета Цикл
			
			//@skip-check query-in-loop
			Хеш = ХешПоПравилам(ОбъектОчереди, ПравилаИзКонвертации, ПравилоРасчетаХеша);
			
			рдв_ХешиОбъектов.ХешВТаблицуХешей(ТаблицаХешей, ПравилоРасчетаХеша.ВидХеша, Хеш);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнформационнаяБаза = Справочники.рдв_ИнформационныеБазы.Текущая();
	ТаблицаХешей.ЗаполнитьЗначения(ИнформационнаяБаза, "ИнформационнаяБаза");
	
	ИдентификаторСобытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторСобытия"); 
	ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИдентификаторСообщения"); 
		
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИдентификаторСобытия"		, ИдентификаторСобытия);
	ДополнительныеСвойства.Вставить("ИдентификаторСообщения"	, ИдентификаторСообщения);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДополнительныеСвойства"	, ДополнительныеСвойства);

	рдв_ХешиОбъектов.ХешиЗаписать(ОбъектОчереди, ТаблицаХешей, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ХешПоПравилам(ОбъектОчереди, ПравилаДляРасчета, ПравилоРасчетаХеша)
	
	ЗаменятьСсылкиНаГУИДы = рдв_ИнтеграцияОбщегоНазначения.ЭтотОбъектИзВнешнегоИсточника(ОбъектОчереди);
	
	ДанныеДляРасчетаХеша = ДанныеДляРасчетаХешаИзВнешнегоИсточника(ОбъектОчереди, ПравилаДляРасчета
																		, ПравилоРасчетаХеша, ЗаменятьСсылкиНаГУИДы);
	Хеш = рдв_ХешиОбъектов.ХешСтандартныйКоллекции(ДанныеДляРасчетаХеша);
	
	Возврат Хеш;
	
КонецФункции

Функция ДанныеДляРасчетаХешаИзВнешнегоИсточника(ОбъектОчереди, ПравилаРасчетаХеша, ПравилоДляРасчета, ЗаменятьСсылкиНаГУИДы)

	Результат = ТекстЗапроса_ДанныеДляРасчетаХешаИзВнешнегоИсточника(ОбъектОчереди, ПравилаРасчетаХеша
																			, ПравилоДляРасчета, ЗаменятьСсылкиНаГУИДы);
	
	МассивОписанияЗапроса = Результат.МассивОписанияЗапроса;
	
	ДанныеДляРасчетаХеша = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = Результат.ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ОбъектОчереди);
	Пакет = Запрос.ВыполнитьПакет();
	Для а = 0 По МассивОписанияЗапроса.Количество()-1 Цикл
		
		ЗначениеПакета = Пакет[а].Выгрузить();
		ДанныеДляРасчетаХеша.Вставить(МассивОписанияЗапроса[а], ЗначениеПакета);
		
	КонецЦикла;
	
	Возврат ДанныеДляРасчетаХеша;
	
КонецФункции

Функция ТекстЗапроса_ДанныеДляРасчетаХешаИзВнешнегоИсточника(ОбъектОчереди, ПравилаРасчетаХеша
																			, ПравилоРасчетаХеша, ЗаменятьСсылкиНаГУИДы)
	
	МетаданныеОбъекта = ОбъектОчереди.Метаданные();
	
	МассивТекстаЗапроса = Новый Массив;
	МассивОписанияЗапроса = Новый Массив;
	
	// Реквизиты,измерения,ресурсы
	Текст = ТекстЗапроса_ТаблицыДанных(МетаданныеОбъекта, ПравилаРасчетаХеша, ПравилоРасчетаХеша.КонвертацияШапки, ЗаменятьСсылкиНаГУИДы);
	МассивТекстаЗапроса.Добавить(Текст);
	МассивОписанияЗапроса.Добавить("ОсновнойНабор");
	
	// ТЧ
	ТабличныеЧасти = ПравилоРасчетаХеша.КонвертацияТабличныхЧастей;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		МетаданныеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ТабличнаяЧасть.ИмяТабличнойЧасти];
		Текст = ТекстЗапроса_ТаблицыДанных(МетаданныеТЧ, ПравилаРасчетаХеша, ТабличнаяЧасть.КонвертацияСвойств, ЗаменятьСсылкиНаГУИДы);
		МассивТекстаЗапроса.Добавить(Текст);
		МассивОписанияЗапроса.Добавить(ТабличнаяЧасть.ИмяТабличнойЧасти);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(МассивТекстаЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗапроса", ТекстЗапроса);
	Результат.Вставить("МассивОписанияЗапроса", МассивОписанияЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапроса_ТаблицыДанных(ОбъектМетаданных, ПравилаРасчетаХеша, ПравилоРасчетаХеша, ЗаменятьСсылкиНаГУИДы)
	
	ИдентификаторДанных = СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".ТабличнаяЧасть", "");
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	ОператорВыбрать = ЗапросВыбора.Операторы[0];
	
	ОсновнаяТаблица = ОператорВыбрать.Источники.Добавить(ИдентификаторДанных, "ОсновнаяТаблица");
	
	Для Каждого ПКО Из ПравилоРасчетаХеша Цикл
	
		РеквизитВОбъектеМетаданных = РеквизитВОбъектеМетаданных(ОбъектМетаданных, ПКО.ИмяРеквизита);
		ВТипеНетСсылок = Не рдв_ОбщегоНазначения.ТипыЗначенийСодержатСсылочныйТип(РеквизитВОбъектеМетаданных.Тип.Типы());
		Если Не ПустаяСтрока(ПКО.ИмяПРХ) Тогда
			
			ПКС = НайтиПравилоРасчетаПоИмени(ПравилаРасчетаХеша, ПКО.ИмяПРХ);
			Для Каждого ПКС Из ПКС.КонвертацияШапки Цикл
				
				ПолеВыборки = СтрШаблон("%1.%2", ПКО.ИмяРеквизита, ПКС.ИмяРеквизита);
				ОператорВыбрать.ВыбираемыеПоля.Добавить(СтрШаблон("ОсновнаяТаблица.%1", ПолеВыборки));
				ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество()-1].Псевдоним = СтрЗаменить(ПолеВыборки, ".", "");
				
			КонецЦикла;

		ИначеЕсли Не ЗаменятьСсылкиНаГУИДы ИЛИ ВТипеНетСсылок Тогда
			
			ОператорВыбрать.ВыбираемыеПоля.Добавить(СтрШаблон("ОсновнаяТаблица.%1", ПКО.ИмяРеквизита));
			ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество()-1].Псевдоним = СтрЗаменить(ПКО.ИмяРеквизита, ".", "");

			Продолжить;
			
		Иначе
			
			ИдентификаторыИсточника = ОператорВыбрать.Источники.Добавить("РегистрСведений.рдв_ИдентификаторыОбъектовИсточника"
																		, СтрШаблон("Ид_%1", ПКО.ИмяРеквизита));
			ИдентификаторыИсточника.Соединения.Очистить();
			УсловиеСоединения = СтрШаблон("Ид_%1.Объект = ОсновнаяТаблица.%1", ПКО.ИмяРеквизита);
			ОсновнаяТаблица.Соединения.Добавить(ИдентификаторыИсточника.Источник.Псевдоним, УсловиеСоединения);
			
			ПолеВыборки = СтрШаблон("ЕСТЬNULL(Ид_%1.Идентификатор, ОсновнаяТаблица.%1)", ПКО.ИмяРеквизита);
			ОператорВыбрать.ВыбираемыеПоля.Добавить(ПолеВыборки);
			ЗапросВыбора.Колонки[ЗапросВыбора.Колонки.Количество()-1].Псевдоним = ПКО.ИмяРеквизита;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОператорВыбрать.Отбор.Добавить("ОсновнаяТаблица.Ссылка = &Ссылка");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СвоиКлючиРеквизита(Ключ, Правило)
	
	СвоиКлючиРеквизита = Не Ключ = Правило;
	
	Возврат СвоиКлючиРеквизита; 
	
КонецФункции

Функция РеквизитВОбъектеМетаданных(ОбъектМетаданных, РеквизитШапки)
	
	СтдРеквизит = РеквизитКоллекцииМетаданных(ОбъектМетаданных, ОбъектМетаданных.СтандартныеРеквизиты, РеквизитШапки);
	Если Не СтдРеквизит = Неопределено Тогда
		Возврат СтдРеквизит;
	КонецЕсли;
	
	Реквизиты = РеквизитКоллекцииМетаданных(ОбъектМетаданных, ОбъектМетаданных.Реквизиты, РеквизитШапки);
	Если Не Реквизиты = Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Измерения = РеквизитКоллекцииМетаданных(ОбъектМетаданных, ОбъектМетаданных.Измерения, РеквизитШапки);
	Если Не Измерения = Неопределено Тогда
		Возврат Измерения;
	КонецЕсли;
	
	Ресурсы = РеквизитКоллекцииМетаданных(ОбъектМетаданных, ОбъектМетаданных.Ресурсы, РеквизитШапки);
	Если Не Ресурсы = Неопределено Тогда
		Возврат Ресурсы;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РеквизитКоллекцииМетаданных(ОбъектМетаданных, Коллекция, РеквизитИмя)
	
	Для Каждого Стр Из Коллекция Цикл
		
		Если СтрСравнить(Стр.Имя, РеквизитИмя) = 0 Тогда
			Возврат Стр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ЭтоСлужебныеДанныеИсключения(Источник)
	
	Тип = ТипЗнч(Источник);
	
	Если Тип = Тип("СправочникОбъект.рдв_ИнформационныеБазы") Тогда
		Возврат Истина;
	ИначеЕсли Тип = Тип("СправочникОбъект.рдв_ВидыХешей") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТаблицаОписаниеПравила()

	ТаблицаШапка = Новый ТаблицаЗначений();
	ТаблицаШапка.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ТаблицаШапка.Колонки.Добавить("ИмяПРХ"		, ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	Возврат ТаблицаШапка;

КонецФункции

Функция ТаблицаОписаниеТабличнойЧасти()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ИмяТабличнойЧасти", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	Таблица.Колонки.Добавить("КонвертацияСвойств" );
	
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьПравилоРасчетаХешаПоПравилуКонвертации(ПравилоКонвертации, ПравилаРасчетаХеша)
	
	ВидХешаАктуальный = Справочники.рдв_ВидыХешей.Предопределенный("Актуальный");
	
	НоваяСтрокаХеша = ПравилаРасчетаХеша.Добавить();
	НоваяСтрокаХеша.ВидХеша = ВидХешаАктуальный;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаХеша, ПравилоКонвертации);
	
	НоваяСтрокаХеша.КонвертацияШапки = ТаблицаОписаниеПравила();
	Для Каждого ПравилоШапки Из ПравилоКонвертации.КонвертацияШапки Цикл
		
		НоваяСтрокаХешаШапки = НоваяСтрокаХеша.КонвертацияШапки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаХешаШапки, ПравилоШапки);
		НоваяСтрокаХешаШапки.ИмяПРХ = ПравилоШапки.ИмяПКО;
		
	КонецЦикла;
	
	НоваяСтрокаХеша.КонвертацияТабличныхЧастей = ТаблицаОписаниеТабличнойЧасти();
	Для Каждого ПравилоТЧ Из ПравилоКонвертации.КонвертацияТабличныхЧастей Цикл
		
		НоваяСтрокаХешаТЧ = НоваяСтрокаХеша.КонвертацияТабличныхЧастей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаХешаТЧ, ПравилоТЧ);
		
		НоваяСтрокаХешаТЧ.КонвертацияСвойств = ТаблицаОписаниеПравила();
		Для Каждого СвойствоТЧ Из ПравилоТЧ.КонвертацияСвойств Цикл
			
			НоваяСтрокаСвойства = НоваяСтрокаХешаТЧ.КонвертацияСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСвойства, СвойствоТЧ);
			НоваяСтрокаСвойства.ИмяПРХ = ПравилоШапки.ИмяПКО;
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

#Область РегистрацияИзменений

Процедура ДобавитьПКО_РегистрСведений_рдв_ХешиСообщенийИнтеграции(СвойстваКонвертации)

	ПКО = ДобавитьПКО(СвойстваКонвертации, Метаданные.РегистрыСведений.рдв_ХешиСообщенийИнтеграции);
	ПКО.ИмяОбъекта = "РегистрСведений.рдв_ХешиСообщенийИнтеграции";
	ПКО.ИмяПКО = "РегистрСведений_рдв_ХешиСообщенийИнтеграции";
	КонвертацияШапки = ПКО.КонвертацияШапки;
	ДобавитьПКС(КонвертацияШапки, "Объект", "Объект", Истина);
	ДобавитьПКС(КонвертацияШапки, "ВидХеша", "ВидХеша", Истина, "Справочник_рдв_ВидыХешей");
	ДобавитьПКС(КонвертацияШапки, "ИнформационнаяБаза", "ИнформационнаяБаза", Истина, "Справочник_рдв_ИнформационныеБазы");
	ДобавитьПКС(КонвертацияШапки, "Хеш", "Хеш", Истина);
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_рдв_ВидыХешей(СвойстваКонвертации)

	ПКО = ДобавитьПКО(СвойстваКонвертации, Метаданные.Справочники.рдв_ВидыХешей);
	ПКО.ИмяОбъекта = "Справочник.рдв_ВидыХешей";
	ПКО.ИмяПКО = "Справочник_рдв_ВидыХешей";
	КонвертацияШапки = ПКО.КонвертацияШапки;
	ДобавитьПКС(КонвертацияШапки, "рдв_Идентификатор", "рдв_Идентификатор", Истина);
	ДобавитьПКС(КонвертацияШапки, "Наименование", "Наименование", Истина);
	
	ПоляПоиска = ПКО.ПоляПоиска;
	ДобавитьПоляПоиска(ПоляПоиска, "рдв_Идентификатор");
	
КонецПроцедуры

Процедура ДобавитьПКО_Справочник_рдв_ИнформационныеБазы(СвойстваКонвертации)
	
	ПКО = ДобавитьПКО(СвойстваКонвертации, Метаданные.Справочники.рдв_ИнформационныеБазы);
	ПКО.ИмяОбъекта = "Справочник.рдв_ИнформационныеБазы";
	ПКО.ИмяПКО = "Справочник_рдв_ИнформационныеБазы";
	КонвертацияШапки = ПКО.КонвертацияШапки;
	ДобавитьПКС(КонвертацияШапки, "рдв_Идентификатор", "рдв_Идентификатор", Истина);
	ДобавитьПКС(КонвертацияШапки, "Наименование", "Наименование", Истина);
	
	ПоляПоиска = ПКО.ПоляПоиска;
	ДобавитьПоляПоиска(ПоляПоиска, "рдв_Идентификатор");
	
КонецПроцедуры

Функция ДобавитьПКО(СвойстваКонвертации, МетаданныеОбъекта) 
	
	Возврат рдв_МенеджерОбмена.ДобавитьПКО(СвойстваКонвертации, МетаданныеОбъекта);
	
КонецФункции

//см. рдв_МенеджерОбмена.ДобавитьПКС
Функция ДобавитьПКС(Свойства, ИмяРеквизита, ИмяКлючаФормата = "", Обязательный = Ложь, ИмяПРХ = "")
	
	Возврат рдв_МенеджерОбмена.ДобавитьПКС(Свойства, ИмяРеквизита, ИмяКлючаФормата, Обязательный, ИмяПРХ);
	
КонецФункции

//см. рдв_МенеджерОбмена.ДобавитьПоляПоиска
Процедура ДобавитьПоляПоиска(ПоляПоиска, СписокПолейПоиска)
	
	рдв_МенеджерОбмена.ДобавитьПоляПоиска(ПоляПоиска, СписокПолейПоиска);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
