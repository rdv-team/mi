///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Параметры:
//   Настройки - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.Настройки.
//   НастройкиОтчета - см. ВариантыОтчетов.ОписаниеОтчета.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;

	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Ложь);
	
	НастройкиВарианта = МодульВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Сверка полноты и точности данных.'");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗагрузитьНастройкиПриИзмененииПараметров() Экспорт 
	Параметры = Новый Массив;
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ТипОбъектаМетаданных"));
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИмяОбъектаМетаданных"));
	Параметры.Добавить(Новый ПараметрКомпоновкиДанных("ИмяТаблицы"));
	
	Возврат Параметры;
КонецФункции

// Возвращает значения специализированных параметров.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//  ДоступныеЗначения - Структура
//  Контекст - Произвольный
//
// Возвращаемое значение:
//  Структура:
//    * Период - СтандартныйПериод
//    * ТипОбъектаМетаданных - Строка
//    * ИмяОбъектаМетаданных - Строка
//    * ИмяТаблицы - Строка
//    * ИсточникДанных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
Функция ФиксированныеПараметры(Настройки, ПользовательскиеНастройки, ДоступныеЗначения, Контекст) Экспорт
	
	ФиксированныеПараметры = Новый Структура("Период, ИсточникДанных, ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы, 
		| ИмяТипаОбъектаМетаданных, ИмяТаблицыОбъектаМетаданных");
	ДоступныеЗначения = Новый Структура("ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы");
	
	УстановитьФиксированныйПараметр("Период", ФиксированныеПараметры, Настройки, ПользовательскиеНастройки);
	УстановитьФиксированныйПараметр("ИсточникДанных", ФиксированныеПараметры, Настройки, ПользовательскиеНастройки);
	
	ДоступныеЗначения.ТипОбъектаМетаданных = ДоступныеТипыОбъектовМетаданных();
	УстановитьФиксированныйПараметр(
		"ТипОбъектаМетаданных",
		ФиксированныеПараметры,
		Настройки, ПользовательскиеНастройки,
		ДоступныеЗначения.ТипОбъектаМетаданных, Контекст);
		
	ФиксированныеПараметры.ИмяТипаОбъектаМетаданных = ФиксированныеПараметры.ТипОбъектаМетаданных;
	
	ДоступныеЗначения.ИмяОбъектаМетаданных = ДоступныеОбъектыМетаданных(
		ФиксированныеПараметры.ТипОбъектаМетаданных);
	УстановитьФиксированныйПараметр(
		"ИмяОбъектаМетаданных",
		ФиксированныеПараметры,
		Настройки,
		ПользовательскиеНастройки,
		ДоступныеЗначения.ИмяОбъектаМетаданных);
	
	ДоступныеЗначения.ИмяТаблицы = ДоступныеТаблицы(
		ФиксированныеПараметры.ТипОбъектаМетаданных, ФиксированныеПараметры.ИмяОбъектаМетаданных);
	УстановитьФиксированныйПараметр(
		"ИмяТаблицы", ФиксированныеПараметры, Настройки, ПользовательскиеНастройки, ДоступныеЗначения.ИмяТаблицы);
	
	ФиксированныеПараметры.ИмяТаблицыОбъектаМетаданных = ФиксированныеПараметры.ИмяТаблицы;
	
	ФиксированныеПараметры.ИсточникДанных = ИсточникДанных(
		ФиксированныеПараметры.ТипОбъектаМетаданных, ФиксированныеПараметры.ИмяОбъектаМетаданных);
	
	Идентификаторы = СтрРазделить("ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы, ИмяТипаОбъектаМетаданных, ИмяТаблицыОбъектаМетаданных", ", ", Ложь);
	ПараметрыДанных = Настройки.ПараметрыДанных.Элементы;
	Для Каждого Идентификатор Из Идентификаторы Цикл 
		ЭлементНастройки = ПараметрыДанных.Найти(Идентификатор);
		Если ЭлементНастройки = Неопределено
			Или ЭлементНастройки.Значение = ФиксированныеПараметры[Идентификатор] Тогда 
			Продолжить;
		КонецЕсли;
		
		Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		Прервать;
	КонецЦикла;
	
	Возврат ФиксированныеПараметры;
	
КонецФункции

Процедура УстановитьФиксированныйПараметр(Идентификатор, Параметры, Настройки, ПользовательскиеНастройки, ДоступныеЗначения = Неопределено, Контекст = Неопределено)
	
	ФиксированныйПараметр = Параметры[Идентификатор];
	
	Если ДоступныеЗначения = Неопределено Тогда 
		ДоступныеЗначения = Новый СписокЗначений;
	КонецЕсли;
	
	ЭлементНастройки = Настройки.ПараметрыДанных.Элементы.Найти(Идентификатор);
	Если ЭлементНастройки = Неопределено Тогда 
		Если ДоступныеЗначения.Количество() > 0 Тогда 
			Параметры[Идентификатор] = ДоступныеЗначения[0].Значение;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементПользовательскойНастройки = Неопределено;   
			
	Если ТипЗнч(ПользовательскиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И (Настройки.ДополнительныеСвойства.Свойство("ОтчетИнициализирован")
		Или ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОтчетИнициализирован")) Тогда 
		
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(
		ЭлементНастройки.ИдентификаторПользовательскойНастройки);
	КонецЕсли;     
	
	Если ЭлементПользовательскойНастройки <> Неопределено
		И ДоступныеЗначения.НайтиПоЗначению(ЭлементПользовательскойНастройки.Значение) <> Неопределено Тогда 
		ФиксированныйПараметр = ЭлементПользовательскойНастройки.Значение;
	ИначеЕсли ДоступныеЗначения.НайтиПоЗначению(ЭлементНастройки.Значение) <> Неопределено Тогда 
		ФиксированныйПараметр = ЭлементНастройки.Значение;
	ИначеЕсли Идентификатор = "ИмяОбъектаМетаданных"
		И ЗначениеЗаполнено(Параметры.ИсточникДанных) Тогда 
		ФиксированныйПараметр = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Параметры.ИсточникДанных).Имя;
	ИначеЕсли ДоступныеЗначения.Количество() > 0 Тогда 
		ФиксированныйПараметр = ДоступныеЗначения[0].Значение;
	ИначеЕсли ЭлементПользовательскойНастройки <> Неопределено
		И ЗначениеЗаполнено(ЭлементПользовательскойНастройки.Значение) Тогда 
		ФиксированныйПараметр = ЭлементПользовательскойНастройки.Значение;
	ИначеЕсли ЗначениеЗаполнено(ЭлементНастройки.Значение) Тогда 
		ФиксированныйПараметр = ЭлементНастройки.Значение;
	КонецЕсли;
	
	Если Идентификатор = "ТипОбъектаМетаданных"
		И ЗначениеЗаполнено(Параметры.ИсточникДанных)
		И Параметры.ИсточникДанных.ПолучитьОбъект() <> Неопределено Тогда 
		
		ОбъектМетаданных = МетаданныеИсточникаДанных(Параметры.ИсточникДанных, Контекст);
		Если ОбъектМетаданных <> Неопределено Тогда
			ТипОбъектаМетаданных = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			Если ТипОбъектаМетаданных <> ФиксированныйПараметр Тогда 
				Параметры.ИсточникДанных = Неопределено;
			КонецЕсли;
		Иначе
			Параметры.ИсточникДанных = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Параметры[Идентификатор] = ФиксированныйПараметр;
	
КонецПроцедуры

// Устанавливает значения специализированных параметров.
//
// Параметры:
//  Отчет
//  ФиксированныеПараметры - см. ФиксированныеПараметры
//  Настройки - НастройкиКомпоновкиДанных
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//
Процедура УстановитьФиксированныеПараметры(Отчет, ФиксированныеПараметры, Настройки, ПользовательскиеНастройки) Экспорт 
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	ДоступныеПараметры = ПараметрыДанных.ДоступныеПараметры;
	Если ДоступныеПараметры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ФиксированныеПараметры Цикл 
		Если ДоступныеПараметры.Элементы.Найти(Параметр.Ключ) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементНастройки = ПараметрыДанных.Элементы.Найти(Параметр.Ключ);
		Если ЭлементНастройки = Неопределено Тогда 
			ЭлементНастройки = ПараметрыДанных.Элементы.Добавить();
			ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
			ЭлементНастройки.Значение = Параметр.Значение;
			ЭлементНастройки.Использование = Истина;
		Иначе
			ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
		
		ЭлементПользовательскойНастройки = Неопределено;
		Если ПользовательскиеНастройки <> Неопределено Тогда 
			ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(
				ЭлементНастройки.ИдентификаторПользовательскойНастройки);
		КонецЕсли;
		
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(ЭлементПользовательскойНастройки, ЭлементНастройки, "Использование, Значение");
		КонецЕсли;
	КонецЦикла;
	
	Если ПользовательскиеНастройки <> Неопределено Тогда 
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Истина);
	КонецЕсли;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("ВидыХеша", ВидыХеша());
	ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяИБ", Справочники.рдв_ИнформационныеБазы.Текущая());
	ТипВыгружаемогоОбъекта = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей;
	Если ФиксированныеПараметры.ИмяТипаОбъектаМетаданных = "Справочники"
		ИЛИ ФиксированныеПараметры.ИмяТипаОбъектаМетаданных = "Документы" Тогда
		ТипВыгружаемогоОбъекта = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка;
	КонецЕсли;
	ПараметрыДанных.УстановитьЗначениеПараметра("ТипВыгружаемогоОбъекта", ТипВыгружаемогоОбъекта);
	ИдентификаторДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФиксированныеПараметры.ИсточникДанных, "ПолноеИмя"); 
	ПараметрыДанных.УстановитьЗначениеПараметра("ИдентификаторДанных", ИдентификаторДанных);
	
КонецПроцедуры

Функция ТекстЗапросаПоМетаданным(ПараметрыОтчета)
	
	МетаданныеИсточника = Метаданные[ПараметрыОтчета.ТипОбъектаМетаданных][ПараметрыОтчета.ИмяОбъектаМетаданных];
	
	ИмяИсточника = МетаданныеИсточника.ПолноеИмя();
	Если ЗначениеЗаполнено(ПараметрыОтчета.ИмяТаблицы) Тогда 
		ИмяИсточника = ИмяИсточника + "." + ПараметрыОтчета.ИмяТаблицы;
	КонецЕсли;
	
	ПоляВыборки = Новый Массив;
	ОтборИсточника = Новый Массив;
	
	Если ПараметрыОтчета.ТипОбъектаМетаданных = "Справочники"
		ИЛИ ПараметрыОтчета.ТипОбъектаМетаданных = "Документы" Тогда
		ПоляВыборки.Добавить("Ссылка");
		Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.ИсточникДанных, "ПолноеИмя");
		Представление = СтрЗаменить(Представление, ".", "");
		ОтборИсточника.Добавить(СтрШаблон("(Ссылка.*) КАК %1", Представление));
	ИначеЕсли ПараметрыОтчета.ТипОбъектаМетаданных = "РегистрыСведений" Тогда
		
		Для Каждого Измерение Из МетаданныеИсточника.Измерения Цикл
			ПоляВыборки.Добавить(Измерение.Имя);
		КонецЦикла;
		
		Если МетаданныеИсточника.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ОтборИсточника.Добавить("(Период МЕЖДУ &НачалоПериода И &КонецПериода)");
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ПоляВыборки
	|ПОМЕСТИТЬ втВыгружаемыеОбъекты
	|ИЗ
	|	&ИмяИсточника КАК Таблица";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК Таблица", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяИсточника", ИмяИсточника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки, ","));
	
	Если ЗначениеЗаполнено(ОтборИсточника) Тогда
		Текст = СтрСоединить(ОтборИсточника, ","); 
		ТекстЗапроса = ТекстЗапроса + "{ГДЕ " + Текст + "}";
	КонецЕсли;
	Результат.Добавить(ТекстЗапроса);
	
	ТекстЗапросаХеши = "ВЫБРАТЬ
	|	ХешиСообщенийИнтеграции.Объект КАК Объект,
	|	ХешиСообщенийИнтеграции.ВидХеша КАК ВидХеша,
	|	ХешиСообщенийИнтеграции.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	ХешиСообщенийИнтеграции.Хеш КАК Хеш
	|ПОМЕСТИТЬ втДанныеЭтогоУзла
	|ИЗ
	|	РегистрСведений.рдв_ХешиСообщенийИнтеграции КАК ХешиСообщенийИнтеграции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВыгружаемыеОбъекты КАК Выгружаемые
	|		ПО ХешиСообщенийИнтеграции.Объект = Выгружаемые.Ссылка
	|ГДЕ
	|	ХешиСообщенийИнтеграции.ВидХеша В (&ВидыХеша)
	|	И ХешиСообщенийИнтеграции.ИнформационнаяБаза = &ТекущаяИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеЭтогоУзла.Объект КАК Объект,
	|	втДанныеЭтогоУзла.ВидХеша КАК ВидХеша,
	|	втДанныеЭтогоУзла.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	втДанныеЭтогоУзла.Хеш КАК Хеш,
	|	ХешиСообщенийИнтеграции.ИнформационнаяБаза КАК ИнформационнаяБазаПриемник,
	|	ХешиСообщенийИнтеграции.Хеш КАК ХешПриемник,
	|	втДанныеЭтогоУзла.Хеш = ЕстьNULL(ХешиСообщенийИнтеграции.Хеш, 0) КАК ХешиРавны
	|ИЗ
	|	втДанныеЭтогоУзла КАК втДанныеЭтогоУзла
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рдв_ХешиСообщенийИнтеграции КАК ХешиСообщенийИнтеграции
	|		ПО ХешиСообщенийИнтеграции.Объект = втДанныеЭтогоУзла.Объект
	|		И ХешиСообщенийИнтеграции.ВидХеша = втДанныеЭтогоУзла.ВидХеша
	|		И ХешиСообщенийИнтеграции.ИнформационнаяБаза <> втДанныеЭтогоУзла.ИнформационнаяБаза
	|		И НЕ ХешиСообщенийИнтеграции.ИнформационнаяБаза = &ТекущаяИБ
	|{ГДЕ
	|	ХешиСообщенийИнтеграции.ДатаАктуальности}";
	Результат.Добавить(ТекстЗапросаХеши);
	
	Возврат СтрСоединить(Результат, ОбщегоНазначения.РазделительПакетаЗапросов());
КонецФункции

Функция ДоступныеТипыОбъектовМетаданных()
	ДоступныеЗначения = Новый СписокЗначений;
	
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Справочники) Тогда
		ДоступныеЗначения.Добавить("Справочники", НСтр("ru = 'Справочник'"), , БиблиотекаКартинок.Справочник);
	КонецЕсли;
	
	Если ЕстьОбъектыТипаМетаданных(Метаданные.Документы) Тогда
		ДоступныеЗначения.Добавить("Документы", НСтр("ru = 'Документ'"), , БиблиотекаКартинок.Документ);
	КонецЕсли;
	
//	Если ЕстьОбъектыТипаМетаданных(Метаданные.РегистрыСведений) Тогда
//		ДоступныеЗначения.Добавить("РегистрыСведений", НСтр("ru = 'Регистр сведений'"), , БиблиотекаКартинок.РегистрСведений);
//	КонецЕсли;
	
	Возврат ДоступныеЗначения;
КонецФункции

Функция ДоступныеОбъектыМетаданных(ТипОбъектаМетаданных)
	ДоступныеЗначения = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ТипОбъектаМетаданных) Тогда
		Возврат ДоступныеЗначения;
	КонецЕсли;

	Для Каждого Объект Из Метаданные[ТипОбъектаМетаданных] Цикл
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
			Или Не ПравоДоступа("Чтение", Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		Используется = ИсточникИспользуетсяВИнтеграции(Объект);
		
		Если Используется Тогда
			ДоступныеЗначения.Добавить(Объект.Имя, Объект.Синоним);
		КонецЕсли;
	КонецЦикла;
	ДоступныеЗначения.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат ДоступныеЗначения;
КонецФункции

Функция ДоступныеТаблицы(ТипОбъектаМетаданных, ИмяОбъектаМетаданных)
	ДоступныеЗначения = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(ТипОбъектаМетаданных)
		Или Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда 
		Возврат ДоступныеЗначения;
	КонецЕсли;
	
	ДоступныеЗначения.Добавить("", ПредставлениеИмениТаблицыОсновныеДанные());
	
	Возврат ДоступныеЗначения;
КонецФункции

Функция ЕстьОбъектыТипаМетаданных(ТипМетаданных)
	
	Для каждого Объект Из ТипМетаданных Цикл
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Объект)
			И ПравоДоступа("Чтение", Объект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с типовой схемой, настраиваемой в пользовательских настройках.

Функция СхемаКомпоновкиДанных(ФиксированныеПараметры) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	НаборДанных.Запрос = ТекстЗапросаПоМетаданным(ФиксированныеПараметры);
	
	СхемаКомпоновкиДанных.Параметры.Период.ОграничениеИспользования = Истина;
	СхемаКомпоновкиДанных.Параметры.ИмяТаблицы.ОграничениеИспользования = Истина;
	ОписаниеТипаИдентификаторы = Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	СхемаКомпоновкиДанных.Параметры.ИсточникДанных.ТипЗначения = ОписаниеТипаИдентификаторы;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

// Устанавливает настройки по умолчанию.
//
// Параметры:
//  Отчет - ОтчетОбъект
//  ФиксированныеПараметры - см. ФиксированныеПараметры
//  Настройки - НастройкиКомпоновкиДанных
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных
//
Процедура УстановитьСтандартныеНастройки(Отчет, ФиксированныеПараметры, Настройки, ПользовательскиеНастройки) Экспорт 
	ОтчетИнициализирован = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Настройки.ДополнительныеСвойства, "ОтчетИнициализирован", Ложь);    
		
	Если ОтчетИнициализирован Тогда 
		Возврат;
	КонецЕсли;
	
	РежимыОтображенияФиксированныхПараметров = РежимыОтображенияФиксированныхПараметров(Настройки);
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	
	УстановитьРежимыОтображенияФиксированныхПараметров(Настройки, РежимыОтображенияФиксированныхПараметров);
	
	УстановитьФиксированныеПараметры(Отчет, ФиксированныеПараметры, Настройки, ПользовательскиеНастройки);
	
	Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с произвольной схемой из файла.

// Возвращает загружаемую схему компоновки данных.
//
// Параметры:
//  ЗагруженнаяСхема - ДвоичныеДанные
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
//
Функция ИзвлечьСхемуИзДвоичныхДанных(ЗагруженнаяСхема) Экспорт
	
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла();
	ЗагруженнаяСхема.Записать(ПолноеИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
	
	СхемаКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	
	ЧтениеXML.Закрыть();
	ЧтениеXML = Неопределено;
	
	УдалитьФайлы(ПолноеИмяФайла);
	
	Если СхемаКД.НастройкиПоУмолчанию.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		СхемаКД.НастройкиПоУмолчанию.ДополнительныеСвойства.СхемаКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Возврат СхемаКД;
	
КонецФункции

Процедура УстановитьСтандартныеНастройкиЗагруженнойСхемы(Отчет, ДвоичныеДанныеСхемы, Настройки, ПользовательскиеНастройки) Экспорт 
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "ОтчетИнициализирован", Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	Настройки = Отчет.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанныеСхемы);
	Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован",  Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с источником данных варианта отчета.

// Возвращает настройки варианта отчета с установленным параметром ИсточникДанных.
//
// Параметры:
//  Вариант - СправочникОбъект.ВариантыОтчетов - хранилище настроек варианта отчета.
//
// Возвращаемое значение:
//   НастройкиКомпоновкиДанных, Неопределено - обновленные настройки или Неопределено,
//                                            если обновить не удалось.
//
Функция НастройкиВарианта(Вариант) Экспорт
	Попытка
		НастройкиВарианта = Вариант.Настройки.Получить(); // НастройкиКомпоновкиДанных
	Исключение
		// Не удалось десериализовать хранилище значения:
		//  возможно обнаружена ссылка на несуществующий тип.
		Возврат Неопределено;
	КонецПопытки;
	
	Если НастройкиВарианта = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДанных = НастройкиВарианта.ПараметрыДанных.Элементы;
	
	ПараметрыИскомые = Новый Структура(
		"ТипОбъектаМетаданных, ПолноеИмяОбъектаМетаданных, ИмяОбъектаМетаданных, ИсточникДанных");
	Для Каждого Параметр Из ПараметрыИскомые Цикл 
		НайденныйПараметр = ПараметрыДанных.Найти(Параметр.Ключ);
		Если НайденныйПараметр <> Неопределено Тогда 
			ПараметрыИскомые[Параметр.Ключ] = НайденныйПараметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Если в настройках варианта хранится параметр с неактуальным именем - выполнится его актуализация.
	Если ЗначениеЗаполнено(ПараметрыИскомые.ПолноеИмяОбъектаМетаданных) Тогда 
		ПараметрыИскомые.ИмяОбъектаМетаданных = ПараметрыИскомые.ПолноеИмяОбъектаМетаданных;
	КонецЕсли;
	ПараметрыИскомые.Удалить("ПолноеИмяОбъектаМетаданных");
	
	Если Не ЗначениеЗаполнено(ПараметрыИскомые.ИсточникДанных) Тогда 
		ПараметрыИскомые.ИсточникДанных = ИсточникДанных(
			ПараметрыИскомые.ТипОбъектаМетаданных, ПараметрыИскомые.ИмяОбъектаМетаданных);
		Если ПараметрыИскомые.ИсточникДанных = Неопределено Тогда 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУстанавливаемые = Новый Структура("ИсточникДанных, ИмяОбъектаМетаданных");
	ЗаполнитьЗначенияСвойств(ПараметрыУстанавливаемые, ПараметрыИскомые);
	
	ИмяОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыИскомые.ИсточникДанных, "Имя");
	Если ИмяОбъекта <> ПараметрыУстанавливаемые.ИмяОбъектаМетаданных Тогда 
		ПараметрыУстанавливаемые.ИмяОбъектаМетаданных = ИмяОбъекта;
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыУстанавливаемые Цикл 
		НайденныйПараметр = ПараметрыДанных.Найти(Параметр.Ключ);
		Если НайденныйПараметр = Неопределено Тогда 
			ПараметрДанных = ПараметрыДанных.Добавить();
			ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
			ПараметрДанных.Значение = Параметр.Значение;
			ПараметрДанных.Использование = Истина;
		Иначе
			НастройкиВарианта.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиВарианта;
КонецФункции

// Возвращает источник данных отчета
//
// Параметры:
//  ТипМенеджера - Строка - представление менеджера объекта метаданных,
//                 например, "Справочники" или "РегистрыСведений" и т.д.
//  ИмяОбъекта  - Строка - краткое имя объекта метаданных,
//                например, "Валюты" или "КурсыВалют" и т.д.
//
// Возвращаемое значение:
//   - СправочникСсылка.ИдентификаторыОбъектовМетаданных - ссылка на найденный элемент справочника
//   - Неопределено
//
Функция ИсточникДанных(ТипМенеджера, ИмяОбъекта)
	ТипОбъекта = ТипОбъектаПоТипуМенеджера(ТипМенеджера);
	ПолноеИмяОбъекта = ТипОбъекта + "." + ИмяОбъекта;
	Если ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ПолноеИмяОбъекта) = Неопределено Тогда 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Варианты отчетов.Установка источника данных отчета'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ВариантыОтчетов,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Источник данных %1 отсутствует'"), 
				ПолноеИмяОбъекта));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта);
КонецФункции

Функция МетаданныеИсточникаДанных(ИсточникДанных, Контекст)
	
	Попытка
		ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИсточникДанных);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчет не может быть сформирован по причине: %1 %2'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			НСтр("ru = 'Выберите другой справочник или документ.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование варианта отчета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, Метаданные.Отчеты.рдв_СверкаПолнотыТочностиДанных,, ТекстСообщения);
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			ТекстРекомендации = НСтр("ru = 'Отчет не может быть сформирован. Выберите другой справочник или документ.'");
			ОтчетыКлиентСервер.ОтобразитьСостояниеОтчета(
				Контекст, ТекстРекомендации);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

// Возвращает тип объекта метаданных по соответствующему типу менеджера
//
// Параметры:
//  ТипМенеджера - Строка - представление менеджера объекта метаданных,
//                 например, "Справочники" или "РегистрыСведений" и т.д.
//
// Возвращаемое значение:
//   Строка - тип объекта метаданных, например, "Справочник" или "РегистрСведений" и т.д.
//
Функция ТипОбъектаПоТипуМенеджера(ТипМенеджера)
	Типы = Новый Соответствие;
	Типы.Вставить("Справочники", "Справочник");
	Типы.Вставить("Документы", "Документ");
	Типы.Вставить("Обработки", "Обработка");
	Типы.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	Типы.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	Типы.Вставить("РегистрыНакопления", "РегистрНакопления");
	Типы.Вставить("РегистрыРасчета", "РегистрРасчета");
	Типы.Вставить("РегистрыСведений", "РегистрСведений");
	Типы.Вставить("БизнесПроцессы", "БизнесПроцесс");
	Типы.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Типы.Вставить("Задачи", "Задача");
	Типы.Вставить("Отчеты", "Отчет");
	Типы.Вставить("Константы", "Константа");
	Типы.Вставить("Перечисления", "Перечисление");
	Типы.Вставить("ПланыВидовРасчета", "ПланВидовРасчета");
	Типы.Вставить("ПланыОбмена", "ПланОбмена");
	Типы.Вставить("ПланыСчетов", "ПланСчетов");
	
	Возврат ?(Типы[ТипМенеджера] = Неопределено, "", Типы[ТипМенеджера]);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Стандартный заголовок.

// Параметры:
//  Контекст - ФормаКлиентскогоПриложения
//           - Структура
//  Настройки - НастройкиКомпоновкиДанных
//  ФиксированныеПараметры - Структура
//  ДоступныеЗначения - СписокЗначений
//
Процедура УстановитьСтандартныйЗаголовокОтчета(Контекст, Настройки, ФиксированныеПараметры, ДоступныеЗначения) Экспорт 
	
	Если Не УстановкаСтандартногоЗаголовкаОтчетаДоступна(Контекст) Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияПараметров = ЗначенияПараметровСтандартногоЗаголовка(Контекст, ФиксированныеПараметры, ДоступныеЗначения);
	
	ПредставлениеПериода = ПредставлениеПериодаОтчета(ЗначенияПараметров.Период);
	
	Если ЗначенияПараметров.ТипОбъектаМетаданных = Неопределено
		И ЗначенияПараметров.ИмяОбъектаМетаданных = Неопределено
		И ЗначенияПараметров.ИмяТаблицы = Неопределено Тогда 
		
		Заголовок = Метаданные.Отчеты.рдв_СверкаПолнотыТочностиДанных.Представление();
		
	ИначеЕсли ЗначенияПараметров.ИмяТаблицы = Неопределено
		И Не ЗначениеЗаполнено(ПредставлениеПериода) Тогда 
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сверка полноты и точности данных: %1 ""%2""'"),
			ЗначенияПараметров.ТипОбъектаМетаданных,
			ЗначенияПараметров.ИмяОбъектаМетаданных);
		
	ИначеЕсли ЗначенияПараметров.ИмяТаблицы <> Неопределено
		И Не ЗначениеЗаполнено(ПредставлениеПериода) Тогда 
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сверка полноты и точности данных: %1 ""%2"" - таблица ""%3""'"),
			ЗначенияПараметров.ТипОбъектаМетаданных,
			ЗначенияПараметров.ИмяОбъектаМетаданных,
			ЗначенияПараметров.ИмяТаблицы);
		
	ИначеЕсли ЗначенияПараметров.ИмяТаблицы = Неопределено
		И ЗначениеЗаполнено(ПредставлениеПериода) Тогда 
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сверка полноты и точности данных: %1 ""%2"" за %3'"),
			ЗначенияПараметров.ТипОбъектаМетаданных,
			ЗначенияПараметров.ИмяОбъектаМетаданных,
			ПредставлениеПериода);
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сверка полноты и точности данных: %1 ""%2"" - таблица ""%3"" за %4'"),
			ЗначенияПараметров.ТипОбъектаМетаданных,
			ЗначенияПараметров.ИмяОбъектаМетаданных,
			ЗначенияПараметров.ИмяТаблицы,
			ПредставлениеПериода);
	КонецЕсли;
	
	ЗаголовокУстановленИнтерактивно = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Настройки.ДополнительныеСвойства, "ЗаголовокУстановленИнтерактивно", Ложь);
	
	Если Не ЗаголовокУстановленИнтерактивно Тогда 
		ПараметрЗаголовка = Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
		ПараметрЗаголовка.Значение = Заголовок;
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		И Контекст.ТипФормыОтчета = ТипФормыОтчета.Основная Тогда 
		
		Контекст.Заголовок = Заголовок;
		Контекст.ОтчетНаименованиеТекущегоВарианта = Заголовок;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановкаСтандартногоЗаголовкаОтчетаДоступна(Контекст)
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда 
		ВариантОтчета = Контекст.НастройкиОтчета.ВариантСсылка;
	Иначе
		ВариантОтчета = Контекст.СсылкаВарианта;
	КонецЕсли;
	
	Возврат ВариантыОтчетов.ЭтоПредопределенныйВариантОтчета(ВариантОтчета);
	
КонецФункции

Функция ЗначенияПараметровСтандартногоЗаголовка(Контекст, ФиксированныеПараметры, ДоступныеЗначения)
	
	ЗначенияПараметров = Новый Структура("ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы, Период");
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда 
		АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст.НастройкиОтчета, "АдресСхемы");
	Иначе
		АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Контекст, "АдресСхемы");
	КонецЕсли;
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы); // СхемаКомпоновкиДанных
	
	Для Каждого Элемент Из ЗначенияПараметров Цикл 
		
		НайденныйПараметр = Схема.Параметры.Найти(Элемент.Ключ);
		Если НайденныйПараметр = Неопределено
			Или НайденныйПараметр.ОграничениеИспользования Тогда 
			
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ФиксированныеПараметры[Элемент.Ключ];
		
		ДоступныеЗначенияПараметра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДоступныеЗначения, Элемент.Ключ);
		
		Если  ЗначениеЗаполнено(ЗначениеПараметра)
			И ТипЗнч(ДоступныеЗначенияПараметра) = Тип("СписокЗначений") Тогда 
			
			НайденноеЗначение = ДоступныеЗначенияПараметра.НайтиПоЗначению(ЗначениеПараметра);
			ЗначенияПараметров[Элемент.Ключ] = НайденноеЗначение.Представление;
		Иначе
			ЗначенияПараметров[Элемент.Ключ] = ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Параметры:
//  Период - СтандартныйПериод
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеПериодаОтчета(Период)
	
	ПредставлениеПериода = "";
	
	Если Период = Неопределено
		Или ТипЗнч(Период) <> Тип("СтандартныйПериод") Тогда 
		
		Возврат ПредставлениеПериода;
	КонецЕсли;
	
	Возврат СтроковыеФункции.ПредставлениеПериодаВТексте(Период.ДатаНачала, Период.ДатаОкончания);
	
КонецФункции

Функция РежимыОтображенияФиксированныхПараметров(Настройки)
	
	РежимыОтображения = Новый Структура();
	РежимыОтображения.Вставить("Период", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	РежимыОтображения.Вставить("ТипОбъектаМетаданных", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	РежимыОтображения.Вставить("ИмяОбъектаМетаданных", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	РежимыОтображения.Вставить("ИмяТаблицы", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
//	РежимыОтображения.Вставить("ВыводитьКоличествоПодчиненныхЗаписей", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	Параметры = Настройки.ПараметрыДанных.Элементы;
	
	Для Каждого РежимОтображения Из РежимыОтображения Цикл 
		
		НайденныйПараметр = Параметры.Найти(РежимОтображения.Ключ);
		
		Если НайденныйПараметр <> Неопределено Тогда 
			РежимыОтображения[РежимОтображения.Ключ] = НайденныйПараметр.РежимОтображения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РежимыОтображения;
	
КонецФункции

Процедура УстановитьРежимыОтображенияФиксированныхПараметров(Настройки, РежимыОтображения)
	
	Параметры = Настройки.ПараметрыДанных.Элементы;
	
	Для Каждого РежимОтображения Из РежимыОтображения Цикл 
		
		НайденныйПараметр = Параметры.Найти(РежимОтображения.Ключ);
		
		Если НайденныйПараметр <> Неопределено Тогда 
			НайденныйПараметр.РежимОтображения = РежимыОтображения[РежимОтображения.Ключ];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодДатаОкончания(Период, ТипОбъектаМетаданных, ИмяТаблицы) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	ДатаОкончания = ?(ТипЗнч(Период) = Тип("СтандартныйПериод"), Период.ДатаОкончания, Период);
	
	Если СтрНайти(ВРег(ТипОбъектаМетаданных), "РЕГИСТР") = 0
		Или ПустаяСтрока(ИмяТаблицы)
		Или СтрСравнить(ТипОбъектаМетаданных, "РегистрыРасчета") = 0 Тогда
		Возврат ДатаОкончания;
	КонецЕсли;
	
	Возврат Новый Граница(ДатаОкончания, ВидГраницы.Включая);
	
КонецФункции

Функция ПредставлениеИмениТаблицыОсновныеДанные()
	
	Возврат НСтр("ru = 'Основные данные'");
	
КонецФункции

Функция ИсточникИспользуетсяВИнтеграции(ОбъектМетаданных)
	
	ПравилаКонвертацииОбъекта = рдв_МенеджерОбмена.ПравилаКонвертацииОбъекта(ОбъектМетаданных, "Отправка");
	Если ПравилаКонвертацииОбъекта = Неопределено Тогда
		ПравилаКонвертацииОбъекта = рдв_МенеджерОбмена.ПравилаКонвертацииОбъекта(ОбъектМетаданных, "Получение");
	КонецЕсли;
	
	Используется = Не ПравилаКонвертацииОбъекта = Неопределено;
	
	Возврат Используется;
	
КонецФункции

Функция ВидыХеша()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	рдв_ВидыХешей.Ссылка
	|ИЗ
	|	Справочник.рдв_ВидыХешей КАК рдв_ВидыХешей
	|ГДЕ
	|	НЕ рдв_ВидыХешей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.рдв_ВидыХешей.Предопределенный("ПоследнийНаВыгрузку"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВидыХеша = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ВидыХеша;
	
КонецФункции

#КонецОбласти

#КонецЕсли