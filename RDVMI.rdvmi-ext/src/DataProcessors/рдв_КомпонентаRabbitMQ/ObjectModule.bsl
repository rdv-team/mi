Перем Клиент;

Процедура УстановитьСоединение() Экспорт
	
    КомпонентаПодключена = ПодключитьВнешнююКомпоненту("Обработка.рдв_КомпонентаRabbitMQ.Макет.рдв_PinkRabbitMQ", "RabbitMQ", ТипВнешнейКомпоненты.Native);		
	Если Не КомпонентаПодключена Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту рдв_PinkRabbitMQ'");
	КонецЕсли;
	
    Клиент = Новый("AddIn.RabbitMQ.PinkRabbitMQ");
	Попытка
        Клиент.Connect(Адрес, 
            Порт, 
            Пользователь, 
            Пароль, 
            ВиртуальныйХост,
            ЧастотаПульса,
			ЗащищенноеСоединение
        );
	Исключение
		ТекстОшибки = НСтр("ru = 'Компонента PinkRabbitMQ - не удалось установить соединение с сервером RabbitMQ.
			|'") + Клиент.GetLastError();
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
		
КонецПроцедуры 

Процедура ЗавершитьСоединение() Экспорт
	
	Клиент = Неопределено;
	
КонецПроцедуры


Функция ОтправитьСообщение(ТекстСообщения, КлючМаршрутизации, ИдентификаторСообщения = Неопределено, ИдентификаторСобытия = Неопределено) экспорт

	Результат = Новый Структура("Успешно, ТекстОшибки");
	//УстановитьСвойстваСообщения(Клиент, ДанныеСообщения.СвойстваСообщения);	
	//Клиент.SetPriority(ДанныеСообщения.Приоритет);
	//КлючМаршрутизации = "";
	//Если ДанныеСообщения.СвойстваСообщения.Свойство("RoutingKey") тогда
	//	Если ЗначениеЗаполнено(ДанныеСообщения.СвойстваСообщения.RoutingKey) тогда
	//		КлючМаршрутизации = ДанныеСообщения.СвойстваСообщения.RoutingKey;
	//	КонецЕсли;
	//КонецЕсли;
	
	Попытка
		Клиент.MessageID = ИдентификаторСообщения;
		Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
			Клиент.AppID = ИдентификаторСобытия;
		КонецЕсли;
		Клиент.BasicPublish(ТочкаОбмена, 
							КлючМаршрутизации, 
							ТекстСообщения, 
							0, 
							Истина);
							
		Результат.Успешно = Истина;
	Исключение
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	возврат Результат;
	
КонецФункции

Процедура УстановитьСвойстваСообщения(Клиент, Знач СтруктураСвойств)
	
	Для Каждого КлючИЗначение Из СтруктураСвойств Цикл
		Если НРег(КлючИЗначение.Ключ) = "headers" Тогда
			продолжить;
		ИначеЕсли НРег(КлючИЗначение.Ключ) = "routingkey" Тогда
			продолжить;
		Иначе
			Попытка
				Клиент[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСообщение(РезультатЧтения, Таймаут = 60000, ВыполнитьУдаление = Истина) экспорт
	
	РезультатЧтения = Новый Структура;
	ТекстСообщения = "";
	ТегСообщения = 0;
	
	Успешно = Клиент.BasicConsumeMessage("", ТекстСообщения, ТегСообщения, Таймаут);
		
	РезультатЧтения.Вставить("Успешно", Успешно);
	
  	Если Успешно Тогда
		
		Приоритет = Клиент.GetPriority();
		КлючМаршрутизации = Клиент.GetRoutingKey();
		
		РезультатЧтения.Вставить("ТекстСообщения", ТекстСообщения);
		РезультатЧтения.Вставить("ТегСообщения", ТегСообщения);
		МассивЗагружаемыхСвойств = МассивЗагружаемыхСвойств();
		СвойстваСообщения = ПолучитьСвойстваСообщения(МассивЗагружаемыхСвойств);
			
		РезультатЧтения.Вставить("СвойстваСообщения", СвойстваСообщения);
		РезультатЧтения.Вставить("Приоритет", Приоритет);
		РезультатЧтения.Вставить("КлючМаршрутизации", КлючМаршрутизации);
		
	КонецЕсли;
	
	ТелоСообщения = Неопределено;
	ИдентификаторСообщения = Неопределено;
	ВыполнитьУдаление = Истина;
	
	возврат РезультатЧтения.Успешно;
	
КонецФункции

Функция ПолучитьСвойстваСообщения(МассивСвойств)
	
	СвойстваСообщения = Новый Структура;
	Для Каждого Свойство из МассивСвойств цикл
		СвойстваСообщения.Вставить(Свойство, Клиент[Свойство]);
	КонецЦикла;
	возврат СвойстваСообщения;
	
КонецФункции

Функция НачатьЧтение(Знач ИмяОчереди, 
	Знач ИмяПотребителя = "", 
	Знач БезПодтверждений = Истина,
	Знач Монопольно = Ложь,
	Знач РазмерВыборки = 1) Экспорт
	
	Попытка
		Возврат Клиент.BasicConsume(ИмяОчереди, ИмяПотребителя, БезПодтверждений, Монопольно, РазмерВыборки);
	Исключение
	КонецПопытки;
	
КонецФункции 

Процедура ПодтвердитьСообщение(ТегСообщения, КоличествоПодтверждаемыхСообщений = 1) Экспорт
	
	Попытка
		Клиент.BasicAck(ТегСообщения);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗакончитьЧтение(Знач Потребитель) Экспорт
	
	Попытка
		Клиент.BasicCancel(Потребитель);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтменитьСвязьОчереди(Знач ИмяОчереди, Знач КлючМаршрутизации = "") Экспорт
	
	Попытка
		Клиент.UnbindQueue(ИмяОчереди, ТочкаОбмена, КлючМаршрутизации);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвязьОчереди(Знач ИмяОчереди, Знач КлючМаршрутизации = "") Экспорт
	
	Попытка
		Клиент.BindQueue(ИмяОчереди, ТочкаОбмена, КлючМаршрутизации);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

Функция МассивЗагружаемыхСвойств()
	
	Массив = Новый Массив;
	Массив.Добавить("AppId");
	Массив.Добавить("MessageId");
	Массив.Добавить("CorrelationId");
	Массив.Добавить("ContentType");
	Массив.Добавить("Type");
	
	возврат Массив;
	
КонецФункции

Функция ОбъявитьОчередь(Знач ИмяОчереди = "", 
	Знач ДолжнаСуществовать = Ложь,
	Знач Надежная = Неопределено,
	Знач ЭксклюзивныйДоступ = Ложь,
	Знач Автоудаляемая = Ложь,
	Знач Приоритет = 10) Экспорт
	
	Если Надежная = Неопределено Тогда
		Надежная = Истина;
	КонецЕсли;	
	
	Попытка
		Возврат Клиент.DeclareQueue(ИмяОчереди, ДолжнаСуществовать, Надежная, ЭксклюзивныйДоступ, Автоудаляемая, Приоритет);
	Исключение
	КонецПопытки;
	
КонецФункции 

Процедура ОбъявитьТочкуОбмена(Знач ТипТочкиОбмена = "topic",
	Знач ДолжнаСуществовать = Ложь,
	Знач Надежная = Истина,
	Знач АвтоУдаляемая = Ложь) Экспорт
	
	Попытка
		Клиент.DeclareExchange(ТочкаОбмена, ТипТочкиОбмена, ДолжнаСуществовать, Надежная, АвтоУдаляемая);
	Исключение
		Информация = ИнформацияОбОшибке();
		Сообщить(Клиент.GetLastError());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьОчередь(ОчередьОбмена) Экспорт
	
	Попытка
		Клиент.DeleteQueue(ОчередьОбмена, Ложь, Ложь);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
