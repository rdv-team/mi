
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру, описывающую метаданные для плана обмена.
// Объекты, не входящие в состав плана обмена, исключаются.
//
// Параметры:
//    ВнешниеСистемы - Массив из СправочникСсылка.рдв_ВнешниеСистемы - имя метаданных плана обмена, для которого строится дерево конфигурации.
//
// Возвращаемое значение: 
//    Структура - описание метаданных. Поля:
//         * СтруктураИмен              - Структура - Ключ - группа метаданных (константы, справочники и т.п.),
//                                                    значение - массив полных имен.
//         * СтруктураПредставлений     - Структура - Ключ - группа метаданных (константы, справочники и т.п.),
//                                                    значение - массив полных имен.
//         * СтруктураАвторегистрации   - Структура - Ключ - группа метаданных (константы, справочники и т.п.),
//                                                    значение - массив флагов авторегистрации на узле.
//         * Дерево                     - см. ДеревоОбъектовМетаданных
//
Функция СформироватьСтруктуруМетаданных(ВнешниеСистемы) Экспорт
	
	Дерево = ДеревоОбъектовМетаданных();
	
	// Корень
	СтрокаКорень = Дерево.Строки.Добавить();
	СтрокаКорень.Наименование = Метаданные.Представление();
	СтрокаКорень.ИндексКартинки = 0;
	СтрокаКорень.ИдентификаторСтроки = 0;
	
	// Параметры
	ТекПараметры = Новый Структура;
	ТекПараметры.Вставить("СтруктураИмен", Новый Структура);
	ТекПараметры.Вставить("СтруктураПредставлений", Новый Структура);
	ТекПараметры.Вставить("СтруктураАвторегистрации", Новый Структура);
	ТекПараметры.Вставить("Строки", СтрокаКорень.Строки);
	
	Результат = Новый Структура();
	Результат.Вставить("Дерево", Дерево);
	Результат.Вставить("СтруктураИмен", ТекПараметры.СтруктураИмен);
	Результат.Вставить("СтруктураПредставлений", ТекПараметры.СтруктураПредставлений);
	Результат.Вставить("СтруктураАвторегистрации", ТекПараметры.СтруктураАвторегистрации);
	
	МетаданныеУчаствующиеВОбмене = МетаданныеУчаствующиеВОбмене(ВнешниеСистемы);

	ТекНомерСтроки = 1;
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 1,  2,  Ложь,   
																"Константы", НСтр("ru = 'Константы'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 3,  4,  Истина, 
																"Справочники", НСтр("ru = 'Справочники'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 5,  6,  Истина, "Последовательности",      НСтр("ru = 'Последовательности'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 7,  8,  Истина, "Документы",               НСтр("ru = 'Документы'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 9,  10, Истина, "ПланыВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 11, 12, Истина, "ПланыСчетов",             НСтр("ru = 'Планы счетов'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 13, 14, Истина, "ПланыВидовРасчета",       НСтр("ru = 'Планы видов расчета'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 15, 16, Истина, "РегистрыСведений",        НСтр("ru = 'Регистры сведений'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 17, 18, Истина, "РегистрыНакопления",      НСтр("ru = 'Регистры накопления'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 19, 20, Истина, "РегистрыБухгалтерии",     НСтр("ru = 'Регистры бухгалтерии'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 21, 22, Истина, "РегистрыРасчета",         НСтр("ru = 'Регистры расчета'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 23, 24, Истина, "БизнесПроцессы",          НСтр("ru = 'Бизнес-процессы'"));
	СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекНомерСтроки, ТекПараметры, 25, 26, Истина, "Задачи",                  НСтр("ru = 'Задачи'"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает объект метаданных по его полному имени. Пустая строка обозначает конфигурацию.
//
// Параметры:
//    ИмяМетаданных - Строка - имя объекта метаданных, например "Справочник.Валюты" или "Константы".
//
// Возвращаемое значение:
//    ОбъектМетаданных - результат поиска.
//
Функция МетаданныеПоПолномуИмени(ИмяМетаданных) Экспорт
	
	Если ПустаяСтрока(ИмяМетаданных) Тогда
		// Вся конфигурация
		Возврат Метаданные;
	КонецЕсли;
		
	Значение = Метаданные.НайтиПоПолномуИмени(ИмяМетаданных);
	Если Значение = Неопределено Тогда
		Значение = Метаданные[ИмяМетаданных];
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

// Возвращает таблицу, описывающую измерения для регистрации изменений набора данных.
//
// Параметры:
//    ИмяТаблицы   - Строка - имя таблицы, например "РегистрСведений.КурсыВалют".
//    ВсеИзмерения - Булево - флаг того, что для регистра сведений получаем все измерения, а не 
//                            только основные и ведущие.
//
// Возвращаемое значение:
//    ТаблицаЗначений:
//         * Имя         - Строка - имя измерения.
//         * ТипЗначения - ОписаниеТипов - типы.
//         * Заголовок   - Строка - представление для измерения.
//
Функция ИзмеренияНабораЗаписей(ИмяТаблицы, ВсеИзмерения = Ложь) Экспорт
	
	Если ТипЗнч(ИмяТаблицы) = Тип("Строка") Тогда
		Мета = МетаданныеПоПолномуИмени(ИмяТаблицы);
	Иначе
		Мета = ИмяТаблицы;
	КонецЕсли;
	
	// Определяем ключевые поля
	Измерения = Новый ТаблицаЗначений;
	Колонки = Измерения.Колонки;
	Колонки.Добавить("Имя");
	Колонки.Добавить("ТипЗначения");
	Колонки.Добавить("Заголовок");
	
	Если Не ВсеИзмерения Тогда
		// Что-то регистрируемое
		НеУчитывать = "#НомерСообщения#Узел#";
		Для Каждого МетаОбщий Из Метаданные.ОбщиеРеквизиты Цикл
			НеУчитывать = НеУчитывать + "#" + МетаОбщий.Имя + "#" ;
		КонецЦикла;
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	&ИмяТаблицыМетаданных КАК ИмяТаблицыМетаданных
		|ГДЕ
		|	ЛОЖЬ";
		
		ИмяТаблицыМетаданных = Мета.ПолноеИмя() + ".Изменения";
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыМетаданных", ИмяТаблицыМетаданных);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		ПустойРезультат = Запрос.Выполнить();
		Для Каждого КолонкаРезультата Из ПустойРезультат.Колонки Цикл
			ИмяКолонки = КолонкаРезультата.Имя;
			Если СтрНайти(НеУчитывать, "#" + ИмяКолонки + "#") = 0 Тогда
				Строка = Измерения.Добавить();
				Строка.Имя         = ИмяКолонки;
				Строка.ТипЗначения = КолонкаРезультата.ТипЗначения;
				
				МетаИзмерение = Мета.Измерения.Найти(ИмяКолонки);
				Строка.Заголовок = ?(МетаИзмерение = Неопределено, ИмяКолонки, МетаИзмерение.Представление());
			КонецЕсли;
		КонецЦикла;
		
		Возврат Измерения;
		
	КонецЕсли;
	
	// Все измерения
	
	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(Мета);
	
	// Регистратор
	Если Метаданные.РегистрыНакопления.Содержит(Мета)
	 Или Метаданные.РегистрыБухгалтерии.Содержит(Мета)
	 Или Метаданные.РегистрыРасчета.Содержит(Мета)
	 Или (ЭтоРегистрСведений И Мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору)
	 Или Метаданные.Последовательности.Содержит(Мета) Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "Регистратор";
		Строка.ТипЗначения = Документы.ТипВсеСсылки();
		Строка.Заголовок   = НСтр("ru = 'Регистратор'");
	КонецЕсли;
	
	// Период
	Если ЭтоРегистрСведений И Мета.ОсновнойОтборПоПериоду Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "Период";
		Строка.ТипЗначения = Новый ОписаниеТипов("Дата");
		Строка.Заголовок   = НСтр("ru = 'Период'");
	КонецЕсли;
	
	// Измерения
	Если ЭтоРегистрСведений Тогда
		Для Каждого МетаИзмерение Из Мета.Измерения Цикл
			Строка = Измерения.Добавить();
			Строка.Имя         = МетаИзмерение.Имя;
			Строка.ТипЗначения = МетаИзмерение.Тип;
			Строка.Заголовок   = МетаИзмерение.Представление();
		КонецЦикла;
	КонецЕсли;
	
	// Перерасчет
	Если Метаданные.РегистрыРасчета.Содержит(Мета.Родитель()) Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "ОбъектПерерасчета";
		Строка.ТипЗначения = Документы.ТипВсеСсылки();
		Строка.Заголовок   = НСтр("ru = 'Объект перерасчета'");
	КонецЕсли;
	
	Возврат Измерения;
КонецФункции

// Модифицирует таблицу формы, добавляя туда колонки.
//
// Параметры:
//    ТаблицаФормы   - ТаблицаФормы - элемент, связанный с данными, в который будут добавлены колонки данных.
//    СохранятьИмена - Строка - список имен колонок, которые будут сохранены, через запятую.
//    Добавлять      - Массив - структуры с описанием добавляемых колонок с атрибутами Имя, ТипЗначения, Заголовок.
//    ГруппаКолонок  - ЭлементФормы - группа колонок, в которую происходит добавление.
//
Процедура ДобавитьКолонкиВТаблицуФормы(ТаблицаФормы, СохранятьИмена, Добавлять, ГруппаКолонок = Неопределено) Экспорт
	
	Форма = ФормаЭлементаФормы(ТаблицаФормы);
	ЭлементыФормы = Форма.Элементы;
	ИмяРеквизитаТаблицы = ТаблицаФормы.ПутьКДанным;
	
	Сохраняемые = Новый Структура(СохранятьИмена);
	СохраняемыеПутиДанных = Новый Соответствие;
	Для Каждого Элемент Из Сохраняемые Цикл
		СохраняемыеПутиДанных.Вставить(ИмяРеквизитаТаблицы + "." + Элемент.Ключ, Истина);
	КонецЦикла;
	
	ЭтоДинамическийСписок = Ложь;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = ИмяРеквизитаТаблицы И Реквизит.ТипЗначения.СодержитТип(Тип("ДинамическийСписок")) Тогда
			ЭтоДинамическийСписок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Динамический пересоздает реквизиты сам.
	Если Не ЭтоДинамическийСписок Тогда
		УдаляемыеИмена = Новый Массив;
		
		// Удаляем все реквизиты, которые не перечислены в СохранятьИмена.
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты(ИмяРеквизитаТаблицы) Цикл
			ТекИмя = Реквизит.Имя;
			Если Не Сохраняемые.Свойство(ТекИмя) Тогда
				УдаляемыеИмена.Добавить(Реквизит.Путь + "." + ТекИмя);
			КонецЕсли;
		КонецЦикла;
		
		Добавляемые = Новый Массив;
		Для Каждого Колонка Из Добавлять Цикл
			ТекИмя = Колонка.Имя;
			Если Не Сохраняемые.Свойство(ТекИмя) Тогда
				Добавляемые.Добавить( Новый РеквизитФормы(ТекИмя, Колонка.ТипЗначения, ИмяРеквизитаТаблицы, Колонка.Заголовок) );
			КонецЕсли;
		КонецЦикла;
		
		Форма.ИзменитьРеквизиты(Добавляемые, УдаляемыеИмена);
	КонецЕсли;
	
	// Удаляем элементы
	Родитель = ?(ГруппаКолонок = Неопределено, ТаблицаФормы, ГруппаКолонок);
	
	Удалять = Новый Массив;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		Удалять.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из Удалять Цикл
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") И СохраняемыеПутиДанных[Элемент.ПутьКДанным] = Неопределено Тогда
			ЭлементыФормы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Создаем элементы
	Префикс = ТаблицаФормы.Имя;
	Для Каждого Колонка Из Добавлять Цикл
		ТекИмя = Колонка.Имя;
		ЭлементФормы = ЭлементыФормы.Вставить(Префикс + ТекИмя, Тип("ПолеФормы"), Родитель); // ПолеФормы
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = ИмяРеквизитаТаблицы + "." + ТекИмя;
		ЭлементФормы.Заголовок = Колонка.Заголовок;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение элемента отбора
//
// Параметры:
//   Отбор - Отбор - произвольный отбор.
//   КлючЭлемента - Строка - имя элемента отбора.
//   ЗначениеЭлемента - Произвольный - значение элемента отбора.
// 
Процедура УстановитьЗначениеЭлементаОтбора(Отбор, КлючЭлемента, ЗначениеЭлемента) Экспорт
	
	ЭлементОтбора = Отбор.Найти(КлючЭлемента);
	Если ЭлементОтбора <> Неопределено Тогда
		ЭлементОтбора.Установить(ЗначениеЭлемента);
	КонецЕсли;
	
КонецПроцедуры

//  Читает текущие данные из динамического списка по его настройкам и возвращает в виде таблицы значений.
//
// Параметры:
//   ИсточникДанных - ДинамическийСписок - реквизит формы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - текущие данные динамического списка.
//
Функция ТекущиеДанныеДинамическогоСписка(ИсточникДанных) Экспорт
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	
	Набор = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Запрос = ИсточникДанных.ТекстЗапроса;
	Набор.АвтоЗаполнениеДоступныхПолей = Истина;
	Набор.ИсточникДанных = Источник.Имя;
	Набор.Имя = Источник.Имя;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникНастроек);
	
	ТекНастройки = Компоновщик.Настройки;
	
	// Выбранные поля
	Для Каждого Элемент Из ТекНастройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Не Элемент.Папка Тогда
			Поле = ТекНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование = Истина;
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	Группа = ТекНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	// Отбор
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.Отбор);
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.КомпоновщикНастроек.ПолучитьНастройки().Отбор);

	// Выводим
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ТекНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(Макет);
	Вывод  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	Вывод.УстановитьОбъект(Результат); 
	Вывод.Вывести(Процессор);
	
	Возврат Результат;
	
КонецФункции

// Возвращает начало полного имени формы для открытия по переданному объекту.
//
// Параметры:
//    ТекущийОбъект - Строка, ДинамическийСписок - для которого необходимо получить имя формы. 
// Возвращаемое значение:
//    Строка - полное имя формы.
//
Функция ПолучитьИмяФормы(ТекущийОбъект = Неопределено) Экспорт
	
	Тип = ТипЗнч(ТекущийОбъект);
	Если Тип = Тип("ДинамическийСписок") Тогда
		Возврат ТекущийОбъект.ОсновнаяТаблица + ".";
	ИначеЕсли Тип = Тип("Строка") Тогда
		Возврат ТекущийОбъект + ".";
	КонецЕсли;
	
	Мета = ?(ТекущийОбъект = Неопределено, Метаданные(), ТекущийОбъект.Метаданные());
	
	Возврат Мета.ПолноеИмя() + ".";
	
КонецФункции

// Возвращает описание данных по имени таблицы/полному имени метаданных или метаданным.
//
// Параметры:
//   ИмяТаблицыМетаданных - Строка - имя таблицы, например "Справочник.Валюты".
//
// Возвращаемое значение:
//    Структура - описание данных в виде набора значений. Содержит следующие данные:
//      * ЭтоПоследовательность - Булево - признак последовательности.
//      * ЭтоКоллекция - Булево - признак коллекции значений.
//      * ЭтоКонстанта - Булево - признак константы.
//      * ЭтоСсылка - Булево - признак ссылочного типа данных.
//      * ЭтоНабор - Булево - признак набора записей регистра
//      * Менеджер - СправочникМенеджер, ДокументМенеджер, и т.п. - менеджер значения таблицы.
//      * ИмяТаблицы - Строка - имя таблицы.
//
Функция ХарактеристикиПоМетаданным(ИмяТаблицыМетаданных) Экспорт
	
	ЭтоПоследовательность = Ложь;
	ЭтоКоллекция          = Ложь;
	ЭтоКонстанта          = Ложь;
	ЭтоСсылка             = Ложь;
	ЭтоНабор              = Ложь;
	Менеджер              = Неопределено;
	ИмяТаблицы            = "";
	
	Если ТипЗнч(ИмяТаблицыМетаданных) = Тип("Строка") Тогда
		Мета = МетаданныеПоПолномуИмени(ИмяТаблицыМетаданных);
		ИмяТаблицы = ИмяТаблицыМетаданных;
	ИначеЕсли ТипЗнч(ИмяТаблицыМетаданных) = Тип("Тип") Тогда
		Мета = Метаданные.НайтиПоТипу(ИмяТаблицыМетаданных);
		ИмяТаблицы = Мета.ПолноеИмя();
	Иначе
		Мета = ИмяТаблицыМетаданных;
		ИмяТаблицы = Мета.ПолноеИмя();
	КонецЕсли;
	
	Если Мета = Метаданные.Константы Тогда
		ЭтоКоллекция = Истина;
		ЭтоКонстанта = Истина;
		Менеджер     = Константы;
		
	ИначеЕсли Мета = Метаданные.Справочники Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер      = Справочники;
		
	ИначеЕсли Мета = Метаданные.Документы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Документы;
		
	ИначеЕсли Мета = Метаданные.Перечисления Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Перечисления;
		
	ИначеЕсли Мета = Метаданные.ПланыВидовХарактеристик Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыВидовХарактеристик;
		
	ИначеЕсли Мета = Метаданные.ПланыСчетов Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыСчетов;
		
	ИначеЕсли Мета = Метаданные.ПланыВидовРасчета Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыВидовРасчета;
		
	ИначеЕсли Мета = Метаданные.БизнесПроцессы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = БизнесПроцессы;
		
	ИначеЕсли Мета = Метаданные.Задачи Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Задачи;
		
	ИначеЕсли Мета = Метаданные.Последовательности Тогда
		ЭтоНабор              = Истина;
		ЭтоПоследовательность = Истина;
		ЭтоКоллекция          = Истина;
		Менеджер              = Последовательности;
		
	ИначеЕсли Мета = Метаданные.РегистрыСведений Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыСведений;
		
	ИначеЕсли Мета = Метаданные.РегистрыНакопления Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыНакопления;
		
	ИначеЕсли Мета = Метаданные.РегистрыБухгалтерии Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыБухгалтерии;
		
	ИначеЕсли Мета = Метаданные.РегистрыРасчета Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыРасчета;
		
	ИначеЕсли Метаданные.Константы.Содержит(Мета) Тогда
		ЭтоКонстанта = Истина;
		Менеджер     = Константы[Мета.Имя];
		
	ИначеЕсли Метаданные.Справочники.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Справочники[Мета.Имя];
		
	ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Документы[Мета.Имя];
		
	ИначеЕсли Метаданные.Последовательности.Содержит(Мета) Тогда
		ЭтоНабор              = Истина;
		ЭтоПоследовательность = Истина;
		Менеджер              = Последовательности[Мета.Имя];
		
	ИначеЕсли Метаданные.Перечисления.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Перечисления[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовХарактеристик[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = ПланыСчетов[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыСведений[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыНакопления[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыБухгалтерии[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = БизнесПроцессы[Мета.Имя];
		
	ИначеЕсли Метаданные.Задачи.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = Задачи[Мета.Имя];
		
	Иначе
		МетаРодитель = Мета.Родитель();
		Если МетаРодитель <> Неопределено И Метаданные.РегистрыРасчета.Содержит(МетаРодитель) Тогда
			// Перерасчет
			ЭтоНабор = Истина;
			Менеджер = РегистрыРасчета[МетаРодитель.Имя].Перерасчеты[Мета.Имя];
		КонецЕсли;
		
	КонецЕсли;
	Результат = Новый Структура();
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Метаданные", Мета);
	Результат.Вставить("Менеджер", Менеджер);
	Результат.Вставить("ЭтоНабор", ЭтоНабор);
	Результат.Вставить("ЭтоСсылка", ЭтоСсылка);
	Результат.Вставить("ЭтоКонстанта", ЭтоКонстанта);
	Результат.Вставить("ЭтоПоследовательность", ЭтоПоследовательность);
	Результат.Вставить("ЭтоКоллекция", ЭтоКоллекция);
	Возврат Результат;
	
КонецФункции

// Это ссылочные объекты метаданных.
// 
// Параметры:
//  МетаПолноеИмя - Строка - Мета полное имя
// 
// Возвращаемое значение:
//  Булево - Это ссылочные объекты метаданных
Функция ЭтоСсылочныеОбъектыМетаданных(МетаПолноеИмя) Экспорт
	
	Мета = МетаданныеПоПолномуИмени(МетаПолноеИмя);
	
	Если ТипЗнч(Мета) = Тип("КоллекцияОбъектовМетаданных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(Мета) 
		Или Метаданные.Документы.Содержит(Мета)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(Мета)
		Или Метаданные.ПланыСчетов.Содержит(Мета)
		Или Метаданные.ПланыВидовРасчета.Содержит(Мета)
		Или Метаданные.БизнесПроцессы.Содержит(Мета)
		Или Метаданные.Задачи.Содержит(Мета) Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Это регистры.
// 
// Параметры:
//  МетаПолноеИмя - Строка - Мета полное имя
// 
// Возвращаемое значение:
//  Булево - Это регистры
Функция ЭтоРегистры(МетаПолноеИмя) Экспорт
	
	Мета = МетаданныеПоПолномуИмени(МетаПолноеИмя);
	
	Если ТипЗнч(Мета) = Тип("КоллекцияОбъектовМетаданных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.РегистрыБухгалтерии.Содержит(Мета) 
		Или Метаданные.РегистрыНакопления.Содержит(Мета)
		Или Метаданные.РегистрыРасчета.Содержит(Мета)
		Или Метаданные.РегистрыСведений.Содержит(Мета)  Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Зарегистировать все объекты выбранных типов.
// 
// Параметры:
//  ИменаТаблиц - Массив из Строк - Имена таблиц
//  ВнешниеСистемы - Массив из СправочникСсылка.рдв_ВнешниеСистемы - 
// 
// Возвращаемое значение:
//  Структура - Зарегистировать все объекты выбранных типов:
// * Зарегистрировано - Число - 
// * КоличествоКРегистрации - Число - 
Функция ЗарегистироватьВсеОбъектыВыбранныхТипов(Знач ИменаТаблиц, Знач ВнешниеСистемы, РежимРаботыОбработки) Экспорт
	
	КоличествоВсего = 0;
	Зарегистрировано = 0;
	ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
	ИдентификаторСообщения = Неопределено;
	РазмерПорции = РазмерПорцииВидаСообщения();
	Для Каждого Стр Из ИменаТаблиц Цикл
		
		Описание = ХарактеристикиПоМетаданным(Стр);
		
		Если Описание.ЭтоСсылка Тогда
	
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	&ИмяТаблицы КАК Т";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", Стр);
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			//@skip-check query-in-loop
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Успешно = ЗарегистрироватьИзменения(ВыборкаДетальныеЗаписи.Ссылка, ВнешниеСистемы, РежимРаботыОбработки
										, Зарегистрировано, ИдентификаторСообщения, ИдентификаторСобытия, РазмерПорции);
				Если Успешно Тогда
					Зарегистрировано = Зарегистрировано + 1;
				КонецЕсли;
			КонецЦикла;
			
			КоличествоВсего = КоличествоВсего + ВыборкаДетальныеЗаписи.Количество();
			
		ИначеЕсли Описание.ЭтоНабор И РежимРаботыОбработки = 0 Тогда
			
			Измерения = Новый Массив;
			Для Каждого Измерение Из Описание.Метаданные.Измерения Цикл
				Измерения.Добавить(СтрШаблон("Т.%1 КАК %1", Измерение.Имя));
			КонецЦикла;
			
			Текст = "ВЫБРАТЬ
			| * 
			|ИЗ &ИмяТаблицы КАК Т";
			Текст = СтрЗаменить(Текст, "*", СтрСоединить(Измерения, ","));
			Текст = СтрЗаменить(Текст, "&ИмяТаблицы", Описание.ИмяТаблицы);
			Запрос = Новый Запрос;
			Запрос.Текст = Текст;
			//@skip-check query-in-loop
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Набор = Описание.Менеджер.СоздатьНаборЗаписей();
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					Набор.Отбор[Колонка.Имя].Установить(Выборка[Колонка.Имя]);
				КонецЦикла;
				
				Зарегистрировано = Зарегистрировано + 1;
				ЗарегистрироватьИзменения(Набор, ВнешниеСистемы, РежимРаботыОбработки);
				
			КонецЦикла;
			
			КоличествоВсего = КоличествоВсего + Выборка.Количество();
			
		КонецЕсли;
	
	КонецЦикла;
	
	Ответ = Новый Структура("Зарегистрировано,КоличествоКРегистрации", Зарегистрировано, КоличествоВсего);
	Возврат Ответ;
	
КонецФункции

// Зарегистрировать изменения.
// 
// Параметры:
//  Источник - Произвольный - объект к регистрации
//  ВнешниеСистемы - Массив из СправочникСсылка.рдв_ВнешниеСистемы - Внешние системы
// 
// Возвращаемое значение:
//  Булево - Зарегистрировать изменения
Функция ЗарегистрироватьИзменения(Источник, ВнешниеСистемы, РежимРаботыОбработки = 0
											, Зарегистрировано = 0
											, ИдентификаторСообщения = ""
											, ИдентификаторСобытия = ""
											, РазмерПорции=1) Экспорт
	
	Успешно = Истина;
	Попытка
		Если РежимРаботыОбработки = 0 Тогда
			рдв_РегистрацияИзменений.ЗарегистрироватьИзменения(Источник,, ВнешниеСистемы);
		Иначе
			
			КратноРазмеруПорции = Зарегистрировано/РазмерПорции;
		
			Если КратноРазмеруПорции = Цел(КратноРазмеруПорции)
				ИЛИ (РазмерПорции > 1 И ИдентификаторСообщения = Неопределено) Тогда
				ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			ПараметрыОчереди = Новый Структура;
			ПараметрыОчереди.Вставить("ИдентификаторСобытия", ИдентификаторСобытия);
			ПараметрыОчереди.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
			Результат = рдв_РаботаСОчередями.ДобавитьВОчередь(рдв_ФормированиеХешейОбъектов.ИмяОчередиФормированияХеша()
																, Источник, ПараметрыОчереди);
			
		КонецЕсли;
	Исключение
		Успешно = Ложь;
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("РегистрацияИзмененийКВыгрузке", УровеньЖурналаРегистрации.Ошибка,, Источник, Ошибка);
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции

// Размер порции вида сообщения.
// 
// Возвращаемое значение:
//  Число, Произвольный - Размер порции вида сообщения
Функция РазмерПорцииВидаСообщения() Экспорт
	
	ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.Предопределенный("ВыгружаемыеОбъекты");
	Порция = Справочники.рдв_ВидыСообщенийИнтеграции.РазмерПорции(ВидСообщения);
	
	Порция = ?(Порция=0, 1, Порция);
	
	Возврат Порция;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//   ДеревоЗначений:
//     * Наименование        - Строка - представление вида объекта метаданных.
//     * МетаПолноеИмя       - Строка - полное имя объекта метаданных.
//     * ИндексКартинки      - Число  - зависит от метаданных.
//     * Пометка             - Неопределено - далее используется для хранения пометок
//     * ИдентификаторСтроки - Число  - индекс добавленной строки (обход дерева сверху вниз слева направо).
//     * КоличествоИзменений        - Число - количество измененных записей.
//     * КоличествоВыгруженных      - Число - количество выгруженных записей.
//     * КоличествоНевыгруженных    - Число - количество не выгруженных записей.
//     * КоличествоИзмененийСтрокой - Число - строковое представление количества измененных записей.
//
Функция ДеревоОбъектовМетаданных()
	Дерево = Новый ДеревоЗначений;
	Колонки = Дерево.Колонки;
	
	Колонки.Добавить("Наименование");
	Колонки.Добавить("МетаПолноеИмя");
	Колонки.Добавить("ИндексКартинки");
	Колонки.Добавить("Пометка");
	Колонки.Добавить("ИдентификаторСтроки");
	
	Колонки.Добавить("КоличествоИзменений");
	Колонки.Добавить("КоличествоВыгруженных");
	Колонки.Добавить("КоличествоНевыгруженных");
	Колонки.Добавить("КоличествоИзмененийСтрокой");
	
	Возврат Дерево;
КонецФункции

Процедура СформироватьУровеньМетаданных(МетаданныеУчаствующиеВОбмене, ТекущийНомерСтроки, Параметры, ИндексКартинки, ИндексКартинкиУзлов, ДобавлятьПодчиненные, ИмяМета, ПредставлениеМета)
	
	ПредставленияУровня = Новый Массив;
	ИменаУровня         = Новый Массив;
	
	ВсеСтроки = Параметры.Строки;
	
	СтрокаГруппа = ВсеСтроки.Добавить();
	СтрокаГруппа.ИдентификаторСтроки = ТекущийНомерСтроки;
	
	СтрокаГруппа.МетаПолноеИмя  = ИмяМета;
	СтрокаГруппа.Наименование   = ПредставлениеМета;
	СтрокаГруппа.ИндексКартинки = ИндексКартинки;
	
	Строки = СтрокаГруппа.Строки;
	БылиПодчиненные = Ложь;
	
	Для Каждого Мета Из Метаданные[ИмяМета] Цикл
		
		БылиПодчиненные = Истина;
		МетаПолноеИмя   = Мета.ПолноеИмя();
		Наименование    = Мета.Представление();
		
		Если ДобавлятьПодчиненные Тогда
			
			Если МетаданныеУчаствующиеВОбмене.Получить(Мета) = Истина Тогда
			
				НовСтрока = Строки.Добавить();
				НовСтрока.МетаПолноеИмя  = МетаПолноеИмя;
				НовСтрока.Наименование   = Наименование ;
				НовСтрока.ИндексКартинки = ИндексКартинкиУзлов;
				
				ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
				НовСтрока.ИдентификаторСтроки = ТекущийНомерСтроки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИменаУровня.Добавить(МетаПолноеИмя);
		ПредставленияУровня.Добавить(Наименование);
		
	КонецЦикла;
	
	Если БылиПодчиненные Тогда
		Строки.Сортировать("Наименование");
		Параметры.СтруктураИмен.Вставить(ИмяМета, ИменаУровня);
		Параметры.СтруктураПредставлений.Вставить(ИмяМета, ПредставленияУровня);
	Иначе
		// Виды объектов без регистрации не вставляем.
		ВсеСтроки.Удалить(СтрокаГруппа);
	КонецЕсли;
	
КонецПроцедуры

Функция МетаданныеУчаствующиеВОбмене(ВнешниеСистемы)
	
	МетаданныеУчаствующиеВОбмене = Новый Соответствие();
	
	ПравилаРегистрации = рдв_РегистрацияИмененийПовтИсп.ИнициализироватьПравилаРегистрации();
	Для Каждого ВнешняяСистема Из ВнешниеСистемы Цикл
		Отбор = Новый Структура("ВнешняяСистема", ВнешняяСистема);
		СтрокиВнешнейСистемы = ПравилаРегистрации.НайтиСтроки(Отбор);
		Для Каждого Стр Из СтрокиВнешнейСистемы Цикл
			МетаданныеУчаствующиеВОбмене.Вставить(Стр.МетаданныеОбъекта, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МетаданныеУчаствующиеВОбмене;
	
КонецФункции

// Копирует отбор компоновки данных добавлением к существующим.
//
Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого Элемент Из КоллекцияИсточник Цикл
		ТипЭлемента  = ТипЗнч(Элемент);
		НовыйЭлемент = КоллекцияПриемник.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент) 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает управляемую форму, которой принадлежит элемент.
//
// Параметры:
//  ЭлементФормы - ЭлементыФормы
// Возвращаемое значение:
//  ЭлементыФормы
//
Функция ФормаЭлементаФормы(ЭлементФормы)
	Результат = ЭлементФормы;
	ТипыФормы = Новый ОписаниеТипов("ФормаКлиентскогоПриложения");
	Пока Не ТипыФормы.СодержитТип(ТипЗнч(Результат)) Цикл
		Результат = Результат.Родитель;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли
