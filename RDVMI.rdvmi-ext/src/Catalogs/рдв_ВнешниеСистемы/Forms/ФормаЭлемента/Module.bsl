
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьУчетныеДанные();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеЭлементами();
	
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(Пароль), УникальныйИдентификатор, "");
	КонецЕсли;
	
	Если ПользовательИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пользователь, "Пользователь");
		УстановитьПривилегированныйРежим(Ложь);
		Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Справочники.рдв_ВнешниеСистемы.УстановитьРасписание(
		ТекущийОбъект, РасписаниеОтправка, ИспользоватьРасписание, "Отправка");

	УстановитьНадписьРасписанияОбработки(ЭтотОбъект, "Отправка");

	Справочники.рдв_ВнешниеСистемы.УстановитьРасписание(
		ТекущийОбъект, РасписаниеПолучение, ИспользоватьРасписание, "Получение");

	УстановитьНадписьРасписанияОбработки(ЭтотОбъект, "Получение");
	
	ДопНастройкиКСохранению = ДопНастройкиКСохранению(ЭтотОбъект);
	ТекущийОбъект.ДополнительныеНастройки = Новый ХранилищеЗначения(ДопНастройкиКСохранению);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДержатьСоединениеОткрытымПриИзменении(Элемент)
	УправлениеЭлементами();
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	УправлениеЭлементами();
	ДополнительныеНастройкиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ПользовательИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПарольИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасписаниеПриИзменении(Элемент)
	УправлениеЭлементами();
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяРегламентаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
		
	СписокВыбора = Элемент.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		СписокВыбора.ЗагрузитьЗначения(СписокИменПользователейИБ());
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяРегламентаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		СписокВыбора.ЗагрузитьЗначения(СписокИменПользователейИБ());
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Объект.рдв_Идентификатор = ПолучитьИдентификатор(Объект.Наименование);
	
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеОбработкиОтправка(Команда)
	Обработчик = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, Новый Структура("Направление", "Отправка"));
	
	РедактированиеРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеОтправка);
	РедактированиеРасписания.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбработкиПолучение(Команда)
	Обработчик = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, Новый Структура("Направление", "Получение"));
	
	РедактированиеРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеПолучение);
	РедактированиеРасписания.Показать(Обработчик);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДополнительныеНастройки

&НаСервере
Процедура ДополнительныеНастройкиОбновить()
	
	Если Объект.Тип = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеНастройки = ДополнительныеНастройкиПоУмолчанию(Объект.Тип);
	ИзменитьРеквизитыНаФорме(ЭтотОбъект, ДополнительныеНастройки);
	ПрикладнойОбъект = РеквизитФормыВЗначение("Объект");
	ДополнительныеНастройки = ПрикладнойОбъект.ДополнительныеНастройки.Получить();
	Если Не ДополнительныеНастройки = Неопределено Тогда
		
		ОбновитьНастройкиНаФорме(ЭтотОбъект, ДополнительныеНастройки);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеНастройкиПоУмолчанию(ТипВнешнейСистемы)
	
	Попытка
		МодульИнтеграции = рдв_Интеграция.МодульИнтеграции(ТипВнешнейСистемы);
	Исключение
		// не задан модуль интеграции
		Возврат Новый Структура;
	КонецПопытки;
	ДополнительныеНастройки = МодульИнтеграции.ДинамическиеНастройкиИтеграцииОписание();
	Возврат ДополнительныеНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыНаФорме(Форма, ДополнительныеНастройки)
	
	Элементы = Форма.Элементы;
	
	// Новые реквизиты формы
	МассивРеквизитовДобавить = Новый Массив;
	Для Каждого Параметр Из ДополнительныеНастройки Цикл
		Реквизит = Новый РеквизитФормы(Параметр.Ключ, Параметр.Значение.Тип, ,, Истина);
		МассивРеквизитовДобавить.Добавить(Реквизит);
	КонецЦикла;
	
	// Прошлые реквизиты к удалению
	ГруппаРеквизитов = Элементы.ГруппаШапкаДополнительныеНастройки;
	МассивРеквизитовУдалить = Новый Массив;
	ЭлементыКУДалению(МассивРеквизитовУдалить, ГруппаРеквизитов);
	УдалитьПодчиненныеЭлементы(Форма, ГруппаРеквизитов);
	
	Форма.ИзменитьРеквизиты(МассивРеквизитовДобавить, МассивРеквизитовУдалить);
	
	// Новые элементы новых реквизитов на фоорму
	Для Каждого Элемент Из ДополнительныеНастройки Цикл
		
		Имя = Элемент.Ключ;
		ПолеВвода = рдв_РаботаСФормами.ДобавитьПолеВвода(Форма, Имя, Элемент.Значение.Заголовок, ГруппаРеквизитов
														, Элемент.Ключ);
		ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		РежимПароля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Элемент.Значение.ДополнительныеПараметры
																, "РежимПароля", Ложь);
		ПолеВвода.РежимПароля = РежимПароля;
		Форма[Элемент.Ключ] = Элемент.Значение.ЗначениеПоУмолчанию;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПодчиненныеЭлементы(Форма, Группа)
	
	Элементы = Форма.Элементы;
	
	Для Каждого Стр Из Группа.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЭлементыКУДалению(МассивРеквизитовУдалить, Группа)
	
	Для Каждого Стр Из Группа.ПодчиненныеЭлементы Цикл
		МассивРеквизитовУдалить.Добавить(Стр.ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьНастройкиНаФорме(Форма, ДополнительныеНастройки)
	
	Если ДополнительныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеНастройки Цикл
		
		НаФорме = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Параметр.Ключ);
		Если НаФорме Тогда
			Форма[Параметр.Ключ] = Параметр.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДопНастройкиКСохранению(Форма)
	
	Элементы = Форма.Элементы;
	Настройки = Новый Структура;
	Для Каждого Стр Из Элементы.ГруппаШапкаДополнительныеНастройки.ПодчиненныеЭлементы Цикл
		Настройки.Вставить(Стр.Имя, Форма[Стр.Имя]);
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УправлениеФормой()
	
	Если СтрСравнить(Объект.рдв_Идентификатор, "ЭтотУзел") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасписания = рдв_РегламентныеЗадания.РасписаниеРегламентаОбработки("рдв_ЗапускИнтеграцииОтправка"
																			, Объект.РегламентноеЗаданиеGUIDОтправка);
	Если ДанныеРасписания.Использование Тогда
		ИспользоватьРасписание = Истина;
	КонецЕсли;
	РасписаниеОтправка = ДанныеРасписания.Расписание;
	УстановитьНадписьРасписанияОбработки(ЭтотОбъект, "Отправка");

	ДанныеРасписания = рдв_РегламентныеЗадания.РасписаниеРегламентаОбработки("рдв_ЗапускИнтеграцииПолучение"
																			, Объект.РегламентноеЗаданиеGUIDПолучение);
	Если ДанныеРасписания.Использование Тогда
		ИспользоватьРасписание = Истина;
	КонецЕсли;
	РасписаниеПолучение = ДанныеРасписания.Расписание;
	УстановитьНадписьРасписанияОбработки(ЭтотОбъект, "Получение");
	
	СписокИменПользователейИБ = СписокИменПользователейИБ();
	Элементы.ИмяПользователяРегламентаОтправка.СписокВыбора.ЗагрузитьЗначения(СписокИменПользователейИБ);;
	Элементы.ИмяПользователяРегламентаПолучение.СписокВыбора.ЗагрузитьЗначения(СписокИменПользователейИБ);
	
	ДополнительныеНастройкиОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(Расписание, ПараметрыОповещения) Экспорт
	
	Если Расписание <> Неопределено Тогда
		Если ПараметрыОповещения.Направление = "Отправка" Тогда
			РасписаниеОтправка = Расписание;
		Иначе
			РасписаниеПолучение = Расписание;
		КонецЕсли;
		Модифицированность = Истина;
		УстановитьНадписьРасписанияОбработки(ЭтотОбъект, ПараметрыОповещения.Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьРасписанияОбработки(Форма, Направление)
	
	Если Направление = "Отправка" Тогда
		РасписаниеОбработки = Форма.РасписаниеОтправка;
		ЭлементРасписаниеОбработки = Форма.Элементы.НастроитьРасписаниеОбработкиОтправка;
	Иначе
		РасписаниеОбработки = Форма.РасписаниеПолучение;
		ЭлементРасписаниеОбработки = Форма.Элементы.НастроитьРасписаниеОбработкиПолучение;
	КонецЕсли;
	
	Если рдв_РегламентныеЗаданияКлиентСервер.РасписаниеЗадано(РасписаниеОбработки) Тогда
		ТекстЗаголовка = Строка(РасписаниеОбработки);
	Иначе
		ТекстЗаголовка = НСтр("ru='Настроить расписание'");
	КонецЕсли;
	
	ЭлементРасписаниеОбработки.Заголовок = ТекстЗаголовка;
		
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементами()
	
	Если СтрСравнить(Объект.рдв_Идентификатор, "ЭтотУзел") = 0 Тогда
		Элементы.Шапка.Видимость = Ложь;
		Элементы.ГруппаРасписаниеОтправка.Видимость = Ложь;
		Элементы.ИспользоватьРасписание.Видимость = Ложь;
		Элементы.Тип.Видимость = Ложь;
	КонецЕсли;
	
	ОтправкаПоРасписанию = Объект.Тип = ПредопределенноеЗначение("Перечисление.рдв_ТипыВнешнихСистем.RMQ")
						ИЛИ Объект.Тип = ПредопределенноеЗначение("Перечисление.рдв_ТипыВнешнихСистем.FTP");
	Элементы.ГруппаРасписаниеПолучение.Видимость = ОтправкаПоРасписанию;
	
	Элементы.ГруппаРасписаниеОтправка.Видимость = ИспользоватьРасписание;
	Элементы.ГруппаРасписаниеПолучение.Видимость = ИспользоватьРасписание;
	Элементы.ГруппаВремяСоединения.Видимость = Объект.ДержатьСоединениеОткрытым;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокИменПользователейИБ()
	
	Массив = Новый Массив;
	Для Каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Массив.Добавить(ПользовательИБ.Имя);	
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ПрочитатьУчетныеДанные()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пользователь, Пароль");
		Пароль = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пароль), УникальныйИдентификатор, "");
		Пользователь = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пользователь), ДанныеАвторизации.Пользователь, "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификатор(СтрНаименование)
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
		
		Символ = Сред(СтрНаименование, НомСимвола, 1);
		
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора()
	
	Идентификатор = ПолучитьИдентификатор(Объект.Наименование);
	
	Элементы.рдв_Идентификатор.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.рдв_Идентификатор) И Объект.рдв_Идентификатор <> Идентификатор Тогда	
		Элементы.рдв_Идентификатор.СписокВыбора.Добавить(Объект.рдв_Идентификатор);
	КонецЕсли;
	
	Элементы.рдв_Идентификатор.СписокВыбора.Добавить(Идентификатор);
	
КонецПроцедуры

#КонецОбласти
