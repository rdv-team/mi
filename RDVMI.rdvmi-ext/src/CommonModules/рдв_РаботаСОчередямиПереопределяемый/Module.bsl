
#Область ПрограммныйИнтерфейс

// Пример добавления объекта в очередь:
// рдв_РаботаСОчередями.ДобавитьВОчередь("ОтправкаСведенийОбОплатеСчетов", СсылкаНаОбъект,,, Истина);

Процедура ЗаполнитьСписокОчередей(СписокОчередей) Экспорт
	
	//СписокОчередей.Добавить("ИмяОчереди", 
	//	НСтр("ru = 'Синоним очереди'"));
	
	рдв_РаботаСОчередямиДемо.ЗаполнитьСписокОчередей(СписокОчередей);
	
КонецПроцедуры

Процедура ЗаполнитьТипОчередиПоУмолчанию(ИмяОчереди, ТипОчередиОбъект) Экспорт
	
	//Если ИмяОчереди = "ОтправкаИсходящегоЭлектронногоПисьма" Тогда
	//	
	//	ТипОчередиОбъект.ПорционнаяОбработка = Истина;
	//	ТипОчередиОбъект.МаксЗаписейВПорции = 0;
	//			
	//КонецЕсли;
	
	рдв_РаботаСОчередямиДемо.ЗаполнитьТипОчередиПоУмолчанию(ИмяОчереди, ТипОчередиОбъект);
	
КонецПроцедуры 

Процедура ВыполнитьОбработкуОчереди(ИмяОчереди, ИдентификаторыОчереди, РезультатОбработки) Экспорт
	
	// ИдентификаторыОчереди - Массив - список идентификаторов очереди к обработке.
	// РезультатОбработки - Стурктура - свойства структуры:
	// - Обработанные - Соответствие, Неопределено (по умолчанию):
	//       если Неопределено, то считаются обработанными все записи без ошибок;
	//       если Соответствие, Идентификатор -> ОписаниеЗаписи,
	//            только записи в соответствии переводятся в состояние "Выполнена".
	// - Пропущенные - Соответствие - Идентификатор -> ПричинаПропуска
	// - Ошибки - Соответствие - Идентификатор -> ОписаниеОшибки
	// - ЗначенияСвойств - Соответствие - изменение свойств очередей,
	//       Идентификатор -> Структура (свойства записи)

	рдв_РаботаСОчередямиДемо.ВыполнитьОбработкуОчереди(ИмяОчереди, ИдентификаторыОчереди, РезультатОбработки);
	
КонецПроцедуры

Процедура УстановитьРасписаниеРегламентаОбработкиОчереди(ТипОчередиОбъект, Расписание, 
	ПараметрыЗадания, ИмяПользователя, Использование) Экспорт
	
	// ТипОчередиОбъект - СправочникОбъект - объект типа очереди для установки ИД задания.
	
	ИмяРегламента = ИмяРегламентаОбработкиОчередей();
	НаименованиеЗадания = НаименованиеРегламентаОбработкиОчереди(ТипОчередиОбъект);
	//
	МодульУправленияРегламентами = МодульУправленияРегламентами(ИмяРегламента);
	МодульУправленияРегламентами.УстановитьРасписание(ИмяРегламента, Расписание,
		ТипОчередиОбъект.РегламентноеЗаданиеGUID, НаименованиеЗадания, ПараметрыЗадания,
		ТипОчередиОбъект.ИмяПользователяРегламента, Использование);
		
КонецПроцедуры

Процедура РасписаниеРегламентаОбработкиОчереди(ТипОчереди, Результат) Экспорт
	
	// Результат - Структура: Расписание, Использование.
	
	ИмяРегламента = рдв_РаботаСОчередямиПереопределяемый.ИмяРегламентаОбработкиОчередей();
	
	РасписаниеПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	РезультатРасписание = Новый Структура("Расписание, Использование", РасписаниеПоУмолчанию, Ложь);
	
	ИдентификаторРегламента = ТипОчереди.РегламентноеЗаданиеGUID;
	Если ЗначениеЗаполнено(ИдентификаторРегламента) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификатор", ИдентификаторРегламента);
	//	Отбор.Вставить("Метаданные", МетаданныеРегламента(ИмяРегламента));
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.рдв_ЗапускОчередейОбработкиДанных);
		УстановитьПривилегированныйРежим(Истина);
		МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		УстановитьПривилегированныйРежим(Ложь);
		Если МассивЗаданий.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатРасписание, МассивЗаданий[0], "Расписание, Использование");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатРасписание, "Расписание, Использование");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ИмяРегламентаОбработкиОчередей() Экспорт
	Возврат "рдв_ЗапускОчередейОбработкиДанных";
КонецФункции

Функция НаименованиеРегламентаОбработкиОчереди(ТипОчереди) Экспорт
	Наименование = НСтр("ru = 'Обработка очереди: %1'");
	Наименование = СтрШаблон(Наименование, Строка(ТипОчереди));
	Возврат Наименование;
КонецФункции

Функция СрокХраненияОстановленнойОчередиДней() Экспорт
	
	// RM-2481 14.06.2022 tosina@rdv-it.ru	
	
	// Остановленная запись очереди теряет актуальность за N дней, 
	// после чего выполняется удаление остановленной записи. 
	
	Возврат 1;
	
КонецФункции

Функция МодульУправленияРегламентами(ИмяРегламента) Экспорт
	//Если Не ЭтоРежимРасширения() Тогда
	//	Возврат рдв_РегламентныеЗадания;
	//Иначе
	//	// Общий модуль управления регламентными заданиями через
	//	// дополнительные обработки для работы в режиме расширения.
	//	Возврат рдв_ОбщегоНазначения.ОбщийМодуль("рдв_РегламентныеЗаданияДО");
	//КонецЕсли;
	
	Возврат рдв_РегламентныеЗадания;	
КонецФункции

#КонецОбласти
