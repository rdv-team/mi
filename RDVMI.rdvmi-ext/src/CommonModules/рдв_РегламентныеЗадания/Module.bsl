
#Область ПрограммныйИнтерфейс

// Выполняет установку расписания регламента в соответствии с указанными настройками,
// если расписание пустое, то задание удаляется.
//
Функция УстановитьРасписание(Знач Регламент, Расписание, Идентификатор, Наименование,
	Параметры = Неопределено, ИмяПользователя = Неопределено, Использование = Истина) Экспорт
	
	// Регламент - Строка, ОбъектМетаданных - имя регламента или объект метаданных.
	
	Если ТипЗнч(Регламент) = Тип("Строка") Тогда
		Регламент = Метаданные.РегламентныеЗадания[Регламент];
	КонецЕсли;

	Если РасписаниеЗадано(Расписание) Тогда
		
		Если рдв_ОбщегоНазначения.ЭтоФайловаяИБ() Тогда
			// Установка паузы повтора 1 секунда расписания в файловой базе
			// для справедливого выполнения заданий, когда время выполнения
			// задания длинее периода повтора задания по расписанию.
			ПаузаПовтора = 1;
			ЗаполнитьПаузуПовтораРасписания(Расписание, ПаузаПовтора, Истина);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Если Не ПроверитьМетаданныеЗадания(Идентификатор, Регламент) Тогда
				УдалитьЗадание(Идентификатор);
			Иначе
				Задание = Задание(Идентификатор);
			КонецЕсли;
		КонецЕсли;
			
		Если Задание = Неопределено Тогда
			ПараметрыЗадания = Новый Структура();
			ПараметрыЗадания.Вставить("Метаданные", Регламент);
			Задание = ДобавитьЗадание(ПараметрыЗадания);
			Идентификатор = Задание.УникальныйИдентификатор;
		КонецЕсли;
		
		ИзменениеЗадания = Новый Структура;
		ИзменениеЗадания.Вставить("Расписание", Расписание);
		ИзменениеЗадания.Вставить("Наименование", Наименование);
		ИзменениеЗадания.Вставить("Использование", Использование);
		
		Если Параметры <> Неопределено Тогда
			ИзменениеЗадания.Вставить("Параметры", Параметры);
		КонецЕсли;

		Если ИмяПользователя <> Неопределено Тогда
			СоздатьСлужебногоПользователяЕслиНеСуществует(ИмяПользователя, Регламент, Параметры);
			ИзменениеЗадания.Вставить("ИмяПользователя", ИмяПользователя);
		КонецЕсли;
				
		ИзменитьЗадание(Идентификатор, ИзменениеЗадания);
		
	Иначе
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Задание = Задание(Идентификатор);
			Если Задание <> Неопределено Тогда
				УдалитьЗадание(Идентификатор);
				Задание = Неопределено;
			КонецЕсли;
			Идентификатор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

// Возвращает РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания 
//                           или имя метаданных предопределенного регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция Задание(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
		
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		Если Идентификатор.Предопределенное Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
		Иначе
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Если СписокЗаданий.Количество() > 0 Тогда
				РегламентноеЗадание = СписокЗаданий[0];
			КонецЕсли;
		КонецЕсли; 
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Добавляет новое задание в очередь или как регламентное.
// 
// Параметры: 
//  Параметры - Структура - Параметры добавляемого задания, возможные ключи:
//   * Использование
//   * Метаданные - обязательно для указания
//   * Параметры
//   * Ключ
//   * ИнтервалПовтораПриАварийномЗавершении
//   * Расписание
//   * КоличествоПовторовПриАварийномЗавершении
//
// Возвращаемое значение: 
//  РегламентноеЗадание, СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор
//  добавленного задания.
// 
Функция ДобавитьЗадание(Параметры) Экспорт
	
	ПараметрыЗадания = Параметры;
	
	МетаданныеЗадания = ПараметрыЗадания.Метаданные;
	Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(МетаданныеЗадания);
	
	Если ПараметрыЗадания.Свойство("Наименование") Тогда
		Задание.Наименование = ПараметрыЗадания.Наименование;
	Иначе
		Задание.Наименование = МетаданныеЗадания.Наименование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Использование") Тогда
		Задание.Использование = ПараметрыЗадания.Использование;
	Иначе
		Задание.Использование = МетаданныеЗадания.Использование;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Ключ") Тогда
		Задание.Ключ = ПараметрыЗадания.Ключ;
	Иначе
		Задание.Ключ = МетаданныеЗадания.Ключ;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
		Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
		Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
	Иначе
		Задание.ИнтервалПовтораПриАварийномЗавершении = МетаданныеЗадания.ИнтервалПовтораПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
		Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
	Иначе
		Задание.КоличествоПовторовПриАварийномЗавершении = МетаданныеЗадания.КоличествоПовторовПриАварийномЗавершении;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Параметры") Тогда
		Задание.Параметры = ПараметрыЗадания.Параметры;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("Расписание") Тогда
		Задание.Расписание = ПараметрыЗадания.Расписание;
	КонецЕсли;
	
	Задание.Записать();
	
	Возврат Задание;
	
КонецФункции

// Удаляет РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  не предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание, которое нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
//
Процедура УдалитьЗадание(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
		ВызватьИсключение( НСтр("ru = 'Предопределенное регламентное задание удалить невозможно.';
								|en = 'Cannot delete predefined scheduled job.'") );
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
		СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
		Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
			РегламентноеЗадание.Удалить();
		КонецЦикла; 
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
		Если РегламентноеЗадание <> Неопределено Тогда
			РегламентноеЗадание.Удалить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет задание с указанным идентификатором.
// В случае вызова в транзакции на задание устанавливается объектная блокировка.
// 
// Параметры: 
//  Идентификатор - СправочникСсылка.ОчередьЗаданий, СправочникСсылка.ОчередьЗаданийОбластейДанных - идентификатор задания
//  Параметры     - Структура - Параметры, которые следует установить заданию, возможные ключи:
//   * Использование
//   * Параметры
//   * Ключ
//   * ИнтервалПовтораПриАварийномЗавершении
//   * Расписание
//   * КоличествоПовторовПриАварийномЗавершении
//   
//   В случае если задание создано на основе шаблона или предопределенное, могут быть указаны
//   только следующие ключи: Использование.
// 
Процедура ИзменитьЗадание(Знач Идентификатор, Знач Параметры) Экспорт
		
	ПараметрыЗадания = Параметры;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание <> Неопределено Тогда
		
		Если ПараметрыЗадания.Свойство("Наименование") Тогда
			Задание.Наименование = ПараметрыЗадания.Наименование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Использование") Тогда
			Задание.Использование = ПараметрыЗадания.Использование;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Ключ") Тогда
			Задание.Ключ = ПараметрыЗадания.Ключ;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИмяПользователя") Тогда
			Задание.ИмяПользователя = ПараметрыЗадания.ИмяПользователя;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("ИнтервалПовтораПриАварийномЗавершении") Тогда
			Задание.ИнтервалПовтораПриАварийномЗавершении = ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("КоличествоПовторовПриАварийномЗавершении") Тогда
			Задание.КоличествоПовторовПриАварийномЗавершении = ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Параметры") Тогда
			Задание.Параметры = ПараметрыЗадания.Параметры;
		КонецЕсли;
		
		Если ПараметрыЗадания.Свойство("Расписание") Тогда
			Задание.Расписание = ПараметрыЗадания.Расписание;
		КонецЕсли;
		
		Задание.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает уникальный идентификатор регламентного задания.
//  Перед вызовом требуется иметь право администрирования или УстановитьПривилегированныйРежим.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - УИ объекта регламентного задания.
// 
Функция УникальныйИдентификатор(Знач Идентификатор) Экспорт
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Возврат Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Возврат Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	//Если ОбщегоНазначения.РазделениеВключено() Тогда
	Если Ложь Тогда
		
		ПараметрыЗадания = Новый Структура;
		
		ИдентификаторТипЗнч = ТипЗнч(Идентификатор);
		
		Если ИдентификаторТипЗнч = Тип("ОбъектМетаданных") Тогда
			ИмяМетода = Идентификатор.ИмяМетода;
			ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетода);
		ИначеЕсли ИдентификаторТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Возврат Идентификатор.Идентификатор.УникальныйИдентификатор();
		//ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ИдентификаторТипЗнч) Тогда
		//	Возврат Идентификатор.УникальныйИдентификатор();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		//МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		//ОбластьДанных = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		//ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
		
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		//	МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
		//	СписокЗаданий = МодульОчередьЗаданий.ПолучитьЗадания(ПараметрыЗадания);
		//	Для Каждого Задание Из СписокЗаданий Цикл
		//		Возврат Задание.Идентификатор.УникальныйИдентификатор();
		//	КонецЦикла;
		//КонецЕсли;
	Иначе
		Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И Идентификатор.Предопределенное Тогда
			Возврат РегламентныеЗадания.НайтиПредопределенное(Идентификатор).УникальныйИдентификатор;
		ИначеЕсли ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") И НЕ Идентификатор.Предопределенное Тогда
			СписокЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Идентификатор));
			Для каждого РегламентноеЗадание Из СписокЗаданий Цикл
				Возврат РегламентноеЗадание.УникальныйИдентификатор;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет заполнение расписания
//
Функция РасписаниеЗадано(Расписание) Экспорт
	Возврат рдв_РегламентныеЗаданияКлиентСервер.РасписаниеЗадано(Расписание);
КонецФункции

// Создает расписание задания с коротким периодом (< 1 минуты),
// с циклом внутри процедуры заданияи ограниченным временнам жизни.
//
Функция РасписаниеЧастоПовторяемогоЗадания(Знач ПериодЗаданияСек, Знач ВремяЖизниЗаданияМин) Экспорт
	Возврат рдв_РегламентныеЗаданияКлиентСервер.РасписаниеЧастоПовторяемогоЗадания(
		ПериодЗаданияСек, ВремяЖизниЗаданияМин);
КонецФункции

// Простое расписание периодического задания.
//
Функция ПростоеРасписание(ПериодЗапускаСек, ИнтервалЗавершенияСек = 0) Экспорт
	Возврат рдв_РегламентныеЗаданияКлиентСервер.ПростоеРасписание(ПериодЗапускаСек, ИнтервалЗавершенияСек); 
КонецФункции

Процедура СоздатьСлужебногоПользователяЕслиНеСуществует(ИмяПользователя, ИмяРегламента, ПараметрыРегламента = Неопределено) Экспорт
	Если Не ПустаяСтрока(ИмяПользователя)
		И ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя) = Неопределено Тогда
		СоздатьСлужебногоПользователя(ИмяПользователя, ИмяРегламента, ПараметрыРегламента);
		Если ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя) = Неопределено Тогда
			ВызватьИсключение ОписаниеОшибкиНеНайденПользовательРегламентногоЗадания(ИмяРегламента, ИмяПользователя);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
	
// Создает служебного пользователя в ИБ для запуска заданий регламента.
//
// Параметры:
//   ИмяПользователя     - Строка - имя пользователя регламентного задания.   
//   Регламент           - ОбъектМетаданных - регламентное задание конфигурации.
//   ПараметрыРегламента - Массив - массив параметров регламентного задания,
//                         может использоваться для настройки свойств пользователя.
//
Процедура СоздатьСлужебногоПользователя(ИмяПользователя, ИмяРегламента, ПараметрыРегламента = Неопределено) Экспорт
	
	ОписаниеПользователя = НовоеОписаниеСлужебногоПользователя(ИмяПользователя);
		
	СтандартнаяОбработка = Истина;
	рдв_РегламентныеЗаданияПереопределяемый.ПередСозданиемСлужебногоПользователя(
		ОписаниеПользователя, ИмяРегламента, ПараметрыРегламента, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Или ПустаяСтрока(ОписаниеПользователя.Имя) Тогда
		Возврат;		
	КонецЕсли;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Если ПользовательИБ = Неопределено Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.Имя = ОписаниеПользователя.Имя;
		ПользовательИБ.ПолноеИмя = ОписаниеПользователя.Имя;
		ПользовательИБ.АутентификацияСтандартная = ОписаниеПользователя.Аутентификация1С;
		ПользовательИБ.ПоказыватьВСпискеВыбора = ОписаниеПользователя.ПоказыватьВСпискеВыбора;
		
		Если Не ПустаяСтрока(ОписаниеПользователя.Пароль) Тогда
			ПользовательИБ.Пароль = ОписаниеПользователя.Пароль;
		КонецЕсли;
		
		Для Каждого Роль Из ОписаниеПользователя.Роли Цикл
			ПользовательИБ.Роли.Добавить(Роль);
		КонецЦикла;
		
		Если ОписаниеПользователя.ЗащитаОтОпасныхДействий Тогда
			ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
			ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Истина;
			//@skip-check property-not-writable
			ПользовательИБ.ЗащитаОтОпасныхДействий = ЗащитаОтОпасныхДействий; 
		КонецЕсли;
		
		ПользовательИБ.Записать();
		
	КонецЕсли;
	
	рдв_РегламентныеЗаданияПереопределяемый.ПриСозданииСлужебногоПользователя(
		ПользовательИБ, ИмяРегламента, ПараметрыРегламента);
		
КонецПроцедуры

// Выполняет проверку на соответсвие метаданных регламентного задания по идентификатору.
//
// Возвращаемое значение:
//  Булево - Истина, если проверка пройдена.
// 
Функция ПроверитьМетаданныеЗадания(Идентификатор, Знач МетаданныеРегламента) Экспорт
	Задание = Задание(Идентификатор);
	Если ТипЗнч(МетаданныеРегламента) = Тип("Строка") Тогда
		МетаданныеРегламента = Метаданные.РегламентныеЗадания[МетаданныеРегламента];
	КонецЕсли;
	Если Задание <> Неопределено Тогда
		Возврат Задание.Метаданные.Имя = МетаданныеРегламента.Имя;
	Иначе
		Возврат Истина;		
	КонецЕсли;	
КонецФункции

Функция РасписаниеРегламентаОбработки(ИмяРегламента, ИдентификаторРегламента) Экспорт
	
	РасписаниеПоУмолчанию = Новый РасписаниеРегламентногоЗадания;
	Результат = Новый Структура("Расписание, Использование", РасписаниеПоУмолчанию, Ложь);
	
	Если ЗначениеЗаполнено(ИдентификаторРегламента) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификатор", ИдентификаторРегламента);
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяРегламента]);
		УстановитьПривилегированныйРежим(Истина);
		МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		УстановитьПривилегированныйРежим(Ложь);
		Если МассивЗаданий.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, МассивЗаданий[0], "Расписание, Использование");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОписанияОшибок

Функция ОписаниеОшибкиНеНайденПользовательРегламентногоЗадания(ИмяРегламента, ИмяПользователя)
	ТекстОшибки = НСтр("ru = 'Не найден пользователь ""%1"" для запуска  регламентного задания ""%2"".'");
	Возврат СтрШаблон(ТекстОшибки, ИмяПользователя, ИмяРегламента); 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция НовоеОписаниеСлужебногоПользователя(ИмяПользователя)
	
	ОписаниеПользователя = Новый Структура;
	ОписаниеПользователя.Вставить("Имя", ИмяПользователя);
	ОписаниеПользователя.Вставить("Пароль", "");
	ОписаниеПользователя.Вставить("Аутентификация1С", Истина);
	ОписаниеПользователя.Вставить("Роли", Новый Массив);
	ОписаниеПользователя.Вставить("ЗащитаОтОпасныхДействий", Ложь);
	ОписаниеПользователя.Вставить("ПоказыватьВСпискеВыбора", Ложь);
	
	ОписаниеПользователя.Пароль = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого Роль Из Метаданные.ОсновныеРоли Цикл
		ОписаниеПользователя.Роли.Добавить(Роль);
	КонецЦикла;
	
	Возврат ОписаниеПользователя;

КонецФункции

Функция ЗаполнитьПаузуПовтораРасписания(Расписание, ПаузаПовтора, ПроверятьЗаполнение = Ложь) Экспорт
	
	Если Не ПроверятьЗаполнение
		Или Не ЗначениеЗаполнено(Расписание.ПаузаПовтора) ТОгда
		Расписание.ПаузаПовтора = ПаузаПовтора;
	КонецЕсли;

	Если Расписание.ДетальныеРасписанияДня.Количество() > 0 Тогда  
		Для каждого ДетальнаяЗапись Из Расписание.ДетальныеРасписанияДня Цикл
			Если Не ПроверятьЗаполнение
				Или Не ЗначениеЗаполнено(ДетальнаяЗапись.ПаузаПовтора) Тогда
				ДетальнаяЗапись.ПаузаПовтора = ПаузаПовтора;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
	Возврат Расписание;
	
КонецФункции

#КонецОбласти
