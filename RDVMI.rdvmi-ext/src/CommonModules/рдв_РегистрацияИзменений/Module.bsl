// Обработчик подписки на событие рдв_РегистрацияИзменений
//
Процедура рдв_РегистрацияИзмененийПриЗаписи(Источник, Отказ) Экспорт

    ЗарегистрироватьИзменения(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие рдв_РегистрацияИзмененийНабораЗаписей
//
Процедура рдв_РегистрацияИзмененийНабораЗаписейПриЗаписи(Источник, Отказ, Замещение) Экспорт

    ЗарегистрироватьИзменения(Источник);

КонецПроцедуры

// Регистрирует изменения объекта к обмену.
//
// Параметры:
//  Источник - СправочникОбъект, СправочникСсылка, ДокументСсылка, ДокументОбъект, РегистрСведенийНаборЗаписей, РегистрНакопленийНаборЗаписей - данные регистрируемый к обмену.
//  ИдентификаторСобытия - Строка - 
//  ВнешниеСистемы - Массив из СправочникСсылка.рдв_ВнешниеСистемы, Неопределено - системы к регистрации
//  ИдентификаторСообщения - Строка -
//
Процедура ЗарегистрироватьИзменения(Источник, ИдентификаторСобытия = Неопределено, ВнешниеСистемы = Неопределено
																	, ИдентификаторСообщения = Неопределено) Экспорт

	Правила = рдв_РегистрацияИмененийПовтИсп.ИнициализироватьПравилаРегистрации();
	ПравилаРегистрации = Правила.Скопировать();
	МетаданныеИсточника = Источник.Метаданные();
	СтрокиПравил = ПравилаРегистрации.НайтиСтроки(Новый Структура("МетаданныеОбъекта", МетаданныеИсточника));
	Для Каждого ПравилоРегистрации Из СтрокиПравил Цикл
		
		Если НЕ ВнешниеСистемы = Неопределено
			И ВнешниеСистемы.Найти(ПравилоРегистрации.ВнешняяСистема) = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		ВыгружаемыйОбъект = ВыгружаемыйОбъект(Источник);
		
		ВидСообщения = ВидСообщения(ПравилоРегистрации.ВнешняяСистема, ВыгружаемыйОбъект);
			
		ПравилоРегистрации.ВидСообщения = ВидСообщения;
		
		РегистрыСведений.рдв_РегистрацияИзменений.ЗарегистрироватьИзменениеОбъекта(ВыгружаемыйОбъект, 
																					ПравилоРегистрации, 
																					ИдентификаторСобытия, 
																					ИдентификаторСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПоПравилу(Источник, ПравилоРегистрации, ИдентификаторСобытия = Неопределено,
															 ИдентификаторСообщения = Неопределено) Экспорт

	ВыгружаемыйОбъект = ВыгружаемыйОбъект(Источник);
		
	РегистрыСведений.рдв_РегистрацияИзменений.ЗарегистрироватьИзменениеОбъекта(ВыгружаемыйОбъект, ПравилоРегистрации,
																		ИдентификаторСобытия, ИдентификаторСообщения);
	
КонецПроцедуры

Процедура ЗарегистрироватьПодтверждениеПолучения(ВнешняяСистема, АдресМетода, ВыгружаемыйОбъект, МетаданныеСообщения) Экспорт
	
	ИдентификаторСообщения = МетаданныеСообщения.id;
	ИдентификаторСобытия = МетаданныеСообщения.eventid;
	Получатель = МетаданныеСообщения.baseid;
	
	ИмяВидаСообщения = СтрШаблон("%1log", Получатель);
	ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.ПолучитьВидСообщения(ИмяВидаСообщения);
	
	ПравилоРегистрации = Новый Структура;
	ПравилоРегистрации.Вставить("ВнешняяСистема", ВнешняяСистема);
	ПравилоРегистрации.Вставить("АдресМетода", АдресМетода);
	ПравилоРегистрации.Вставить("ВидСообщения", ВидСообщения);
	РегистрыСведений.рдв_РегистрацияИзменений.ЗарегистрироватьИзменениеОбъекта(ВыгружаемыйОбъект, ПравилоРегистрации
																								, ИдентификаторСобытия);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеДиагностики(ВнешняяСистема, АдресМетода, ВыгружаемыйОбъект) Экспорт
	
	//ИдентификаторСообщения = МетаданныеСообщения.id;
	//ИдентификаторСобытия = МетаданныеСообщения.eventid;
	//Получатель = МетаданныеСообщения.baseid;
	
	ИмяВидаСообщения = "ping";
	ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.ПолучитьВидСообщения(ИмяВидаСообщения);
	
	ПравилоРегистрации = Новый Структура;
	ПравилоРегистрации.Вставить("ВнешняяСистема", ВнешняяСистема);
	ПравилоРегистрации.Вставить("АдресМетода", АдресМетода);
	ПравилоРегистрации.Вставить("ВидСообщения", ВидСообщения);
	РегистрыСведений.рдв_РегистрацияИзменений.ЗарегистрироватьИзменениеОбъекта(ВыгружаемыйОбъект, ПравилоРегистрации);
	
КонецПроцедуры

Функция ВыгружаемыйОбъект(Источник)
	
	ВыгружаемыйОбъект = Справочники.рдв_ВыгружаемыеОбъекты.СоздатьОбновитьВыгружаемыйОбъект(Источник);
	
	Возврат ВыгружаемыйОбъект;
	
КонецФункции

Функция ВидСообщения(ВнешняяСистема, ВыгружаемыйОбъект)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, "Тип,СсылкаНаОбъект,ОтборНабораЗаписей
																				|,ИдентификаторДанных");
	
	ИмяРегистраХеша = Метаданные.РегистрыСведений.рдв_ХешиСообщенийИнтеграции.ПолноеИмя();
	ЭтоРегистрХеши = Ложь;
	
	ИсточникМаршрута = Неопределено;
	Если Реквизиты.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка Тогда
		ИсточникМаршрута = Реквизиты.СсылкаНаОбъект;
	ИначеЕсли Реквизиты.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей 
		И СтрСравнить(Реквизиты.ИдентификаторДанных, ИмяРегистраХеша) = 0 Тогда
		
		ТаблицаОтбора = Реквизиты.ОтборНабораЗаписей.Выгрузить();
		СтрокаОбъект = ТаблицаОтбора.Найти("Объект", "Имя");
		Если СтрокаОбъект = Неопределено 
			ИЛИ СтрокаОбъект.Значение = Неопределено Тогда
			ИсточникМаршрута = ВыгружаемыйОбъект;
		Иначе
			ИсточникМаршрута = СтрокаОбъект.Значение;
		КонецЕсли;
		
		ЭтоРегистрХеши = Истина;
		
	Иначе
		
		ИсточникМаршрута = ВыгружаемыйОбъект;
			
	КонецЕсли;
	
	МаршрутСообщения = рдв_РегистрацияИзмененийПереопределяемый.МаршрутСообщения(ИсточникМаршрута, ВнешняяСистема);
	
	Если ЭтоРегистрХеши Тогда
		МаршрутСообщения = СтрШаблон("%1.Хеш", МаршрутСообщения);
	КонецЕсли;
		
	ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.ПолучитьВидСообщения(МаршрутСообщения);
	
	Возврат ВидСообщения;
	
КонецФункции

Функция АдресМетода(ВнешняяСистема, ВыгружаемыйОбъект = Неопределено) Экспорт

	АдресМетода = "exchange";
	ТипВнешнейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешняяСистема, "Тип");
	Если ТипВнешнейСистемы = Перечисления.рдв_ТипыВнешнихСистем.HTTPСервис И
		ВнешняяСистема = рдв_МониторингДанных.ВнешняяСистемаМониторинга() Тогда
		АдресМетода = "";
	КонецЕсли;
	Возврат АдресМетода;
	
КонецФункции

