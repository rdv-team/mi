#Область ПрограмныйИнтерфейс

Функция ПрочитатьПолеДанных(Данные, ИмяЭлемента, ТипЭлемента = Неопределено, Обязательный = Ложь, СостояниеЧтения = Неопределено) Экспорт
	
	Возврат ПолучитьЭлементДанных(Данные, ИмяЭлемента, ТипЭлемента, Обязательный, Обязательный, СостояниеЧтения);
	
КонецФункции

Функция ПрочитатьСуществующееПолеДанных(Данные, ИмяЭлемента, ТипЭлемента = Неопределено, Обязательный = Ложь, СостояниеЧтения = Неопределено) Экспорт
	
	Возврат ПолучитьЭлементДанных(Данные, ИмяЭлемента, ТипЭлемента, Истина, Обязательный, СостояниеЧтения);
	
КонецФункции

#Область СостояниеЧтения

Функция НовоеСостояниеЧтения(СостояниеЧтенияРодителя = Неопределено) Экспорт
	СостояниеЧтения = Новый Структура("ЭтоСостояниеЧтения");
	
	СостояниеЧтения.Вставить("ЕстьОшибки", Ложь);
	СостояниеЧтения.Вставить("Ошибка", "");
	СостояниеЧтения.Вставить("Ошибки", Новый Массив());
	
	ПутьКЭлементу = Новый ТаблицаЗначений();
	ПутьКЭлементу.Колонки.Добавить("ИмяЭлемента");
	ПутьКЭлементу.Колонки.Добавить("ИндексМассива");
	
	// По умолчанию пустой путь элемента который разбираем
	Строка = ПутьКЭлементу.Добавить();
	Строка.ИмяЭлемента = "";
	
	СостояниеЧтения.Вставить("ПутьКЭлементу", ПутьКЭлементу);
	
	Если ЗначениеЗаполнено(СостояниеЧтенияРодителя) Тогда
		Если ТипЗнч(СостояниеЧтенияРодителя) = Тип("Структура") И СостояниеЧтенияРодителя.Свойство("ЭтоСостояниеЧтения") Тогда
			Строка.ИмяЭлемента = ПрефиксПутиКЭлементу(СостояниеЧтенияРодителя);
		Иначе
			Строка.ИмяЭлемента = Строка(СостояниеЧтенияРодителя);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЧтения;
КонецФункции

Функция НовоеСостояниеЧтенияТиповыхДанных() Экспорт
	
	СостояниеЧтения = НовоеСостояниеЧтения();
	УстановитьТекущийПуть(СостояниеЧтения, "data");
	
	Возврат СостояниеЧтения;
	
КонецФункции

Функция НовоеСостояниеЧтенияТиповыхОшибок() Экспорт
	
	СостояниеЧтения = НовоеСостояниеЧтения();
	УстановитьТекущийПуть(СостояниеЧтения, "errors");
	
	Возврат СостояниеЧтения;
	
КонецФункции

Процедура ДобавитьОшибку(СостояниеЧтения, Ошибка, Знач ДополнительныйПрефикс = "") Экспорт
	Если ПустаяСтрока(Ошибка) Тогда
		Ошибка = НСтр("ru = 'Ошибка при разборе JSON'");
	КонецЕсли;
	
	Префикс = ПрефиксПутиКЭлементу(СостояниеЧтения, ДополнительныйПрефикс);
	Если ЗначениеЗаполнено(Префикс) Тогда
		Ошибка = Префикс + ": " + Ошибка;
	КонецЕсли;
	
	СостояниеЧтения.Ошибки.Добавить(Ошибка);
	СостояниеЧтения.Ошибка = СтрСоединить(СостояниеЧтения.Ошибки, "
	|");
	СостояниеЧтения.ЕстьОшибки = Истина;
КонецПроцедуры

Процедура УстановитьТекущийПуть(СостояниеЧтения, Путь) Экспорт
	
	СостояниеЧтения.ПутьКЭлементу.Очистить();
	ДобавитьЭлементПути(СостояниеЧтения, Путь);
	
КонецПроцедуры

Процедура ДобавитьЭлементПути(СостояниеЧтения, Путь) Экспорт
	
	Строка = СостояниеЧтения.ПутьКЭлементу.Добавить();
	Строка.ИмяЭлемента = Путь;
	
КонецПроцедуры

Процедура УдалитьЭлементПути(СостояниеЧтения) Экспорт
	
	ПоследнийИндекс = СостояниеЧтения.ПутьКЭлементу.Количество() - 1;
	Если ПоследнийИндекс >= 0 Тогда
		СостояниеЧтения.ПутьКЭлементу.Удалить(ПоследнийИндекс);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИндекс(СостояниеЧтения, Индекс) Экспорт
	
	ПоследнийИндекс = СостояниеЧтения.ПутьКЭлементу.Количество() - 1;
	Если ПоследнийИндекс >= 0 Тогда
		Строка = СостояниеЧтения.ПутьКЭлементу[ПоследнийИндекс];
		Строка.ИндексМассива = Индекс;
	КонецЕсли;
	
КонецПроцедуры

Процедура УвеличитьИндекс(СостояниеЧтения) Экспорт
	
	ПоследнийИндекс = СостояниеЧтения.ПутьКЭлементу.Количество() - 1;
	Если ПоследнийИндекс >= 0 Тогда
		Строка = СостояниеЧтения.ПутьКЭлементу[ПоследнийИндекс];
		Индекс = Строка.ИндексМассива;
		Если Индекс = Неопределено Тогда
			Индекс = 0;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
		Строка.ИндексМассива = Индекс;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазборДанных

Функция ПрочитатьТекстСообщения(СтрокаJSON) Экспорт
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(СтрокаJSON);
	Структура = ПрочитатьJSON(Чтение);
	Возврат Структура;
	
КонецФункции

Функция ПолучитьЭлементДанных(
	Данные,
	ИмяЭлемента,
	ТипЭлемента = Неопределено,
	ПроверятьНаличие = Ложь,
	ПроверятьЗаполнение = Ложь,
	СостояниеЧтения = Неопределено)
	
	Если СостояниеЧтения = Неопределено Тогда
		СостояниеЧтения = НовоеСостояниеЧтения();
	КонецЕсли;
	
	Если ТипЗнч(ТипЭлемента) = Тип("Строка") Тогда
		ТипЭлемента = Тип(ТипЭлемента);
	КонецЕсли;
	
	// Проверка существования поля
	
	ЭлементСуществует = Ложь;
	ЗначениеЭлемента = ПолучитьЗначениеЭлементаДанныхИзСтруктуры(Данные, ИмяЭлемента, ЭлементСуществует);
	
	Если Не ЭлементСуществует И ПроверятьНаличие Тогда
		Ошибка = НСтр("ru = 'Отсутствует поле %1.'");
		Ошибка = СтрШаблон(Ошибка, ИмяЭлемента);
		ДобавитьОшибку(СостояниеЧтения, Ошибка);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЭлементСуществует Тогда // Преобразуем пустое значений в нужный тип
		ЗначениеЭлемента = Неопределено;
		
		Если ТипЭлемента <> Неопределено Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(ТипЭлемента);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			ЗначениеЭлемента = ОписаниеТипа.ПривестиЗначение(ЗначениеЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("Дата") И ТипЗнч(ЗначениеЭлемента) = Тип("Строка") Тогда
		// Преобразование
		Попытка
			ЗначениеЭлементаСтрока = ЗначениеЭлемента;
			ЗначениеЭлемента = ПрочитатьДатуJSON(ЗначениеЭлемента, ФорматДатыJSON.ISO);
		Исключение
			Ошибка = НСтр("ru = 'Ошибка преобразования в дату значения ""%2"" в поле %1.'");
			Ошибка = СтрШаблон(Ошибка, ИмяЭлемента, ЗначениеЭлементаСтрока);
			ДобавитьОшибку(СостояниеЧтения, Ошибка);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ПроверятьЗаполнение И (ТипЗнч(ЗначениеЭлемента) = Тип("Булево")) Тогда // Булево невозможно проверить на заполнение
		ПроверятьЗаполнение = Ложь;
	КонецЕсли;
	
	Если ПроверятьЗаполнение И Не ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Ошибка = НСтр("ru = 'Поле %1 не заполнено.'");
		Ошибка = СтрШаблон(Ошибка, ИмяЭлемента);
		ДобавитьОшибку(СостояниеЧтения, Ошибка);
		Возврат Неопределено;
	КонецЕсли;
	
	Если (ТипЭлемента <> Неопределено) И (ТипЭлемента <> ТипЗнч(ЗначениеЭлемента)) Тогда
		Ошибка = НСтр("ru = 'Поле %1 неверного типа. Ожидаем тип %2.'");
		Ошибка = СтрШаблон(Ошибка, ИмяЭлемента, ТипЭлемента);
		ДобавитьОшибку(СостояниеЧтения, Ошибка);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеЭлемента;
	
КонецФункции

Функция ПолучитьЗначениеЭлементаДанныхИзСтруктуры(Данные, ПутьКДанным, ЭлементСуществует)
	Перем Значение;
	
	Если Данные = Неопределено Тогда
		Значение = Неопределено;
		ЭлементСуществует = Ложь;
		Возврат Значение;
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		Значение = Данные;
		ЭлементСуществует = Истина;
		Возврат Значение;
	КонецЕсли;
	
	ПозицияТочки = Найти(ПутьКДанным, ".");
	
	Если ПозицияТочки > 0 Тогда
		//	Рекурсивный вызов (получение подчиненного контейнера данных). 
		ИмяЭлемента = Лев(ПутьКДанным, ПозицияТочки - 1);
		ПутьКДанным = Сред(ПутьКДанным, ПозицияТочки + 1);
		
		ПодчиненныеДанные = ПрочитатьПолеДанных(Данные, ИмяЭлемента, "Структура");
		Возврат ПолучитьЗначениеЭлементаДанныхИзСтруктуры(ПодчиненныеДанные, ПутьКДанным, ЭлементСуществует);
		
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Структура") Или ТипЗнч(Данные) = Тип("ФиксированнаяСтруктура") Тогда
		ЭлементСуществует = Данные.Свойство(ПутьКДанным, Значение);
	ИначеЕсли ТипЗнч(Данные) = Тип("Соответствие") Или ТипЗнч(Данные) = Тип("ФиксированноеСоответствие") Тогда
		Значение = Данные.Получить(ПутьКДанным);
		ЭлементСуществует = (Значение <> Неопределено);
	Иначе
		Значение = Неопределено;
		ЭлементСуществует = Ложь;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область СостояниеЧтения

Функция ПрефиксПутиКЭлементу(СостояниеЧтения, ДополнительныйПрефикс = "")
	Строки = Новый Массив();
	Для Каждого Строка Из СостояниеЧтения.ПутьКЭлементу Цикл
		Если Строка.ИндексМассива = Неопределено Тогда
			Строки.Добавить(Строка.ИмяЭлемента);
		Иначе
			Строки.Добавить(Строка.ИмяЭлемента + "[" + Формат(Строка.ИндексМассива, "ЧН=; ЧГ=") + "]");
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ДополнительныйПрефикс) Тогда
		Строки.Добавить(ДополнительныйПрефикс);
	КонецЕсли;
	
	Возврат СтрСоединить(Строки, ".");
КонецФункции

#КонецОбласти

#КонецОбласти
