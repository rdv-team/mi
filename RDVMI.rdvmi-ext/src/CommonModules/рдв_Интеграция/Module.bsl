
Процедура РегламентЗапускаИнтеграцииОтправка(Знач ВнешняяСистема) Экспорт
	
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяСистемаСсылка = Справочники.рдв_ВнешниеСистемы.ВнешняяСистемаПоИмени(ВнешняяСистема);
	
	Если ТипЗнч(ВнешняяСистемаСсылка) <> Тип("СправочникСсылка.рдв_ВнешниеСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияОтправка(ВнешняяСистемаСсылка);
	
КонецПроцедуры

Процедура РегламентЗапускаИнтеграцииПолучение(Знач ВнешняяСистема) Экспорт
	
	Если Не ЗначениеЗаполнено(ВнешняяСистема) Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяСистемаСсылка = Справочники.рдв_ВнешниеСистемы.ВнешняяСистемаПоИмени(ВнешняяСистема);
	
	Если ТипЗнч(ВнешняяСистемаСсылка) <> Тип("СправочникСсылка.рдв_ВнешниеСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПолучение(ВнешняяСистемаСсылка);
	
КонецПроцедуры

Процедура ИнтеграцияОтправка(ВнешняяСистема, ИдентификаторСообщения = Неопределено) Экспорт

	ТипВнещнейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешняяСистема, "Тип");
	Если ТипВнещнейСистемы = ПредопределенноеЗначение("Перечисление.рдв_ТипыВнешнихСистем.HTTPСервис") Тогда
		ИнтеграцияHTTPСервисОтправка(ВнешняяСистема, ИдентификаторСообщения);
	ИначеЕсли ТипВнещнейСистемы = ПредопределенноеЗначение("Перечисление.рдв_ТипыВнешнихСистем.RMQ") Тогда
		ИнтеграцияRMQОтправка(ВнешняяСистема, ИдентификаторСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтеграцияПолучение(ВнешняяСистема) Экспорт

	ТипВнещнейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешняяСистема, "Тип");
	Если ТипВнещнейСистемы = ПредопределенноеЗначение("Перечисление.рдв_ТипыВнешнихСистем.RMQ") Тогда
		ИнтеграцияRMQПолучение(ВнешняяСистема);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтеграцияHTTPСервисОтправка(ВнешняяСистема, ИдентификаторСообщения = Неопределено) Экспорт

    ОтправкаСообщенийHTTPСервис(ВнешняяСистема, ИдентификаторСообщения);
	
КонецПроцедуры

Процедура ОтправкаСообщенийHTTPСервис(ВнешняяСистема, ИдентификаторСообщения = Неопределено)
	
	РезультатЗапроса = ВыполнитьЗапросИзменений(ВнешняяСистема, ИдентификаторСообщения);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	ВыборкаПоВнешнейСистеме = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВнешнейСистеме.Следующий() Цикл
		ВыборкаПоАдресу = ВыборкаПоВнешнейСистеме.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАдресу.Следующий() Цикл

			Выборка = ВыборкаПоАдресу.Выбрать();
			Пока Выборка.Следующий() Цикл
	            ПараметрыСообщения = ПараметрыСообщения(Выборка);
				Результат = рдв_РаботаССервисами.ВыгрузитьСообщение(ПараметрыСообщения);
				ОбновитьДанныеРегистрации(Выборка, Результат);						
			КонецЦикла;
	КонецЦикла;
 	КонецЦикла;

КонецПроцедуры

Процедура ИнтеграцияRMQОтправка(ВнешняяСистема, ИдентификаторСообщения = Неопределено) Экспорт
	
	Если ИдентификаторСообщения = Неопределено Тогда
		ДесятьМинут = 60000;
		ВремяЗавершения = ТекущаяУниверсальнаяДатаВМиллисекундах() + ДесятьМинут;
		ИнтервалОжидания = 3;
		Пока ВремяЗавершения - ТекущаяУниверсальнаяДатаВМиллисекундах() > 0 Цикл
			ОтправкаСообщенийRMQ(ВнешняяСистема, ИдентификаторСообщения);				
			рдв_Пауза.Пауза(ИнтервалОжидания);
		КонецЦикла;
	Иначе
		ОтправкаСообщенийRMQ(ВнешняяСистема, ИдентификаторСообщения);				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаСообщенийRMQ(ВнешняяСистема, ИдентификаторСообщения = Неопределено) Экспорт
	
	РезультатЗапроса = ВыполнитьЗапросИзменений(ВнешняяСистема, ИдентификаторСообщения);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаПоВнешнейСистеме = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВнешнейСистеме.Следующий() Цикл
		ВыборкаПоАдресу = ВыборкаПоВнешнейСистеме.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАдресу.Следующий() Цикл
			Клиент = рдв_РаботаСRMQ.ИнициализироватьКлиентПодключения(ВнешняяСистема, ВыборкаПоАдресу);
			Выборка = ВыборкаПоАдресу.Выбрать();
			Пока Выборка.Следующий() Цикл
	            ПараметрыСообщения = ПараметрыСообщения(Выборка);
				Результат = рдв_РаботаСRMQ.ВыгрузитьСообщение(Клиент, ПараметрыСообщения);
				ОбновитьДанныеРегистрации(Выборка, Результат);						
			КонецЦикла;
			Клиент.ЗавершитьСоединение();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнтеграцияRMQПолучение(ВнешняяСистема) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	рдв_ВнешниеСистемы.АдресСервиса КАК ВиртуальныйХост,
	|	рдв_ВнешниеСистемы.Сервер КАК Адрес,
	|	рдв_ВнешниеСистемы.Порт КАК Порт,
	|	рдв_ВнешниеСистемы.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
	|	рдв_ВнешниеСистемы.ОчередьОбмена КАК ОчередьОбмена
	|ИЗ
	|	Справочник.рдв_ВнешниеСистемы КАК рдв_ВнешниеСистемы
	|ГДЕ
	|	рдв_ВнешниеСистемы.Ссылка = &Ссылка
	|	И рдв_ВнешниеСистемы.ОчередьОбмена <> """"";
	
	Запрос.УстановитьПараметр("Ссылка", ВнешняяСистема);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ПараметрыПодключения = рдв_РаботаСRMQ.ПустыеПараметрыПодключения();
	
	ДанныеАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВнешняяСистема, "Пользователь, Пароль");
	ПараметрыПодключения.Пароль = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пароль), ДанныеАвторизации.Пароль, "");
	ПараметрыПодключения.Пользователь = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пользователь), ДанныеАвторизации.Пользователь, "");

	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
	Клиент = рдв_РаботаСRMQ.СоздатьКлиентПодключения(ПараметрыПодключения);
		
	Потребитель = Клиент.НачатьЧтение(Выборка.ОчередьОбмена, , Ложь);

	Результат = Неопределено;
	СчетчикСообщений = 0;
	ВыполнитьПодтверждение = Ложь;
	ПрерватьЦикл = Ложь;
	Таймаут = 60000;
	
	Пока Клиент.ПолучитьСообщение(Результат, Таймаут, ВыполнитьПодтверждение) Цикл
		
		ДанныеЗапроса = рдв_РаботаСRMQ.ЗаполнитьДанныеЗапросаПолучение(Выборка, ПараметрыПодключения, Результат);
		ДанныеЗапроса.Вставить("Тело", Результат.ТекстСообщения);
		
		ДанныеОтвета = рдв_РаботаСRMQ.ЗаполнитьДанныеОтветаПолучение(Результат);
		
		ДанныеСервиса = рдв_РаботаСRMQ.ЗаполнитьДанныеСервисаПолучение(Результат);
		
		рдв_РаботаССервисами.ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, ДанныеОтвета, ДанныеСервиса);
		
		Клиент.ПодтвердитьСообщение(Результат.ТегСообщения, 1);
		
	КонецЦикла;
	
	Клиент.ЗакончитьЧтение(Потребитель);
	
	
КонецПроцедуры

Функция ВыполнитьЗапросИзменений(ВнешняяСистема, ИдентификаторСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	рдв_РегистрацияИзменений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	рдв_РегистрацияИзменений.ВыгружаемыйОбъект КАК ВыгружаемыйОбъект,
	|	рдв_РегистрацияИзменений.ВнешняяСистема КАК ВнешняяСистема,
	|	рдв_РегистрацияИзменений.АдресМетода КАК АдресМетода,
	|	рдв_РегистрацияИзменений.АдресМетода КАК ТочкаОбмена,
	|	рдв_РегистрацияИзменений.Интерфейс КАК Интерфейс,
	|	рдв_РегистрацияИзменений.ВидСообщения КАК ВидСообщения,
	|	рдв_РегистрацияИзменений.Интерфейс.ИмяИнтерфейса КАК ИмяИнтерфейса,
	|	рдв_РегистрацияИзменений.Интерфейс.Наименование КАК ПредставлениеИнтерфейса,
	|	рдв_РегистрацияИзменений.ВыгружаемыйОбъект.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	рдв_РегистрацияИзменений.ВидСообщения.ИмяВидаСообщения КАК ИмяВидаСообщения,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.АдресСервиса КАК ВиртуальныйХост,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.АдресСервиса КАК АдресСервиса,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.Сервер КАК Адрес,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.Сервер КАК Сервер,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.Порт КАК Порт,
	|	рдв_РегистрацияИзменений.ВнешняяСистема.ЗащищенноеСоединение КАК ЗащищенноеСоединение,
	|	рдв_РегистрацияИзменений.ИдентификаторСобытия КАК ИдентификаторСобытия
	|ИЗ
	|	РегистрСведений.рдв_РегистрацияИзменений КАК рдв_РегистрацияИзменений
	|ГДЕ
	|	рдв_РегистрацияИзменений.ВнешняяСистема = &ВнешняяСистема
	|	И &УсловиеПоИдентификатору
	|
	|УПОРЯДОЧИТЬ ПО
	|	рдв_РегистрацияИзменений.ДатаРегистрацииВМиллисекундах
	|ИТОГИ ПО
	|	ВнешняяСистема,
	|	АдресМетода";
	
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ТипЗнч(ИдентификаторСообщения) = Тип("Массив") Тогда
		ТекстУсловия = "рдв_РегистрацияИзменений.ИдентификаторСообщения В (&ИдентификаторСообщения)";
	Иначе
		ТекстУсловия = "рдв_РегистрацияИзменений.ИдентификаторСообщения = &ИдентификаторСообщения";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПараметрыСообщения(Выборка)

	ПараметрыСообщения = ПустыеПараметрыСообщения();	
	ЗаполнитьЗначенияСвойств(ПараметрыСообщения, Выборка);

	МассивОбъектов = Новый Массив;
	Если ЗначениеЗаполнено(Выборка.СсылкаНаОбъект) Тогда
		МассивОбъектов.Добавить(Выборка.СсылкаНаОбъект);
	КонецЕсли;
	
	ПараметрыСообщения.Вставить("МассивОбъектов", МассивОбъектов);
	ПараметрыСообщения.ТекстСообщения = СформироватьТекстСообщения(Выборка);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Функция ПустыеПараметрыСообщения()

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ВнешняяСистема");
	ПараметрыСообщения.Вставить("ВидСообщения");
	ПараметрыСообщения.Вставить("ИмяВидаСообщения");
	ПараметрыСообщения.Вставить("Интерфейс");
	ПараметрыСообщения.Вставить("СтандартнаяСтруктураЗапроса");
	ПараметрыСообщения.Вставить("МассивОбъектов");
	ПараметрыСообщения.Вставить("АдресСервиса");
	ПараметрыСообщения.Вставить("Сервер");
	ПараметрыСообщения.Вставить("АдресМетода");
	ПараметрыСообщения.Вставить("ВнешняяСистема");
	ПараметрыСообщения.Вставить("ТекстСообщения");
	ПараметрыСообщения.Вставить("ИдентификаторСообщения");
	ПараметрыСообщения.Вставить("ИдентификаторСобытия");
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Функция СформироватьТекстСообщения(Выборка)

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИдентификаторСообщения", Выборка.ИдентификаторСообщения);
	ПараметрыОбъекта.Вставить("ИдентификаторСобытия", Выборка.ИдентификаторСобытия);
	ПараметрыОбъекта.Вставить("ИмяИБ", рдв_МенеджерОбменаПереопределяемый.ИмяИБ()); 
	ТекстСообщения = рдв_ОбменДанными.ОбъектИБВСообщениеОбмена(Выборка.ВыгружаемыйОбъект, ПараметрыОбъекта);
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ОбновитьДанныеРегистрации(Выборка, Результат)

	Если Результат.ОшибкаТранспорта Тогда
		Ошибка = Перечисления.рдв_СтатусыРегистрацииИзменений.Ошибка;
		РегистрыСведений.рдв_РегистрацияИзменений.ОбновитьСтатусРегистрации(Выборка.ИдентификаторСообщения, Ошибка, Результат.СообщениеТранспорта);
	Иначе
		РегистрыСведений.рдв_РегистрацияИзменений.УдалитьРегистрацию(Выборка.ИдентификаторСообщения, Выборка.ВыгружаемыйОбъект);
	КонецЕсли;

КонецПроцедуры
