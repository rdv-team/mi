
#Область ПрограммныйИнтерфейс

// Модуль бизнес логики интеграции. На него будут перенаправлены все вызовы для бизнес логики решения.
// 
// Возвращаемое значение:
//  Неопределено, ОбщийМодуль, Произвольный - Модуль бизнес логики интеграции
Функция МодульПрикладнойЛогики() Экспорт
	
	Возврат рдв_ИнтеграцияПереопределяемый.МодульПрикладнойЛогикиИнтеграции();
	
КонецФункции

// Точка входа для регламентного запуска интеграции по отправке данных.
// Проверяет корректность переданной внешней системы и запускает процесс отправки.
//
// Параметры:
//  ВнешняяСистемаИмя - Строка - предопределенное наименование, значение реквизита рдв_Идентификатор
//
Процедура РегламентЗапускаИнтеграцииОтправка(Знач ВнешняяСистемаИмя) Экспорт
	
	Если Не ЗначениеЗаполнено(ВнешняяСистемаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рдв_ЗапускИнтеграцииОтправка);
	
	ВнешняяСистемаСсылка = Справочники.рдв_ВнешниеСистемы.Предопределенный(ВнешняяСистемаИмя);
	
	Если Не ЗначениеЗаполнено(ВнешняяСистемаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияОтправка(ВнешняяСистемаСсылка);
	
КонецПроцедуры

// Точка входа для регламентного запуска интеграции по получению данных.
// Проверяет корректность переданной внешней системы и запускает процесс получения.
//
// Параметры:
//  ВнешняяСистемаИмя - Строка - предопределенное наименование, значение реквизита рдв_Идентификатор
//
Процедура РегламентЗапускаИнтеграцииПолучение(Знач ВнешняяСистемаИмя) Экспорт
	
	Если Не ЗначениеЗаполнено(ВнешняяСистемаИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рдв_ЗапускИнтеграцииОтправка);
	
	ВнешняяСистемаСсылка = Справочники.рдв_ВнешниеСистемы.Предопределенный(ВнешняяСистемаИмя);
	
	Если Не ЗначениеЗаполнено(ВнешняяСистемаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	ИнтеграцияПолучение(ВнешняяСистемаСсылка, ДополнительныеПараметры);
	ДополнительныеПараметры = Неопределено;
	
КонецПроцедуры

Процедура РегламентФормированияИсходящихСообщений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	рдв_РегистрацияИзменений.ВнешняяСистема КАК ВнешняяСистема
	|ИЗ
	|	РегистрСведений.рдв_РегистрацияИзменений КАК рдв_РегистрацияИзменений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		рдв_Интеграция.СообщениеСформировать(Выборка.ВнешняяСистема);
	КонецЦикла;

КонецПроцедуры


// Маршрутизатор отправки данных в зависимости от типа внешней системы.
// Определяет тип внешней системы (HTTP сервис или RMQ и прочее) и вызывает соответствующий обработчик.
//
// Параметры:
//  ВнешняяСистема - СправочникСсылка.рдв_ВнешниеСистемы - Ссылка на внешнюю систему
//  ИдентификаторыСообщений - Неопределено, Массив - Идентификаторы сообщений для отправки
//
Процедура ИнтеграцияОтправка(ВнешняяСистема, ИдентификаторыСообщений = Неопределено) Экспорт
	
	ИменаРеквизитов = "Тип,ДержатьСоединениеОткрытым,ВремяОткрытогоСоединения,ОжидатьДоСледующейПорции";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ИменаРеквизитов);
	ТипВнешнейСистемы				= Реквизиты.Тип;
	ДержатьСоединениеОткрытым		= Реквизиты.ДержатьСоединениеОткрытым;
	ОжидатьДоСледующейПорцииСек		= Реквизиты.ОжидатьДоСледующейПорции;
	ВремяОткрытогоСоединенияМс		= Реквизиты.ВремяОткрытогоСоединения*1000;
	МодульИнтеграции = МодульИнтеграции(ТипВнешнейСистемы);
	
	ПараметрыСоединения = ПараметрыСоединения(ВнешняяСистема);
	ДополнительныеПараметры = Неопределено;
	Попытка
		Соединение = МодульИнтеграции.СоединениеОткрыть(ПараметрыСоединения, ДополнительныеПараметры); // HTTPСоединение, ОбработкаОбъект
	Исключение
		
		Событие = НСтр("ru ='Отправка сообщения.Не удалось установить соединение.'");
		Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие);
		ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
		
		Ошибка = СтрШаблон("Интеграция. %1 Причина: %2", Событие, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
	Попытка
	
		Если ИдентификаторыСообщений = Неопределено И ДержатьСоединениеОткрытым Тогда
			
			ВремяЗавершения = ТекущаяУниверсальнаяДатаВМиллисекундах() + ВремяОткрытогоСоединенияМс;
			Пока ВремяЗавершения - ТекущаяУниверсальнаяДатаВМиллисекундах() > 0 Цикл
				//@skip-check query-in-loop
				Отправка(Соединение, ПараметрыСоединения
						, ВнешняяСистема, ИдентификаторыСообщений
						, МодульИнтеграции
						, ДополнительныеПараметры);
						
				рдв_Пауза.Пауза(ОжидатьДоСледующейПорцииСек);
				
			КонецЦикла;
			
		Иначе
			
			Отправка(Соединение, ПараметрыСоединения
						, ВнешняяСистема, ИдентификаторыСообщений
						, МодульИнтеграции
						, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Исключение
		
		МодульИнтеграции.СоединениеЗакрыть(Соединение);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	МодульИнтеграции.СоединениеЗакрыть(Соединение);
	
КонецПроцедуры

// Маршрутизатор получения данных в зависимости от типа внешней системы.
// На текущий момент поддерживает только получение данных через RMQ.
//
// Параметры:
//  ВнешняяСистема - СправочникСсылка.рдв_ВнешниеСистемы - Ссылка на внешнюю систему
//  ДополнительныеПараметры - Структура - произвольный набор 
//
Процедура ИнтеграцияПолучение(ВнешняяСистема, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипВнешнейСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешняяСистема, "Тип");
	МодульИнтеграции = МодульИнтеграции(ТипВнешнейСистемы);
	
	ПараметрыСоединения = ПараметрыСоединения(ВнешняяСистема);
	ОтветСервиса = Новый_ОтветСервиса();
	Сообщение = Новый_Сообщение();
	
	Попытка
		
		Соединение = МодульИнтеграции.СоединениеОткрыть(ПараметрыСоединения, ДополнительныеПараметры);
		
		НачалоЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Пока МодульИнтеграции.ПолучитьСообщение(ПараметрыСоединения, Соединение, Сообщение, ОтветСервиса, ДополнительныеПараметры) Цикл
			
			ОкончаниеЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Сообщение.ДатаРегистрацииМс = ОкончаниеЗапроса;
			Сообщение.РазмерСообщения = СтрДлина(Сообщение.ТекстСообщения);
			
			КонтекстТранспорта = Новый_КонтекстТранспорта();
			ЗаполнитьЗначенияСвойств(КонтекстТранспорта, Сообщение);
			КонтекстТранспорта.ДатаСобытия		= ТекущаяДатаСеанса();
			КонтекстТранспорта.ДатаСобытияМс	= ТекущаяУниверсальнаяДатаВМиллисекундах();
			КонтекстТранспорта.Статус			= ОтветСервиса.Статус;
			КонтекстТранспорта.Контекст			= ОтветСервиса;
			КонтекстТранспорта.ДлительностьМс	= ОкончаниеЗапроса - НачалоЗапроса;
			
			ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.ПолучитьВидСообщения(Сообщение.ВидСообщения);
			ЗаписатьСообщениеИнтеграции_Входящее(ВидСообщения, ВнешняяСистема, Сообщение, КонтекстТранспорта);
			
			// TODO если не удалось подтвердить и это предусмотрено то откатить запись
			Попытка
				Подтверждено = МодульИнтеграции.ПодтвердитьПолучениеСообщения(Соединение
								, ПараметрыСоединения
								, Сообщение
								, ДополнительныеПараметры);
			Исключение
				
				Событие = НСтр("ru ='Получение сообщения.Подтверждение получения сообщения.'");
				Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие, Сообщение.ИдентификаторСообщения);
				ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
				
			КонецПопытки;
			
			НачалоЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
		КонецЦикла;
		
	Исключение
		
		МодульИнтеграции.СоединениеЗакрыть(Соединение);
		
		Событие = НСтр("ru ='Получение сообщения.'");
		Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие, Сообщение.ИдентификаторСообщения);
		ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
		
		Ошибка = СтрШаблон("Интеграция. %1 Причина: %2", Событие, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
	МодульИнтеграции.СоединениеЗакрыть(Соединение);
	
КонецПроцедуры

// Обертка для заполнения дополнительных параметров
//
// Параметры:
//  Параметры			- Структура - входящиеПараметры обработки
//  ИмяПараметра		- Строка - имя параметра для программного обращения
//  Заголовок		 	- Строка - заголовок параметра для данных формы
//  ТипПараметра		 - ОписаниеТипов - тип значения параметра
//  ЗначениеПоУмолчанию	 - Произвольный -
//  ДополнительныеПараметры	 - Структура - 
//
Процедура ИнтеграцияДобавитьОписаниеПараметра(Параметры, ИмяПараметра, Заголовок, ТипПараметра, ЗначениеПоУмолчанию
		, ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
		
	ЗначенияПараметра = Новый Структура;
	ЗначенияПараметра.Вставить("Тип"						, ТипПараметра);
	ЗначенияПараметра.Вставить("Заголовок"					, Заголовок);
	ЗначенияПараметра.Вставить("ЗначениеПоУмолчанию"		, ЗначениеПоУмолчанию);
	ЗначенияПараметра.Вставить("ДополнительныеПараметры"	, ДополнительныеПараметры);
	
	Параметры.Вставить(ИмяПараметра, ЗначенияПараметра);
		
КонецПроцедуры

// Формирует сообщение для отправки
// 
// Параметры:
//  ВнешняяСистема - СправочникСсылка.рдв_ВнешниеСистемы - Внешняя система
//  ИдентификаторыСообщений - Строка - Идентификатор сообщения
//
Процедура СообщениеСформировать(ВнешняяСистема, ИдентификаторыСообщений = Неопределено) Экспорт
	
	РезультатЗапроса = ВыполнитьЗапросИзменений(ВнешняяСистема, ИдентификаторыСообщений);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИндентификаторСообщения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ГотовыеСообщенияВыгружаемыхОбъктов = Новый ТаблицаЗначений;
	Пока ВыборкаИндентификаторСообщения.Следующий() Цикл
		
		Выборка = ВыборкаИндентификаторСообщения.Выбрать();
		
		МассивВыгружаемыхОбъектов = Новый Массив;
		ДанныеНаВыгрузку = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			//ЭтоУникальноеСообщениеВыборки = ЭтоУникальноеСообщениеВыборки(МассивВыгружаемыхОбъектов
			//															, ГотовыеСообщенияВыгружаемыхОбъктов, Выборка);
			//Если Не ЭтоУникальноеСообщениеВыборки Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Попытка
				СтандартныйЗапрос = рдв_ОбменДанными.ОбъектИБКДаннымВыгрузки(Выборка.ВыгружаемыйОбъект);
			Исключение
				Событие = НСтр("ru ='Новое сообщение.Формирование описания объекта сообщения.'");
				Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие, Выборка.ИдентификаторСообщения);
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке, Контекст);
				
				ОбновитьДанныеРегистрации(ВнешняяСистема, Выборка.ИдентификаторСообщения, ИнформацияОбОшибке);
				
				ВызватьИсключение;
			КонецПопытки;
			
			ДанныеНаВыгрузку.Добавить(СтандартныйЗапрос);
			
		КонецЦикла;
		
		Если ДанныеНаВыгрузку.Количество() > 0 Тогда
			
			Попытка
				Сообщение = НаполнитьСообщение(ДанныеНаВыгрузку, Выборка);
			Исключение
				Событие = НСтр("ru ='Новое сообщение.Формирование сообщения.'");
				Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие, Выборка.ИдентификаторСообщения);
				ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
				
				ОбновитьДанныеРегистрации(ВнешняяСистема, ВыборкаИндентификаторСообщения.ИдентификаторСообщения, ИнформацияОбОшибке());
				
				ВызватьИсключение;
			КонецПопытки;
		
			КонтекстТранспорта = Новый_КонтекстТранспорта();
			ЗаполнитьЗначенияСвойств(КонтекстТранспорта, Сообщение);
		
			НачатьТранзакцию();
			Попытка
				
				ЗаписатьСообщениеИнтеграции_Исходящее(Сообщение, КонтекстТранспорта, МассивВыгружаемыхОбъектов);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ОбновитьДанныеРегистрации(ВнешняяСистема, ВыборкаИндентификаторСообщения.ИдентификаторСообщения, ИнформацияОбОшибке());
				
				Событие = НСтр("ru ='Новое сообщение.Сохранение сообщения.'");
				Контекст = Новый_ЗаписатьОшибкуИнтеграции(Выборка.ВнешняяСистема, Событие, Выборка.ИдентификаторСообщения);
				ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
			
		ОбновитьДанныеРегистрации(ВнешняяСистема, ВыборкаИндентификаторСообщения.ИдентификаторСообщения, "");
			
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает полученное сообщение - сериализует в объекты базы
// 
// Параметры:
//  ИдентификаторСообщения - Строка
Процедура СообщениеОбработатьПолученное(ИдентификаторСообщения) Экспорт
	
	Сообщение = РегистрыСведений.рдв_СообщенияИнтеграции.Сообщение(ИдентификаторСообщения);
	
	Если Не Сообщение.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Входящее Тогда
		Возврат;
	КонецЕсли;

	ДанныеЗапроса = Сообщение.ДанныеСообщения.Получить();
	
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПрочитанноеСообщение = рдв_ОбменДанными.ПрочитатьТекстСообщения(ДанныеЗапроса);
	Исключение
		
		Событие = НСтр("ru ='Обработка входящего сообщения. Чтение JSON.'");
		Контекст = Новый_ЗаписатьОшибкуИнтеграции(Сообщение.ВнешняяСистема, Событие, Сообщение.ИдентификаторСообщения);
		ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
		
		Ошибка = СтрШаблон("Интеграция. %1 Причина: %2", Событие, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
	Если ПрочитанноеСообщение = Неопределено Тогда
		РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеОбновитьСтатус(ИдентификаторСообщения
																, Перечисления.рдв_СтатусыОбработкиСообщений.Обработано);
		Возврат;
	КонецЕсли;
	
	ЭтоСообщениеТекущейБазы = СтрСравнить(ПрочитанноеСообщение.meta.baseid, рдв_МенеджерОбменаПовтИсп.ИмяИБ());
	Если ЭтоСообщениеТекущейБазы = 0 Тогда
		РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеОбновитьСтатус(ИдентификаторСообщения
																, Перечисления.рдв_СтатусыОбработкиСообщений.Обработано);
		Возврат;
	КонецЕсли;
	
	Попытка
		СообщениеОбмена = рдв_ОбменДанными.СообщениеОбменаВОбъектИБ(ПрочитанноеСообщение);
	Исключение
		Событие = НСтр("ru ='Обработка входящего сообщения. Сообщение обмена в объект ИБ.'");
		Контекст = Новый_ЗаписатьОшибкуИнтеграции(Сообщение.ВнешняяСистема, Событие, Сообщение.ИдентификаторСообщения);
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке, Контекст);
		
		Ошибка = СтрШаблон("Интеграция. %1 Причина: %2", Событие, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	Объекты = СообщениеОбмена.data;
	meta = СообщениеОбмена.meta;
	ЭтоПодтверждениеПолучения = Ложь;
	Для Каждого Объект Из Объекты Цикл
		
		Если Объект.Ключ = "ПодтверждениеПолучения" Тогда
			ЭтоПодтверждениеПолучения = Истина;
			Продолжить;
		КонецЕсли;
		
		ИнформационнаяБаза = Справочники.рдв_ИнформационныеБазы.ПолучитьСоздатьИБ(meta.baseid);	
		ЗаписатьИдентификаторыОбъектовИсточника(Объект, ИнформационнаяБаза);
		
	КонецЦикла;
	
	Если Не ЭтоПодтверждениеПолучения Тогда
		Подтверждение = Справочники.рдв_ВыгружаемыеОбъекты.СоздатьВыгружаемыйОбъектПодтверждениеПолучения(
																					ИдентификаторСообщения,,
																					Сообщение.ВидСообщения);
		рдв_РегистрацияИзменений.ЗарегистрироватьПодтверждениеПолучения(Сообщение.ВнешняяСистема
																			, рдв_РегистрацияИзменений.АдресМетода(Сообщение.ВнешняяСистема, Подтверждение)
																			, Подтверждение
																			, meta);
																			
																			
		//выгрузка подтверждения в мониторинг
		ВнешняяСистемаМониторинга = рдв_МониторингДанных.ВнешняяСистемаМониторинга();
		Если ЗначениеЗаполнено(ВнешняяСистемаМониторинга) И 
			ВнешняяСистемаМониторинга <> Сообщение.ВнешняяСистема Тогда
			рдв_РегистрацияИзменений.ЗарегистрироватьПодтверждениеПолучения(ВнешняяСистемаМониторинга
																				, рдв_РегистрацияИзменений.АдресМетода(ВнешняяСистемаМониторинга, Подтверждение)
																				, Подтверждение
																				, meta);
			
		КонецЕсли;		
		
	КонецЕсли;
	
	РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеОбновитьСтатус(ИдентификаторСообщения
																, Перечисления.рдв_СтатусыОбработкиСообщений.Обработано);
																
	ЗаписьВЖурналСобытий(Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция МодульИнтеграции(ТипВнешнейСистемы) Экспорт
	
	МодульИнтеграции = МодульПрикладнойЛогики().МодульРаботыСВнешнейСистемойПоТипу(ТипВнешнейСистемы);
	
	Если МодульИнтеграции = Неопределено Тогда
		Если ТипВнешнейСистемы = Перечисления.рдв_ТипыВнешнихСистем.HTTPСервис Тогда
			МодульИнтеграции = ОбщегоНазначения.ОбщийМодуль("рдв_ИнтеграцияHTTP");
		ИначеЕсли ТипВнешнейСистемы = Перечисления.рдв_ТипыВнешнихСистем.RMQ Тогда
			МодульИнтеграции = ОбщегоНазначения.ОбщийМодуль("рдв_ИнтеграцияRMQ");
		КонецЕсли;		
	КонецЕсли;
	
	Если МодульИнтеграции = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Интеграция. Для типа внешней системы - %1, не задан модуль интеграции.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ТипВнешнейСистемы);
		ВызватьИсключение ТекстОшибки
		
	КонецЕсли;
	
	Возврат МодульИнтеграции;
	
КонецФункции

Процедура ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке, КонтекстОшибки, ПисатьВЖурналРегистрации = Истина) Экспорт
	
	Если ПисатьВЖурналРегистрации Тогда
		
		ТекстОшибки = ?(ТипЗнч(ИнформацияОбОшибке) = Тип("Строка")
						, ИнформацияОбОшибке
						, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ОшибкаЖурнала = СтрШаблон("
		|Внешняя система: %1
		|Идентификатор сообщения: %2
		|Событие: %3
		|Текст: %4"
		, КонтекстОшибки.ВнешняяСистема, КонтекстОшибки.ИдентификаторСообщения, КонтекстОшибки.Событие, ТекстОшибки);
		
		МассивСобытий = СтрРазделить(КонтекстОшибки.Событие, " ");
		Для а = 0 ПО МассивСобытий.Количество()-1 Цикл
			МассивСобытий[а] = Врег(Лев(МассивСобытий[а], 1)) + Прав(МассивСобытий[а], СтрДлина(МассивСобытий[а])-1);
		КонецЦикла;
		ИмяСобытия = "Интеграция." + СтрСоединить(МассивСобытий, "");
		ЗаписьЖурналаРегистрации(ИмяСобытия,
							УровеньЖурналаРегистрации.Ошибка,,, ОшибкаЖурнала);
								
	КонецЕсли;
	
	РегистрыСведений.рдв_ОшибкиИнтеграции.ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке, КонтекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конструкторы

Функция Новый_ОтветСервиса()
	
	ОтветСервиса = Новый Структура;
	ОтветСервиса.Вставить("ТекстОшибки"				, "");
	ОтветСервиса.Вставить("Успешно"					, Ложь);
	ОтветСервиса.Вставить("Ответ"					, "");
	ОтветСервиса.Вставить("ДополнительныеНаборы"	, Неопределено);
	ОтветСервиса.Вставить("Статус"					, "");
									
	Возврат ОтветСервиса;
	
КонецФункции

Функция Новый_КонтекстТранспорта()
	
	Таблица = РегистрыСведений.рдв_КонтекстСообщенийИнтеграции.СоздатьНаборЗаписей().Выгрузить();
	ПараметрыСообщения = Новый Структура;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ПараметрыСообщения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Функция Новый_Сообщение()
	
	Таблица = РегистрыСведений.рдв_СообщенияИнтеграции.СоздатьНаборЗаписей().Выгрузить();
	ПараметрыСообщения = Новый Структура;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Колонка.Имя = "ДанныеСообщения" Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыСообщения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ПараметрыСообщения.Вставить("ТекстСообщения", "");
	
	Возврат ПараметрыСообщения;
	
КонецФункции

// Результат отправки сообщений во внешнюю систему.
// 
// Возвращаемое значение:
//  Структура - Новый результат отправки сообщений:
// * Успешно - Булево - 
// * Статус - Строка - значение поля Статус справочника рдв_СтатусыИнтеграции макета "Макет"
// * ТекстОшибки - Строка - 
// * Маршрут - Строка - ключ маршрутизации, обычно используется для брокеров
// * Ответ - Строка - для http сервисов значение ответа сервиса
// * ДополнительныеНаборы - Структура - обычно заголовки http сервисов
// 								* Ключ - Строка - Имя набора
// 								* Значение - Соответствие - пара ключ значение для отображения в табилце
Функция Новый_РезультатОтправкиСообщений()
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Успешно"				, Ложь);
	РезультатОтправки.Вставить("Статус"					, "");
	РезультатОтправки.Вставить("Ответ"					, "");
	РезультатОтправки.Вставить("ТекстОшибки"			, "");
	РезультатОтправки.Вставить("Маршрут"				, "");
	РезультатОтправки.Вставить("ДополнительныеНаборы"	, Неопределено);
	
	Возврат РезультатОтправки;
	
КонецФункции

#КонецОбласти

#Область ВходящиеСообщения

Процедура ЗаписатьИдентификаторыОбъектовИсточника(Результат, ИнформационнаяБаза)
	
	ЗагружаемыйОбъект = Результат.Ключ;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемыйОбъект, "Ссылка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеДанные = Результат.Значение.ЗагружаемыеДанные;
	ЗагружаемыйОбъектСсылка = ЗагружаемыйОбъект.Ссылка;
	
	Набор = РегистрыСведений.рдв_ИдентификаторыОбъектовИсточника.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(ЗагружаемыйОбъектСсылка);
	
	Запись = Набор.Добавить();
	Запись.Объект = ЗагружаемыйОбъектСсылка;
	Запись.Идентификатор = ЗагружаемыеДанные._GUID;
	Запись.ИнформационнаяБаза = ИнформационнаяБаза;
	Запись.ПолноеИмяИсточника = ЗагружаемыеДанные._ТипЗначения;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

Функция ЭтоУникальноеСообщениеВыборки(МассивВыгружаемыхОбъектов, ГотовыеСообщенияВыгружаемыхОбъктов, Выборка)
	
	Если ГотовыеСообщенияВыгружаемыхОбъктов.Колонки.Количество() = 0 Тогда
		ГотовыеСообщенияВыгружаемыхОбъктов.Колонки.Добавить("ВыгружаемыйОбъект");
		ГотовыеСообщенияВыгружаемыхОбъктов.Колонки.Добавить("КлючМаршрутизации");
		ГотовыеСообщенияВыгружаемыхОбъктов.Индексы.Добавить("ВыгружаемыйОбъект,КлючМаршрутизации");
	КонецЕсли;
	
	МассивВыгружаемыхОбъектов.Добавить(Выборка.ВыгружаемыйОбъект);
	Отбор = Новый Структура("ВыгружаемыйОбъект,КлючМаршрутизации", Выборка.ВыгружаемыйОбъект, Выборка.КлючМаршрутизации);
	Сформированные = ГотовыеСообщенияВыгружаемыхОбъктов.НайтиСтроки(Отбор);
	Если Сформированные.Количество() = 0 Тогда
		НоваяСтрока = ГотовыеСообщенияВыгружаемыхОбъктов.Добавить();
		НоваяСтрока.ВыгружаемыйОбъект = Выборка.ВыгружаемыйОбъект;
		НоваяСтрока.КлючМаршрутизации = Выборка.КлючМаршрутизации;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает параметры соединения для внешней системы.
// Параметры:
//  ВнешняяСистема - СправочникСсылка.рдв_ВнешниеСистемы - Ссылка на внешнюю систему
// Возвращаемое значение:
//  Структура - Параметры соединения:
//   * Адрес - Строка - Адрес сервера
//   * ВиртуальныйХост - Строка - Имя виртуального хоста/адрес сервиса
//   * ЗащищенноеСоединение - Булево - Признак использования защищенного соединения
//   * Удалить_ТокенАвторизации - Строка - Токен авторизации
//   * Порт - Число - Порт сервера
//   * Пользователь - Строка - Имя пользователя
//   * Пароль - Строка - Пароль пользователя
//   * ДополнительныеНастройки - Структура - Дополнительные настройки соединения
//
Функция ПараметрыСоединения(ВнешняяСистема)
	
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить("Адрес", "Сервер");
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение");
	ПараметрыСоединения.Вставить("Порт");
	ПараметрыСоединения.Вставить("ДополнительныеНастройки");
	
	ДанныеВнешнейСистемы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнешняяСистема, ПараметрыСоединения);
	
	ДанныеАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВнешняяСистема, "Пользователь, Пароль");
	ДанныеВнешнейСистемы.Вставить("Пароль", 
									?(ЗначениеЗаполнено(ДанныеАвторизации.Пароль), ДанныеАвторизации.Пароль, ""));
	ДанныеВнешнейСистемы.Вставить("Пользователь",
									?(ЗначениеЗаполнено(ДанныеАвторизации.Пользователь), ДанныеАвторизации.Пользователь, ""));
									
	ДанныеВнешнейСистемы.ДополнительныеНастройки = ДанныеВнешнейСистемы.ДополнительныеНастройки.Получить();
	
	//@skip-check constructor-function-return-section
	Возврат ДанныеВнешнейСистемы;
	
КонецФункции

Процедура Отправка(Соединение, ПараметрыСоединения, ВнешняяСистема, ИдентификаторыСообщений
						, МодульИнтеграции
						, ДополнительныеПараметры)

	РезультатЗапроса = ВыполнитьЗапросСообщений(ВнешняяСистема, ИдентификаторыСообщений);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаПоВнешнейСистеме = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВнешнейСистеме.Следующий() Цикл
		ВыборкаПоАдресу = ВыборкаПоВнешнейСистеме.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоАдресу.Следующий() Цикл

			Выборка = ВыборкаПоАдресу.Выбрать();
			Пока Выборка.Следующий() Цикл

				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.рдв_СообщенияИнтеграции");
				ЭлементБлокировки.УстановитьЗначение("ИдентификаторСообщения", Выборка.ИдентификаторСообщения);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				НачатьТранзакцию();
				Попытка
					
					БлокировкаДанных.Заблокировать();
					
					Сообщение = Сообщение(Выборка);

					ОтветСервиса = Новый_ОтветСервиса();
					НачалоОтправкиМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ДатаСобытия = ТекущаяДатаСеанса();
					
					Ответ = Новый_РезультатОтправкиСообщений();
					МодульИнтеграции.ОтправитьСообщение(ПараметрыСоединения, Соединение, Сообщение, Ответ, ДополнительныеПараметры); // Структура
					ЗаполнитьЗначенияСвойств(ОтветСервиса, Ответ);

					КонецОтправки = ТекущаяУниверсальнаяДатаВМиллисекундах();

					КонтекстТранспорта = Новый_КонтекстТранспорта();
					ЗаполнитьЗначенияСвойств(КонтекстТранспорта, Сообщение);
					КонтекстТранспорта.ДатаСобытия		= ДатаСобытия;
					КонтекстТранспорта.ДатаСобытияМс	= НачалоОтправкиМс;
					КонтекстТранспорта.ДатаОтвета		= ТекущаяДатаСеанса();
					КонтекстТранспорта.ДлительностьМс	= КонецОтправки - НачалоОтправкиМс;
					КонтекстТранспорта.Контекст			= ОтветСервиса;
					КонтекстТранспорта.Статус			= ОтветСервиса.Статус;
					
					СтатусОбработки = ?(ОтветСервиса.Успешно, Перечисления.рдв_СтатусыОбработкиСообщений.Обработано,
						Перечисления.рдв_СтатусыОбработкиСообщений.Ошибка);
					Сообщение.СтатусОбработки = СтатусОбработки;
					
					ЗаписатьКонтекстСообщенияИнтеграции(КонтекстТранспорта, НачалоЧаса(ТекущаяДатаСеанса()));
					РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеОбновитьСтатус(Сообщение.ИдентификаторСообщения
																					, СтатусОбработки);
					ЗаписьВЖурналСобытий(Сообщение);

					ЗафиксироватьТранзакцию();
					
				Исключение

					ОтменитьТранзакцию();
					
					Событие = НСтр("ru ='Отправка сообщения.Не удалось отправить данные.'");
					Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие);
					Контекст.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
					ЗаписатьОшибкуИнтеграции(ИнформацияОбОшибке(), Контекст);
					
					ВызватьИсключение;

				КонецПопытки;
				
				Если СтатусОбработки = Перечисления.рдв_СтатусыОбработкиСообщений.Ошибка Тогда
					Событие = НСтр("ru ='Отправка сообщения.Не удалось отправить данные.'");
					Контекст = Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие);
					Контекст.ИдентификаторСообщения = Выборка.ИдентификаторСообщения;
					ЗаписатьОшибкуИнтеграции(ОтветСервиса.ТекстОшибки, Контекст);
					Прервать;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция Новый_ЗаписатьОшибкуИнтеграции(ВнешняяСистема, Событие, ИдентификаторСообщения = Неопределено, ТипОшибки = Неопределено)

	Если ТипОшибки = Неопределено Тогда
		ТипОшибки = Перечисления.рдв_ТипыОшибокИнтеграции.ОбщаяОшибка
	КонецЕсли;

	Контекст = Новый Структура();
	Контекст.Вставить("ВнешняяСистема"			, ВнешняяСистема);
	Контекст.Вставить("ТипОшибки"				, ТипОшибки);
	Контекст.Вставить("Событие"					, Событие);
	Контекст.Вставить("ИдентификаторСообщения"	, ИдентификаторСообщения);
	
	Возврат Контекст;
	
КонецФункции

Процедура ЗаписатьСообщениеИнтеграции_Входящее(ВидСообщения, ВнешняяСистема, Сообщение, КонтекстТранспорта)

	Сообщение.ВидСообщения = ВидСообщения;
	Сообщение.ВнешняяСистема = ВнешняяСистема;
	Сообщение.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Входящее;
	Сообщение.СтатусОбработки = Перечисления.рдв_СтатусыОбработкиСообщений.КОбработке;
	
	ЗаписатьСообщениеИнтеграции(Сообщение, КонтекстТранспорта, Новый Массив);
	
КонецПроцедуры

Процедура ЗаписатьСообщениеИнтеграции_Исходящее(Сообщение, КонтекстТранспорта, ВыгружаемыеОбъекты)
	
	Сообщение.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Исходящее;
	ЗаписатьСообщениеИнтеграции(Сообщение, КонтекстТранспорта, ВыгружаемыеОбъекты);
	
КонецПроцедуры

Процедура ЗаписьВЖурналСобытий(Сообщение)
	
	Событие = Перечисления.рдв_События.ОбработкаСообщения;
	РегистрыСведений.рдв_ЖурналСобытий.ЗарегистрироватьСобытие(Сообщение.ИдентификаторСобытия,
																Сообщение.ИдентификаторСообщения,
																,
																,
																Событие,
																,
																ТекущаяДатаСеанса());
	
КонецПроцедуры

Функция ВыполнитьЗапросСообщений(ВнешняяСистема, ИдентификаторыСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияИнтеграции.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияИнтеграции.ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияИнтеграции.АдресМетода КАК АдресМетода,
	|	СообщенияИнтеграции.ВидСообщения КАК ВидСообщения,
	|	СообщенияИнтеграции.КлючМаршрутизации КАК КлючМаршрутизации,
	|	СообщенияИнтеграции.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	СообщенияИнтеграции.ДатаРегистрацииМс КАК ДатаРегистрацииМс,
	|	ОбъектыСообщенийИнтеграции.ОбъектСообщения КАК ВыгружаемыйОбъект,
	|	ОбъектыСообщенийИнтеграции.ОбъектСообщения.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	СообщенияИнтеграции.ДанныеСообщения КАК ДанныеСообщения,
	|	СообщенияИнтеграции.РазмерСообщения КАК РазмерСообщения,
	|	СообщенияИнтеграции.ДатаЗаписиНачалоЧаса КАК ДатаЗаписиНачалоЧаса,
	|	СообщенияИнтеграции.Направление КАК Направление
	|ИЗ
	|	РегистрСведений.рдв_СообщенияИнтеграции КАК СообщенияИнтеграции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рдв_ОбъектыСообщенийИнтеграции КАК ОбъектыСообщенийИнтеграции
	|		ПО СообщенияИнтеграции.ИдентификаторСообщения = ОбъектыСообщенийИнтеграции.ИдентификаторСообщения
	|ГДЕ
	|	СообщенияИнтеграции.ВнешняяСистема = &ВнешняяСистема
	|	И &УсловиеПоИдентификатору
	|	И НЕ СообщенияИнтеграции.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.рдв_СтатусыОбработкиСообщений.Обработано)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщенияИнтеграции.ДатаРегистрацииМс
	|ИТОГИ
	|ПО
	|	ВнешняяСистема,
	|	АдресМетода";
	
	Если Не ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ТипЗнч(ИдентификаторыСообщений) = Тип("Массив") Тогда
		ТекстУсловия = "СообщенияИнтеграции.ИдентификаторСообщения В (&ИдентификаторыСообщений)";
	Иначе
		ТекстУсловия = "СообщенияИнтеграции.ИдентификаторСообщения = &ИдентификаторыСообщений";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("ИдентификаторыСообщений", ИдентификаторыСообщений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ВыполнитьЗапросИзменений(ВнешняяСистема, ИдентификаторыСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияИзменений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	РегистрацияИзменений.ВнешняяСистема КАК ВнешняяСистема,
	|	РегистрацияИзменений.АдресМетода КАК АдресМетода,
	|	РегистрацияИзменений.ВидСообщения КАК ВидСообщения,
	|	РегистрацияИзменений.ВидСообщения.ИмяВидаСообщения КАК КлючМаршрутизации,
	|	РегистрацияИзменений.ВыгружаемыйОбъект КАК ВыгружаемыйОбъект,
	|	РегистрацияИзменений.ВыгружаемыйОбъект.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	РегистрацияИзменений.ИдентификаторСобытия КАК ИдентификаторСобытия,
	|	РегистрацияИзменений.ДатаРегистрацииВМиллисекундах КАК ДатаРегистрацииВМиллисекундах,
	|	РегистрацияИзменений.ВыгружаемыйОбъект.Тип КАК ВыгружаемыйОбъектТип,
	|	ВЫБОР
	|		КОГДА РегистрацияИзменений.ВыгружаемыйОбъект.Тип = ЗНАЧЕНИЕ(Перечисление.рдв_ТипыВыгружаемыхОбъектов.ПодтверждениеПолучения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодтверждениеПолучения,
	|	ВЫБОР
	|		КОГДА РегистрацияИзменений.ВыгружаемыйОбъект.Тип = ЗНАЧЕНИЕ(Перечисление.рдв_ТипыВыгружаемыхОбъектов.ПодтверждениеПолучения)
	|			ТОГДА РегистрацияИзменений.ВыгружаемыйОбъект.ВидСообщения.ИмяВидаСообщения
	|		ИНАЧЕ РегистрацияИзменений.ВидСообщения.ИмяВидаСообщения
	|	КОНЕЦ КАК ТипОбъекта,
	|	РегистрацияИзменений.ДатаРегистрацииUTC КАК ДатаРегистрацииUTC
	|ИЗ
	|	РегистрСведений.рдв_РегистрацияИзменений КАК РегистрацияИзменений
	|ГДЕ
	|	РегистрацияИзменений.ВнешняяСистема = &ВнешняяСистема
	|	И &УсловиеПоИдентификатору
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацияИзменений.ДатаРегистрацииВМиллисекундах
	|ИТОГИ ПО
	|	ИдентификаторСообщения";
	
	Если Не ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ТипЗнч(ИдентификаторыСообщений) = Тип("Массив") Тогда
		ТекстУсловия = "РегистрацияИзменений.ИдентификаторСообщения В (&ИдентификаторСообщения)";
	Иначе
		ТекстУсловия = "РегистрацияИзменений.ИдентификаторСообщения = &ИдентификаторСообщения";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ВнешняяСистема"				, ВнешняяСистема);
	Запрос.УстановитьПараметр("ИдентификаторСообщения"		, ИдентификаторыСообщений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция Сообщение(Выборка)
	
	Сообщение = Новый_Сообщение();
	ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
	
	ЕстьДанныеСообщения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "ДанныеСообщения");
	Если ЕстьДанныеСообщения Тогда
		Сообщение.ТекстСообщения = Выборка.ДанныеСообщения.Получить();
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции

Процедура ЗаписатьСообщениеИнтеграции(ДанныеСообщения, КонтекстТранспорта, ОбъектыСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗаписиНачалоЧаса = НачалоЧаса(ТекущаяДатаСеанса());
	
	НачатьТранзакцию();
	
	Попытка
		
		Набор = РегистрыСведений.рдв_СообщенияИнтеграции.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторСообщения.Установить(ДанныеСообщения.ИдентификаторСообщения);
		Набор.Отбор.ИдентификаторСобытия.Установить(ДанныеСообщения.ИдентификаторСобытия);
		Набор.Отбор.ВнешняяСистема.Установить(ДанныеСообщения.ВнешняяСистема);
		СообщениеОбъект = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(СообщениеОбъект, ДанныеСообщения);
		СообщениеОбъект.ДатаЗаписиНачалоЧаса = ДатаЗаписиНачалоЧаса;
		СообщениеОбъект.ДанныеСообщения	= Новый ХранилищеЗначения(ДанныеСообщения.ТекстСообщения
																, Новый СжатиеДанных(9));
		Набор.ДополнительныеСвойства.Вставить("ЭтоОбработкаСообщения", Истина);
		Набор.ДополнительныеСвойства.Вставить("ДанныеСообщения", ДанныеСообщения);
		Набор.ДополнительныеСвойства.Вставить("КонтекстТранспорта", КонтекстТранспорта);
		Набор.Записать();
		
		ЗаписатьКонтекстСообщенияИнтеграции(КонтекстТранспорта, ДатаЗаписиНачалоЧаса);
		
		ЗаписатьОбъектыСообщенияИнтеграции(КонтекстТранспорта, ОбъектыСообщения, ДатаЗаписиНачалоЧаса);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Ошибка = СтрШаблон("
		|Событие инеграции: Запись сообщения
		|Описание ошибки: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьКонтекстСообщенияИнтеграции(КонтекстТранспорта, ДатаЗаписиНачалоЧаса)
	
	Если Не ЗначениеЗаполнено(КонтекстТранспорта.ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	ОтветСервиса = КонтекстТранспорта.Контекст;
	ИдентификаторКонтекста = Строка(Новый УникальныйИдентификатор);
	Набор = РегистрыСведений.рдв_КонтекстСообщенийИнтеграции.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторСообщения.Установить(КонтекстТранспорта.ИдентификаторСообщения);
	Набор.Отбор.ИдентификаторКонтекста.Установить(ИдентификаторКонтекста);
	Набор.Отбор.ДатаЗаписиНачалоЧаса.Установить(ДатаЗаписиНачалоЧаса);
	
	Запись = Набор.Добавить();
	Запись.ИдентификаторСообщения = КонтекстТранспорта.ИдентификаторСообщения;
	Запись.ИдентификаторКонтекста = ИдентификаторКонтекста;
	Запись.ДатаЗаписиНачалоЧаса = ДатаЗаписиНачалоЧаса;
	Запись.Контекст = Новый ХранилищеЗначения(ОтветСервиса, Новый СжатиеДанных(9));
	Запись.ДлительностьМс = КонтекстТранспорта.ДлительностьМс;
	Запись.ДатаСобытия = КонтекстТранспорта.ДатаСобытия;
	Запись.ДатаСобытияМс = КонтекстТранспорта.ДатаСобытияМс;
	Запись.ДатаОтвета = КонтекстТранспорта.ДатаОтвета;
	Запись.Статус = Справочники.рдв_СтатусыИнтеграции.СтатусПоИмени(КонтекстТранспорта.Статус);
	
	Набор.Записать();

КонецПроцедуры

Процедура ЗаписатьОбъектыСообщенияИнтеграции(КонтекстТранспорта, ОбъектыСообщения, ДатаЗаписиНачалоЧаса) 
	
	ИдентификаторСообщения = КонтекстТранспорта.ИдентификаторСообщения;
	
	Если ОбъектыСообщения.Количество() > 0 Тогда
		Набор = РегистрыСведений.рдв_ОбъектыСообщенийИнтеграции.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
		Для Каждого ОбъектСообщения Из ОбъектыСообщения Цикл
			Если Не ЗначениеЗаполнено(ОбъектСообщения) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = Набор.Добавить();
			НоваяЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
			НоваяЗапись.ДатаЗаписиНачалоЧаса = ДатаЗаписиНачалоЧаса;
			НоваяЗапись.ОбъектСообщения = ОбъектСообщения;
			
			Если ЗначениеЗаполнено(КонтекстТранспорта.ДатаСобытия) Тогда
				НоваяЗапись.ДатаСоответствия = КонтекстТранспорта.ДатаСобытия;
			КонецЕсли;
			
			Если НоваяЗапись.ОбъектСообщения <> ОбъектСообщения Тогда
				// TODO: вызывать исключение или регистрировать ошибку.
				Набор.Удалить(НоваяЗапись);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если Набор.Количество() > 0 Тогда
			ТаблицаНабора = Набор.Выгрузить();
			ТаблицаНабора.Свернуть("ИдентификаторСообщения,ОбъектСообщения,ДатаЗаписиНачалоЧаса,ДатаСоответствия");
			Набор.Загрузить(ТаблицаНабора);
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область Связи

Процедура ОбновитьДанныеРегистрации(ВнешняяСистема, ИдентификаторСообщения, ИнформацияОбОшибке)

	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Ошибка = Перечисления.рдв_СтатусыРегистрацииИзменений.Ошибка;
		РегистрыСведений.рдв_РегистрацияИзменений.ОбновитьСтатусРегистрации(ВнешняяСистема, ИдентификаторСообщения, Ошибка
																			, ТекстОшибки);
	Иначе
		РегистрыСведений.рдв_РегистрацияИзменений.УдалитьРегистрацию(ВнешняяСистема, ИдентификаторСообщения, Неопределено);
	КонецЕсли;

КонецПроцедуры

Функция НаполнитьСообщение(ДанныеНаВыгрузку, Выборка)
	
	Выборка.Сбросить();
	Выборка.Следующий();
	Сообщение = Сообщение(Выборка);
	
	ПараметрыОбъекта = рдв_ОбменДанными.Новый_ПараметрыОбъекта();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Выборка);
	ПараметрыОбъекта.ИмяИБ = рдв_МенеджерОбменаПовтИсп.ИмяИБ();
	
	Попытка
		СтандартныйЗапрос = рдв_ОбменДанными.СтруктураСтандартногоЗапроса(ПараметрыОбъекта, ДанныеНаВыгрузку);
	Исключение
		
		Ошибка = СтрШаблон("
		|Событие инеграции: Формирование описания сообщения
		|Описание ошибки: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
	Попытка
		Сообщение.ТекстСообщения = рдв_ОбменДанными.СформироватьТекстСообщения(СтандартныйЗапрос);
	Исключение
		
		Ошибка = СтрШаблон("
		|Событие инеграции: Формирование сообщения
		|Описание ошибки: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
	Сообщение.РазмерСообщения = СтрДлина(Сообщение.ТекстСообщения);
	Сообщение.СтатусОбработки = Перечисления.рдв_СтатусыОбработкиСообщений.КОбработке;
	Сообщение.ДатаРегистрацииМс = Выборка.ДатаРегистрацииВМиллисекундах;
	
	Возврат Сообщение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
