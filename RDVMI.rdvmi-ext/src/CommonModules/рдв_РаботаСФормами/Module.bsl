
#Область РаботаСЭлементамиФормы 

Функция ДобавитьФлажок(Форма, ИмяЭлемента, Заголовок = "", ГруппаЭлементов = Неопределено, ЭлементПосле = Неопределено, ПутьКДанным = "") Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект." + ИмяЭлемента;
 	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьПолеВвода(Форма, ИмяЭлемента, Заголовок = "", ГруппаЭлементов = Неопределено, ПутьКДанным = "", ЭлементПосле = Неопределено) Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект." + ИмяЭлемента;
 	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьПолеПереключателя(Форма, ИмяЭлемента, Заголовок = "",
	ГруппаЭлементов = Неопределено, ПутьКДанным = "",
	ЭлементПосле = Неопределено, ВидПереключателя = Неопределено,
	МассивЗначений = Неопределено, ПоложениеЗаголовка = Неопределено) Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	
	Если ЗначениеЗаполнено(ВидПереключателя) Тогда
		НовыйЭлемент.ВидПереключателя = ВидПереключателя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивЗначений) Тогда
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначений);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект." + ИмяЭлемента;
 	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПоложениеЗаголовка) Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовка;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьСтраницу(Форма, ИмяЭлемента, Заголовок = "", Подсказка = "", ГруппаЭлементов = Неопределено, ЭлементПосле = Неопределено, ПутьКДаннымЗаголовка = "") Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подсказка) Тогда
		НовыйЭлемент.Подсказка = Подсказка;
	КонецЕсли;

	Если Не ПустаяСтрока(ПутьКДаннымЗаголовка) Тогда
		НовыйЭлемент.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовка;
 	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьТаблицу(Форма, ИмяЭлемента, Заголовок = "", ГруппаЭлементов = Неопределено, ЭлементПосле = Неопределено, ПутьКДанным = "", АвтоВводНовойСтроки = Истина, Отображение = Неопределено, ПоложениеЗаголовка = Неопределено) Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ТаблицаФормы"), ГруппаЭлементов, ЭлементПосле); 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект." + ИмяЭлемента;
 	КонецЕсли;

	НовыйЭлемент.АвтоВводНовойСтроки = АвтоВводНовойСтроки;
	
	Если Не ЗначениеЗаполнено(Отображение) Тогда
		НовыйЭлемент.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	Иначе
		НовыйЭлемент.Отображение = Отображение;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовка) Тогда
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовка;
	КонецЕсли; 
		
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьПолеНадписи(Форма, ИмяЭлемента, Заголовок = "", ГруппаЭлементов = Неопределено, ЭлементПосле = Неопределено) Экспорт
	
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;

	Возврат НовыйЭлемент;
	
КонецФункции

Процедура УстановитьДействие(Элемент, ИмяСобытия, ИмяОбработчика, Проверять = Ложь) Экспорт
	
	Если Проверять Тогда
		ТекущееИмяОбработчика = Элемент.ПолучитьДействие(ИмяСобытия);
		Если Не ПустаяСтрока(ТекущееИмяОбработчика) Тогда
			Если ВРег(ТекущееИмяОбработчика) = ВРег(ИмяОбработчика) Тогда
				Возврат;
			КонецЕсли;
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется попытка установить обработчик события элемента %1, для которого уже установлен обработчик'"),
				Элемент.Имя
			);
			ВызватьИсключение ОписаниеОшибки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.УстановитьДействие(ИмяСобытия, ИмяОбработчика);
		
КонецПроцедуры

// Функция создает динамический список в реквизитах формы
//
//	Параметры:
//	- ИмяСписка - Строка - Имя будущего списка на форме и реквизита
//	- ТекстЗапроса - Строка - Текст запрос, если не указан, необходимо указать таблицу
//	- ТаблицаСписка - Строка - Имя основной таблицы, пример: "Документ.РеализацияТоваровУслуг"	
//	- ПараметрыЗапроса - Структура - Перечень параметров, если они используются в запросе.
//
Процедура СозданиеДинамическогоСписка(Форма, ИмяСписка = "Список", ТекстЗапроса = "", ТаблицаСписка = "", ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ТекстЗапроса = "" И ТаблицаСписка = "" Тогда
		Сообщить("Ошибка формирования динамического списка, укажите запрос или таблицу");
		Возврат;
	КонецЕсли;
																																		
	//Создаем реквизит формы
	ТипыРеквизита = Новый Массив;                             
	ТипыРеквизита.Добавить(Тип("ДинамическийСписок"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита); 
	ДинамическийСписок = Новый РеквизитФормы(ИмяСписка, ОписаниеТиповДляРеквизита,,"",ЛОЖЬ); //Имя реквизита
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ДинамическийСписок);        
	
	//Задаем свойства реквизиту
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);        
	РеквизитДинамическийСписок = Форма[ИмяСписка]; //Имя реквизита
	Если ТекстЗапроса = "" Тогда
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ЛОЖЬ;
		РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка;
	Иначе
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ИСТИНА;
		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
		Если ТаблицаСписка <> "" Тогда РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка; КонецЕсли;		
	КонецЕсли;
	
	//Заполняем параметры если они были указаны
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Параметра из ПараметрыЗапроса Цикл
			РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Параметра.Ключ,Параметра.Значение);	
		КонецЦикла;		 
	КонецЕсли;
	
КонецПроцедуры

// Функция создает колонки таблицы формы по переданному массиву
//
//	Параметры: 
//	- МассиКолонок - Массив - массив создаваемых колонок, значения тип строка.
//		Пример: "Д,ДоговораКонтрагента" значит будет создана колонка
//		с заголовком "Д" и колонкой списка "ДоговораКонтрагента".
//		Если указать просто "ДоговораКонтрагента",  заголовок будет идентичен
//		заголовку по умолчанию типа "Договор контрагента".
//
Функция СоздатьКолонкиДинамическогоСписка(Форма, ТаблицаФормы, ИмяСписка, МассивКолонок) Экспорт
	
	//Создание колонок на основание МассивКолонок
	Для каждого Элемента Из МассивКолонок Цикл
		
		ПараметрыКолонки = СтрЗаменить(Элемента,",",Символы.ПС);
		Если СтрЧислоСтрок(ПараметрыКолонки) > 1 Тогда
			Заголовок = СокрЛП(СтрПолучитьСтроку(ПараметрыКолонки, 1));
			ИмяКолонки = СокрЛП(СтрПолучитьСтроку(ПараметрыКолонки, 2));
		Иначе
			Заголовок = "";
			ИмяКолонки = ПараметрыКолонки; 
		КонецЕсли;
		
		ИмяЭлемента = ИмяСписка + ИмяКолонки;
		ПутьКДанным = ИмяСписка + "." + ИмяКолонки;
		ДобавитьПолеВвода(Форма, ИмяЭлемента, Заголовок, ТаблицаФормы, ПутьКДанным); 
		
	КонецЦикла;
	
КонецФункции

Функция ДобавитьДействияТаблицы(Форма, ИмяСписка, СписокДействий = Неопределено) Экспорт

	Если СписокДействий <> Неопределено Тогда 	
		ПереченьСвойств = "ПриИзменении
		|Выбор
		|ПриАктивизацииСтроки
		|ВыборЗначения
		|ПриАктивизацииПоля
		|ПриАктивизацииЯчейки
		|ПередНачаломДобавления
		|ПередНачаломИзменения
		|ПередУдалением
		|ПриНачалеРедактирования
		|ПередОкончаниемРедактирования
		|ПриОкончанииРедактирования
		|ОбработкаВыбора
		|ПередРазворачиванием
		|ПередСворачиванием
		|ПослеУдаления
		|ПриСменеТекущегоРодителя
		|ОбработкаЗаписиНового
		|ПриСохраненииПользовательскихНастроекНаСервере
		|ПередЗагрузкойПользовательскихНастроекНаСервере
		|ПриЗагрузкеПользовательскихНастроекНаСервере
		|ПриОбновленииСоставаПользовательскихНастроекНаСервере
		|ОбработкаЗапросаОбновления
		|ПриПолученииДанныхНаСервере
		|НачалоПеретаскивания
		|ПроверкаПеретаскивания
		|ОкончаниеПеретаскивания
		|Перетаскивание";
		Для Счетчик = 1 по 28 Цикл
			ИмяСвойства = СтрПолучитьСтроку(ПереченьСвойств, Счетчик);
			Форма.Элементы[ИмяСписка].УстановитьДействие(ИмяСвойства,?(СписокДействий.Свойство(ИмяСвойства),СписокДействий[ИмяСвойства],""));
		КонецЦикла;
	КонецЕсли
	
КонецФункции //ДобавитьДействияТаблицы

Функция ДобавитьГруппу(Форма, 
						ИмяЭлемента, 
						Заголовок = "", 
						Подсказка = "", 
						ГруппаЭлементов = Неопределено, 
						ЭлементПосле = Неопределено, 
						ПутьКДаннымЗаголовка = "", 
						ОтображатьЗаголовок = Ложь, 
						Группировка = Неопределено) Экспорт
						
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	НовыйЭлемент.ОтображатьЗаголовок = ОтображатьЗаголовок;
	
	Если Не ЗначениеЗаполнено(Группировка) Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Иначе
		НовыйЭлемент.Группировка = Группировка;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(Подсказка) Тогда
		НовыйЭлемент.Подсказка = Подсказка;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДаннымЗаголовка) Тогда
		НовыйЭлемент.ПутьКДаннымЗаголовка = ПутьКДаннымЗаголовка;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции //ДобавитьГруппу

Функция ДобавитьГруппуСтраниц(Форма, 
		ИмяЭлемента, 
		ГруппаЭлементов = Неопределено, 
		ЭлементПосле = Неопределено
	)Экспорт
						
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидГруппыФормы.Страницы; 
	
	Возврат НовыйЭлемент;
	
КонецФункции //ДобавитьГруппу

Функция ДобавитьГруппуПодменю(Форма, 
						ИмяЭлемента, 
						Заголовок = "", 
						Подсказка = "", 
						ГруппаЭлементов = Неопределено, 
						ЭлементПосле = Неопределено) Экспорт
						
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидГруппыФормы.Подменю; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
		
	Возврат НовыйЭлемент;
	
КонецФункции //ДобавитьГруппу

Функция ДобавитьКоманду(Форма, 
						ИмяКоманды, 
						ЗаголовокКоманды = "",
						Действие = "",
						ИмяЭлемента = "",
						Подсказка = "", 
						Картинка = Неопределено,
						ГруппаЭлементов = Неопределено, 
						ЭлементПосле = Неопределено) Экспорт
						
	//Добавляем новую команду
    НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
    НоваяКоманда.Действие = Действие;
    НоваяКоманда.Заголовок = ЗаголовокКоманды;
	
	Если Картинка <> Неопределено Тогда
		НоваяКоманда.Картинка = Картинка;
		НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подсказка) Тогда
		НоваяКоманда.Подсказка = Подсказка;
	КонецЕсли;

	Если ПустаяСтрока(ИмяЭлемента) Тогда
		ИмяЭлемента = ИмяКоманды;
	КонецЕсли;
	
	//Добавляем новую кнопку
    НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаЭлементов, ЭлементПосле);
    НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
    НовыйЭлемент.ИмяКоманды = ИмяКоманды;

	Возврат НовыйЭлемент;
	
КонецФункции //ДобавитьГруппу

Функция ДобавитьГруппуКолонок(Форма, 
						ИмяЭлемента, 
						Заголовок = "", 
						Подсказка = "", 
						ГруппаЭлементов = Неопределено, 
						ЭлементПосле = Неопределено, 
						ПутьКДаннымШапки = "", 
						ОтображатьЗаголовок = Ложь, 
						Группировка = Неопределено) Экспорт
						
	НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаЭлементов, ЭлементПосле); 
	НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок; 
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	НовыйЭлемент.ОтображатьЗаголовок = ОтображатьЗаголовок;
	
	Если Не ЗначениеЗаполнено(Группировка) Тогда
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе
		НовыйЭлемент.Группировка = Группировка;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(Подсказка) Тогда
		НовыйЭлемент.Подсказка = Подсказка;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДаннымШапки) Тогда
		НовыйЭлемент.ПутьКДаннымШапки = ПутьКДаннымШапки;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции //ДобавитьГруппу

Функция СоздатьСворачиваемуюГруппу(Форма, ОбщееНаименование, ЗаголовокДекорации, Группировка, Свернута = Истина, ГруппаЭлементов = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;

	рдв_эл_ГруппаЗаголовка = рдв_РаботаСФормами.ДобавитьГруппу(Форма,
		"рдв_эл_ГруппаЗаголовкаСворачиваемогоСписка" + ОбщееНаименование,
		"Группа сворачиваемого заголовка " +  ОбщееНаименование,,
		ГруппаЭлементов,,, 
		Ложь, 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда
	);
		
	НоваяДекорацияСвернута = Элементы.Вставить("рдв_эл_ДекорацияКартинкаСвернута" + ОбщееНаименование, Тип("ДекорацияФормы"), рдв_эл_ГруппаЗаголовка);
	НоваяДекорацияСвернута.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияСвернута.Картинка = БиблиотекаКартинок.СтрелкаВправоЗеленая;
	НоваяДекорацияСвернута.УстановитьДействие("Нажатие", "Подключаемый_РазвернутьСвернутьГруппу");
	НоваяДекорацияСвернута.Гиперссылка = Истина;
	НоваяДекорацияСвернута.Заголовок = "Картинка свернута " + ОбщееНаименование;
	НоваяДекорацияСвернута.Видимость = Свернута;
	
	НоваяДекорацияРазвернута = Элементы.Вставить("рдв_эл_ДекорацияКартинкаРазвернута" + ОбщееНаименование, Тип("ДекорацияФормы"), рдв_эл_ГруппаЗаголовка);
	НоваяДекорацияРазвернута.Вид = ВидДекорацииФормы.Картинка;
	НоваяДекорацияРазвернута.Картинка = БиблиотекаКартинок.СтрелкаВнизЗеленая;
	НоваяДекорацияРазвернута.Видимость = Ложь;
	НоваяДекорацияРазвернута.УстановитьДействие("Нажатие", "Подключаемый_РазвернутьСвернутьГруппу");
	НоваяДекорацияРазвернута.Гиперссылка = Истина;
	НоваяДекорацияСвернута.Заголовок = "Картинка развернута " + ОбщееНаименование;
	НоваяДекорацияРазвернута.Видимость = Не Свернута;
	
	НоваяДекорацияНадпись = Элементы.Вставить("рдв_эл_ДекорацияНадпись" + ОбщееНаименование, Тип("ДекорацияФормы"), рдв_эл_ГруппаЗаголовка);
	НоваяДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
	НоваяДекорацияНадпись.ЦветТекста = ЦветаСтиля.ЦветАкцента;
	НоваяДекорацияНадпись.Шрифт = Новый Шрифт(, 12);
	НоваяДекорацияНадпись.Заголовок = ЗаголовокДекорации;
	
	СворачиваемаяГруппа = рдв_РаботаСФормами.ДобавитьГруппу(Форма,
		"рдв_эл_СворачиваемаяГруппа" + ОбщееНаименование,
		"Группа" + ЗаголовокДекорации,,
		ГруппаЭлементов,,, 
		Ложь, 
		Группировка
	);
	
	СворачиваемаяГруппа.Видимость = НЕ Свернута;
	
	Возврат СворачиваемаяГруппа;
	
КонецФункции

// Размещает в таблице формы вновь созданные колонки таблицы.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения - владелец таблицы.
//  ТаблицаФормы - ТаблицаФормы - таблица, для которой добавляются колонки.
//  Колонки		 - СписокЗначений - перечень добавляемых колонок, где:
//					** Значение - относительный путь к данным колонки (напр., "Номенклатура")
//					** Представление - заголовок новой колонки.
//				 - Массив - относительные пути к данным колонок.
//				 - Строка - пути к данным колонок, разделенных символами "," и ";".
// 
// Возвращаемое значение:
//   - Неопределено.
//
Функция СоздатьКолонкиТаблицыФормы(Форма, ТаблицаФормы, Колонки) Экспорт
	
	Если ТипЗнч(Колонки) = Тип("Строка") Тогда
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.ЗагрузитьЗначения(СтрРазделить(Колонки, ",; ", Ложь));
	ИначеЕсли ТипЗнч(Колонки) = Тип("Массив") Тогда
		СписокКолонок = Новый СписокЗначений;
		СписокКолонок.ЗагрузитьЗначения(Колонки);
	Иначе
		СписокКолонок = Колонки;
	КонецЕсли;
	
	ПутьКДанным = ТаблицаФормы.ПутьКДанным;
	
	Для каждого Колонка Из СписокКолонок Цикл
		
		ИмяРеквизита = СокрЛП(Колонка.Значение);
		
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДаннымПоля = СтрШаблон("%1.%2", ПутьКДанным, ИмяРеквизита);
		
		ИмяПоля = СтрЗаменить(ИмяРеквизита, ".", "");
		ИмяПоля = СтрШаблон("%1%2", ТаблицаФормы.Имя, ИмяПоля);
		
		ДобавитьПолеВвода(Форма, ИмяПоля, Колонка.Представление, ТаблицаФормы, ПутьКДаннымПоля);
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьРеквизитФормы(Знач Форма, Знач ИмяРеквизита, Знач ТипРеквизита, Знач ИмяРодительскогоРеквизита = "", Знач Заголовок = "") Экспорт
	
	Если ИмяРеквизита = ИмяРодительскогоРеквизита Тогда
		ИмяРодительскогоРеквизита = "";
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = ИмяРеквизита;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипРеквизита);
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивТипов), ИмяРодительскогоРеквизита, Заголовок, Ложь);
	МассивРеквизитов.Добавить(Реквизит);
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Функция РеквизитыФормыМодифицированы(Форма) Экспорт
	
	РеквизитыФормыМодифицированы = Ложь;
	
	ИмяРеквизитаПроверки = ИмяРеквизитаПризнакаМодифицированностиРеквизитовФормы();
	Если ФормаСодержитРеквизит(Форма, ИмяРеквизитаПроверки) Тогда
		
		РеквизитыФормыМодифицированы = (Форма[ИмяРеквизитаПроверки] = Истина);
		
	КонецЕсли;
	
	Возврат РеквизитыФормыМодифицированы;
	
КонецФункции

Процедура УстановитьПризнакМодификацииРеквизитовФормы(Форма) Экспорт
	
	ИмяРеквизитаПроверки = ИмяРеквизитаПризнакаМодифицированностиРеквизитовФормы();
	
	Если Не ФормаСодержитРеквизит(Форма, ИмяРеквизитаПроверки) Тогда
		
		Реквизит = Новый РеквизитФормы(ИмяРеквизитаПроверки, Новый ОписаниеТипов("Булево"));
		
		ДобавляемыеРеквизиты = Новый Массив();
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	КонецЕсли;
	
	Форма[ИмяРеквизитаПроверки] = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяРеквизитаПризнакаМодифицированностиРеквизитовФормы()
	
	Возврат "рдв_ПризнакМодифицированностиФормы";
	
КонецФункции

Функция ФормаСодержитРеквизит(Форма, ИмяРеквизита)
	
	ФормаСодержитРеквизит = Ложь;
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из РеквизитыФормы Цикл
		
		Если СтрСравнить(Реквизит.Имя, ИмяРеквизита) = 0 Тогда
			ФормаСодержитРеквизит = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФормаСодержитРеквизит;
	
КонецФункции

#КонецОбласти

