
#Область ПрограммныйИнтерфейс

#Область Выгрузка

// Новый параметры объекта.
// 
// Возвращаемое значение:
//  Структура - Новый параметры объекта:
// * ИдентификаторСообщения - Строка - ид сообщения интеграции
// * ИдентификаторСобытия - Строка - ид события сообщения интеграции
// * ИмяИБ - Строка - имя информационной базы
//
Функция Новый_ПараметрыОбъекта() Экспорт
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИдентификаторСообщения", "");
	ПараметрыОбъекта.Вставить("ИдентификаторСобытия", "");
	ПараметрыОбъекта.Вставить("ИмяИБ", "");
	ПараметрыОбъекта.Вставить("ЭтоПодтверждениеПолучения", Ложь);
	ПараметрыОбъекта.Вставить("ТипОбъекта", "");
	ПараметрыОбъекта.Вставить("ДатаРегистрацииUTC", "");
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

// Конвертирует выгружаемый объект в сообщение обмена.
//
// Параметры:
//  ВыгружаемыйОбъект - СправочникСсылка.рдв_ВыгружаемыеОбъекты - Ссылка на выгружаемый объект.
//  ФорматОбмена - ПеречислениеСсылка.рдв_ФорматыОбмена - Формат выгрузки.
//
// Возвращаемое значение:
//  Строка - Текст сообщения обмена.
//
Функция ОбъектИБКДаннымВыгрузки(ВыгружаемыйОбъект) Экспорт
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ВыгружаемыйОбъект) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыгружаемыйОбъект, "Тип, ИдентификаторДанных, СсылкаНаОбъект,
																		|	ОтборНабораЗаписей, Успешно, ТекстОшибки");
	ДанныеИБ.ОтборНабораЗаписей = ДанныеИБ.ОтборНабораЗаписей.Выгрузить();
	
	Если ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей Или
		ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка Тогда
		МетаданныеВыгружаемогоОбъекта = Метаданные.НайтиПоПолномуИмени(ДанныеИБ.ИдентификаторДанных);
		ПКО = рдв_МенеджерОбмена.ПравилаКонвертацииОбъекта(МетаданныеВыгружаемогоОбъекта, "Отправка");
	Иначе
		ПКО = Неопределено;
	КонецЕсли;
	
	ПКООбъектаВыгрузки(ДанныеИБ, ПКО);
	
	рдв_МенеджерОбменаПереопределяемый.ПередВыгрузкойОбъекта(ДанныеИБ, ПКО, Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	ВыгружаемыеДанные = ПодготовитьДанныеИБКВыгрузке(ДанныеИБ, ПКО);
	
	Возврат ВыгружаемыеДанные;
	
КонецФункции

// Описывает структуру стандартного запроса, обязательные наборы полей
// 
// Параметры:
//  ДанныеЗапроса Данные запроса
//  ДанныеМетода Данные метода
// 
// Возвращаемое значение:
//  Структура - Структура стандартного запроса:
// * data 
// * meta - Структура - :
// ** id - Строка
// ** eventid - Строка 
// ** baseid - Строка 
// ** timestamp - Строка 
// ** direction - Строка - 
// ** objecttype - Строка
// 
Функция СтруктураСтандартногоЗапроса(ДанныеЗапроса, ДанныеМетода) Экспорт
	
	Возврат рдв_ИнтеграцияОбщегоНазначения.СтруктураСтандартногоЗапроса(ДанныеЗапроса, ДанныеМетода);
	
КонецФункции

// Формирует текст сообщения в зависимости от формата обмена по подготовленным к выгрузке данным.
//
// Параметры:
//	ВыгружаемыеДанные - Структура - Содержит структуру реквизитов выгружаемого объекта, подготовленную к выгрузке в соответствии с ПКО
//  ФорматОбмена - ПеречислениеСсылка.рдв_ФорматыОбмена - Формат обмена
//
// Возвращаемое значение:
//  Строка - Текст сообщения.
//
Функция СформироватьТекстСообщения(ВыгружаемыеДанные, ФорматОбмена = Неопределено) Экспорт
	
	Если ФорматОбмена = Неопределено Тогда
		ФорматОбмена = Перечисления.рдв_ФорматыОбмена.json;
	КонецЕсли;
	
	Если ФорматОбмена = Перечисления.рдв_ФорматыОбмена.json Тогда
		ТекстСообщения = рдв_ИнтеграцияОбщегоНазначения.ТекстJSONСтандартногоЗапроса(ВыгружаемыеДанные);
	КонецЕсли;
	
	рдв_МенеджерОбменаПереопределяемый.ПослеФормированияТекстаСообщения(ВыгружаемыеДанные, ФорматОбмена, ТекстСообщения);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПодготовитьПодтверждениеПолученияКВыгрузке(ДанныеИБ) Экспорт

	ВыгружаемыеДанные = Новый Структура;
	ВыгружаемыеДанные.Вставить("_ТипОбъекта", рдв_ИнтеграцияПовтИсп.ТипыВходящихСообщений().ПодтверждениеПолучения);
	ВыгружаемыеДанные.Вставить("Успешно", ДанныеИБ.Успешно);
	ВыгружаемыеДанные.Вставить("ТекстОшибки", ДанныеИБ.ТекстОшибки);
	
	Возврат ВыгружаемыеДанные;
	
КонецФункции

Функция ПодготовитьПроизвольныеДанныеКВыгрузке(ДанныеИБ) Экспорт

	Если ДанныеИБ.ИдентификаторДанных = "ping" Тогда
		Возврат рдв_МониторингДанных.ПодготовитьДанныеДиагностики();
	Иначе
		рдв_МенеджерОбменаПереопределяемый.ПодготовитьПроизвольныеДанныеКВыгрузке(ДанныеИБ);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Загрузка

// Конвертирует текст сообщения в зависимости от формата обмена в структуру загружаемых данных.
//
// Параметры:
//	ТекстСообщения - Строка - Содержит текст входящего сообщения
//  ФорматОбмена - ПеречислениеСсылка.рдв_ФорматыОбмена - Формат обмена
//
// Возвращаемое значение:
//  Текст сообщения.
//
Функция ПрочитатьТекстСообщения(ТекстСообщения, ФорматОбмена = Неопределено) Экспорт
	
	Если ФорматОбмена = Неопределено Тогда
		ФорматОбмена = Перечисления.рдв_ФорматыОбмена.json;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ФорматОбмена = Перечисления.рдв_ФорматыОбмена.json Тогда	
		Возврат рдв_ЧтениеJSON.ПрочитатьТекстСообщения(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Конвертирует сообщение обмена в объект БД.
//
// Параметры:
//  ТекстСообщения - Строка - Текст загружаемого сообщения.
//  ФорматОбмена - ПеречислениеСсылка.рдв_ФорматыОбмена - Формат выгрузки.
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект, НаборЗаписей и т.д - записанный в БД объект.
//
Функция СообщениеОбменаВОбъектИБ(Сообщение) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Истина);
	
	ЗагружаемыеОбъекты = Новый Соответствие;
	
	ОбъектыСообщения = Сообщение.data;
	Для Каждого ОбъектСообщения Из ОбъектыСообщения Цикл
		
		ЗагружаемыеДанные = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектСообщения);
		
		рдв_МенеджерОбменаПереопределяемый.ПередКонвертациейЗагружаемыхДанных(ЗагружаемыеДанные);

		Если ТипЗнч(ЗагружаемыеДанные) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		_ТипОбъекта = Неопределено;
		Если ЗагружаемыеДанные.Свойство("_ТипОбъекта", _ТипОбъекта) Тогда
			Если _ТипОбъекта = рдв_ИнтеграцияПовтИсп.ТипыВходящихСообщений().ПодтверждениеПолучения Тогда
				ЗагружаемыеОбъекты.Вставить("ПодтверждениеПолучения", ОбъектСообщения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		КонвертироватьЗагружаемыеДанные(ЗагружаемыеДанные);
		
		ЗагружаемыйОбъект = ИнициализироватьЗагружаемыйОбъект(ЗагружаемыеДанные);
			
		ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, ЗагружаемыеДанные);
		
		рдв_МенеджерОбменаПереопределяемый.ПередЗаписьюЗагружаемогоОбъекта(ЗагружаемыйОбъект, ЗагружаемыеДанные);
		
		Попытка
			ЗаписатьОбъект(ЗагружаемыйОбъект);
			ЗаписатьОбъектСБизнесЛогикой(ЗагружаемыйОбъект);
			рдв_МенеджерОбменаПереопределяемый.ПослеЗаписиЗагружаемогоОбъекта(ЗагружаемыйОбъект, ЗагружаемыеДанные);
			Успех = Истина;
			ТекстОшибки = "";
		Исключение
			Успех = Ложь;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Структура = Новый Структура;
		Структура.Вставить("Успех"						, Успех);
		Структура.Вставить("ЗагружаемыеДанные"			, ЗагружаемыеДанные);
		Структура.Вставить("ОбъектСообщения"			, ОбъектСообщения);
		Структура.Вставить("ТекстОшибки"				, ТекстОшибки);
		
		ЗагружаемыеОбъекты.Вставить(ЗагружаемыйОбъект, Структура);
		
	КонецЦикла;
	
	СообщениеВОбъектыИБ = Новый Структура;
	СообщениеВОбъектыИБ.Вставить("meta", Сообщение.meta);
	СообщениеВОбъектыИБ.Вставить("data", ЗагружаемыеОбъекты);
	
	Возврат СообщениеВОбъектыИБ;
	
КонецФункции

// Инициализирует (создает или получает) объект БД по загружаемым данным.
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру загружаемых данных
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект, НаборЗаписей и т.д. - инициализированный, но еще не записанный в БД объект
//
Функция ИнициализироватьЗагружаемыйОбъект(ЗагружаемыеДанные) Экспорт

	СвойстваЗагружаемогоОбъекта = ПолучитьСвойстваЗагружаемогоОбъекта(ЗагружаемыеДанные);
	
	ЗагружаемыйОбъект = ПолучитьЗагружаемыйОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);
	
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СвойстваЗагружаемогоОбъекта", СвойстваЗагружаемогоОбъекта);
	
	Возврат ЗагружаемыйОбъект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Выгрузка

// Конвертирует выгружаемый объект в структуру выгружаемых данных в соответствии с ПКО.
//
// Параметры:
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ПКО - СтрокаТаблицыЗначений - ПКО.
//
// Возвращаемое значение:
//  Структура - содержащая реквизиты объекта, конвертированные в примитивные типы в соответствии с ПКО.
//
Функция ПодготовитьДанныеИБКВыгрузке(ДанныеИБ, ПКО)
	
	Если ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.ПодтверждениеПолучения Тогда
		ВыгружаемыеДанные = ПодготовитьПодтверждениеПолученияКВыгрузке(ДанныеИБ);
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Произвольный Тогда
		ВыгружаемыеДанные = ПодготовитьПроизвольныеДанныеКВыгрузке(ДанныеИБ);
	ИначеЕсли Не ЗначениеЗаполнено(ПКО) Тогда
		ВыгружаемыеДанные = Неопределено;
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка Тогда
		ВыгружаемыеДанные = ПодготовитьСсылочныеДанныеКВыгрузке(ДанныеИБ, ПКО);
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей Тогда
		ВыгружаемыеДанные = ПодготовитьНаборЗаписейКВыгрузке(ДанныеИБ, ПКО);
	КонецЕсли;
	
	рдв_МенеджерОбменаПереопределяемый.ПриВыгрузкеОбъекта(ДанныеИБ, ПКО, ВыгружаемыеДанные);
	Возврат ВыгружаемыеДанные;	
	
КонецФункции

Процедура ПКООбъектаВыгрузки(ДанныеИБ, ПКО)
	
	Если СтрСравнить(ДанныеИБ.ИдентификаторДанных, "РегистрСведений.рдв_ХешиСообщенийИнтеграции") = 0  Тогда
		
		Отборы = ДанныеИБ.ОтборНабораЗаписей;
		СтрокаОтбораОбъект = Отборы.Найти("Объект", "Имя");
		
		Если СтрокаОтбораОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИзВнешнегоИсточника = рдв_ИнтеграцияОбщегоНазначения.ЭтотОбъектИзВнешнегоИсточника(СтрокаОтбораОбъект.Значение);
		Направление = "Отправка";
		Если ИзВнешнегоИсточника Тогда
			Направление = "Получение";
		КонецЕсли;
		
		ПКС = рдв_МенеджерОбмена.ПравилаКонвертацииОбъекта(СтрокаОтбораОбъект.Значение.Метаданные(), Направление);
		
		Если ПКС = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПКСПКО = ПКО.КонвертацияШапки.Найти("Объект", "ИмяРеквизита");
		ПКСПКО.ИмяПКО = ПКС.ИмяПКО;
		
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует выгружаемый объект с типом "Набор записей" в структуру выгружаемых данных в соответствии с ПКО.
//
// Параметры:
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ПКО - Строка таблицы значений - ПКО.
//
// Возвращаемое значение:
//  Структура, содержащая реквизиты объекта, конвертированные в примитивные типы в соответствии с ПКО.
//
Функция ПодготовитьНаборЗаписейКВыгрузке(ДанныеИБ, ПКО)

	ТекстЗапроса = ТекстЗапросаКНаборуЗаписей(ДанныеИБ, ПКО);	
	рдв_МенеджерОбменаПереопределяемый.ПриФормированииТекстаЗапроса(ДанныеИБ, ПКО, ТекстЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ДанныеИБ, ТекстЗапроса);
	ВыгружаемыеДанные = ОбработатьРезультатЗапросаКВыгрузке(РезультатЗапроса, ДанныеИБ, ПКО);

	ТаблицаОтбора = ПодготовитьТаблицуОтбора(ДанныеИБ, ПКО);
	ТекстЗапроса = ТекстЗапросаКОтборуНабораЗаписей(ТаблицаОтбора, ПКО);
	РезультатЗапроса = ВыполнитьЗапрос(ТаблицаОтбора, ТекстЗапроса);
	Отбор = ОбработатьРезультатЗапросаКВыгрузке(РезультатЗапроса, ТаблицаОтбора, ПКО);
	ВыгружаемыеДанные.Вставить("Отбор", Отбор);

	Возврат ВыгружаемыеДанные;
	
КонецФункции

// Возвращает таблицу значений, которая содержит данные отбора набора записей.
//
// Параметры:
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ПКО - Строка таблицы значений - ПКО.
//
// Возвращаемое значение:
//  ТаблицаЗначений, содержащая данные отбора набора записей.
//
Функция ПодготовитьТаблицуОтбора(ДанныеИБ, ПКО)
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	Для Каждого СтрокаОтбора Из ДанныеИБ.ОтборНабораЗаписей Цикл
		Если ЗначениеЗаполнено(СтрокаОтбора.Значение) Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(СтрокаОтбора.Значение));
			ТаблицаОтбора.Колонки.Добавить(СтрокаОтбора.Имя, Новый ОписаниеТипов(МассивТипов));
		Иначе
			ТаблицаОтбора.Колонки.Добавить(СтрокаОтбора.Имя);
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	Для Каждого СтрокаОтбора Из ДанныеИБ.ОтборНабораЗаписей Цикл
		НоваяСтрока[СтрокаОтбора.Имя] = СтрокаОтбора.Значение;
	КонецЦикла;
	
	Возврат ТаблицаОтбора;
	
КонецФункции

// Конвертирует выгружаемый объект с типом "Ссылка" в структуру выгружаемых данных в соответствии с ПКО.
//
// Параметры:
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ПКО - Строка таблицы значений - ПКО.
//
// Возвращаемое значение:
//  Структура, содержащая реквизиты объекта, конвертированные в примитивные типы в соответствии с ПКО.
//
Функция ПодготовитьСсылочныеДанныеКВыгрузке(ОбъектИБ, ПКО)
	
	ТекстЗапроса = ТекстЗапросаКСсылочнымДанным(ОбъектИБ.СсылкаНаОбъект, ПКО);
	рдв_МенеджерОбменаПереопределяемый.ПриФормированииТекстаЗапроса(ОбъектИБ, ПКО, ТекстЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(ОбъектИБ, ТекстЗапроса);
	ВыгружаемыеДанные = ОбработатьРезультатЗапросаКВыгрузке(РезультатЗапроса, ОбъектИБ, ПКО);
	Возврат ВыгружаемыеДанные;
	
КонецФункции

// Устанавливает параметры и выполняет запрос к БД при выгрузке объекта.
//
// Параметры:
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ТекстЗапроса - Строка - Текст запроса к БД.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ВыполнитьЗапрос(ДанныеИБ, ТекстЗапроса)

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Если ТипЗнч(ДанныеИБ) = Тип("ТаблицаЗначений") Тогда
		Запрос.УстановитьПараметр("ТаблицаОтбора", ДанныеИБ);
	ИНачеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка Тогда
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.СсылкаНаОбъект);
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей Тогда
		Для Каждого ЭлементОтбора Из ДанныеИБ.ОтборНабораЗаписей Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Конвертирует результат запроса к БД в структуру выгружаемых данных.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса
//  ДанныеИБ - Структура - Структура, которая содержит реквизиты справочника "Выгружаемые объекты"
//  ПКО - Строка таблицы значений - ПКО.
//
// Возвращаемое значение:
//  Структура - содержащая реквизиты объекта, конвертированные в примитивные типы в соответствии с ПКО.
//
Функция ОбработатьРезультатЗапросаКВыгрузке(РезультатЗапроса, ДанныеИБ, ПКО)
	
	ВыгружаемыеДанные = Новый Структура;
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(ДанныеИБ) = Тип("ТаблицаЗначений") Тогда
		Выборка.Следующий();
		Для Каждого ПолеВыборки Из РезультатЗапроса.Колонки Цикл
			ЗначениеПоляВыборки = Выборка[ПолеВыборки.Имя];
			ДобавитьЗначениеПоляВВыгрузку(ВыгружаемыеДанные, ПолеВыборки.Имя, ЗначениеПоляВыборки);
		КонецЦикла;
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.Ссылка Тогда
	    ВыгружаемыеДанные.Вставить("_ИмяОбъекта", ПКО.ИмяОбъекта);
		ВыгружаемыеДанные.Вставить("_ТипЗначения", ДанныеИБ.СсылкаНаОбъект.Метаданные().ПолноеИмя());
		ВыгружаемыеДанные.Вставить("_GUID", Строка(ДанныеИБ.СсылкаНаОбъект.УникальныйИдентификатор()));
		рдв_МенеджерОбменаПереопределяемый.ПриВыгрузкеСсылки(ДанныеИБ.СсылкаНаОбъект, ВыгружаемыеДанные);
		Выборка.Следующий();
		Для Каждого ПолеВыборки Из РезультатЗапроса.Колонки Цикл
			ЗначениеПоляВыборки = Выборка[ПолеВыборки.Имя];
			Если ТипЗнч(ЗначениеПоляВыборки) = Тип("РезультатЗапроса") Тогда //это табл часть
				МассивЗаписей = Новый Массив;
				ВыборкаТабличнойЧасти = ЗначениеПоляВыборки.Выбрать();
				Пока ВыборкаТабличнойЧасти.Следующий() Цикл
					ВыгружаемаяСтрока = Новый Структура;
					Для Каждого ПолеВыборкиТЧ Из ЗначениеПоляВыборки.Колонки Цикл
						ЗначениеПоляТЧ = ВыборкаТабличнойЧасти[ПолеВыборкиТЧ.Имя];
						ДобавитьЗначениеПоляВВыгрузку(ВыгружаемаяСтрока, ПолеВыборкиТЧ.Имя, ЗначениеПоляТЧ);
					КонецЦикла;
					МассивЗаписей.Добавить(ВыгружаемаяСтрока);
				КонецЦикла;
				ВыгружаемыеДанные.Вставить(ПолеВыборки.Имя, МассивЗаписей);
			Иначе
				ДобавитьЗначениеПоляВВыгрузку(ВыгружаемыеДанные, ПолеВыборки.Имя, ЗначениеПоляВыборки);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДанныеИБ.Тип = Перечисления.рдв_ТипыВыгружаемыхОбъектов.НаборЗаписей Тогда
		МассивЗаписей = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ВыгружаемаяСтрока = Новый Структура;
			Для Каждого ПолеВыборки Из РезультатЗапроса.Колонки Цикл
				ЗначениеПоляВыборки = Выборка[ПолеВыборки.Имя];
				ДобавитьЗначениеПоляВВыгрузку(ВыгружаемаяСтрока, ПолеВыборки.Имя, ЗначениеПоляВыборки);
			КонецЦикла; 
			МассивЗаписей.Добавить(ВыгружаемаяСтрока);
		КонецЦикла;
		ВыгружаемыеДанные.Вставить("_ИмяОбъекта", ПКО.ИмяОбъекта);
		ВыгружаемыеДанные.Вставить("_ТипЗначения", ДанныеИБ.ИдентификаторДанных);
		ВыгружаемыеДанные.Вставить("Записи", МассивЗаписей);
	КонецЕсли;
	
	Возврат ВыгружаемыеДанные;
	
КонецФункции

// Конвертирует и добавляет значения поля выборки запроса в структуру выгружаемых данных.
//
// Параметры:
//	ВыгружаемыеДанные - Структура - Содержит структуру реквизитов выгружаемого объекта.
//  ПолеВыборки - Строка - Представление поля выборки в запросе
//  ЗначениеПоляВыборки - Произвольный - Значение поля выборки запроса, которое необходимо конвертировать.
//
Процедура ДобавитьЗначениеПоляВВыгрузку(ВыгружаемыеДанные, ПолеВыборки, ЗначениеПоляВыборки)
	
	ЭтоВложеннаяСтруктура = Ложь;
	КлючПолучателяЗначенияРеквизита = ПолеВыборки;
	
	Если ЗначениеЗаполнено(ЗначениеПоляВыборки) Тогда
		
		ПозицияРазделителя = СтрНайти(ПолеВыборки, "__");
		Если ПозицияРазделителя > 0 Тогда //это значения реквизитов реквизита, упаковываются во вложенную структуру
			ЭтоВложеннаяСтруктура = Истина;
			ИмяВложеннойСтруктуры = Лев(ПолеВыборки, ПозицияРазделителя - 1);
			КлючПолучателяЗначенияРеквизита = Прав(ПолеВыборки, СтрДлина(ПолеВыборки) - ПозицияРазделителя - 1);
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеПоляВыборки)) Тогда //это ссылочный реквизит, его гуид упаковывается во вложенную структуру
			ЭтоВложеннаяСтруктура = Истина;
			ИмяВложеннойСтруктуры = ПолеВыборки;
			ИмяОбъектаМетаданных = ЗначениеПоляВыборки.Метаданные().ПолноеИмя();
			ДобавитьЗначениеВСтруктуру(ВыгружаемыеДанные, ЭтоВложеннаяСтруктура, ИмяВложеннойСтруктуры, "_ТипЗначения", ИмяОбъектаМетаданных); 
			Если ОбщегоНазначения.ЭтоПеречисление(ЗначениеПоляВыборки.Метаданные()) Тогда
				ЗначениеПоляВыборки = ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПоляВыборки);
				КлючПолучателяЗначенияРеквизита = "_Значение";
			Иначе
				рдв_МенеджерОбменаПереопределяемый.ПриВыгрузкеСсылки(ЗначениеПоляВыборки, ВыгружаемыеДанные[ИмяВложеннойСтруктуры]);
				ЗначениеПоляВыборки = Строка(ЗначениеПоляВыборки.УникальныйИдентификатор());
				КлючПолучателяЗначенияРеквизита = "_GUID";
			КонецЕсли;
		Иначе

		КонецЕсли;
		ДобавитьЗначениеВСтруктуру(ВыгружаемыеДанные, ЭтоВложеннаяСтруктура, ИмяВложеннойСтруктуры, КлючПолучателяЗначенияРеквизита, ЗначениеПоляВыборки);
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует и добавляет значения поля выборки запроса в структуру выгружаемых данных.
//
// Параметры:
//	ВыгружаемыеДанные - Структура - Содержит структуру реквизитов выгружаемого объекта.
//  ЭтоВложеннаяСтруктура - Булево 
//				- Если ЛОЖЬ, это примитивный тип, данные необходимо поместить в структуру выгружаемого объекта
//				- Если ИСТИНА, это ссылочный тип, данные необходимо поместить во вложенную структуру, описывающую ссылочный реквизит
//  ИмяВложеннойСтруктуры - Строка - Имя структуры, которая содержит описание вложенного ссылочного реквизита.
//	КлючПолучателяЗначенияРеквизита - Имя реквизита, как он будет задан в структуре
//
Процедура ДобавитьЗначениеВСтруктуру(ВыгружаемыеДанные, ЭтоВложеннаяСтруктура, ИмяВложеннойСтруктуры = "", КлючПолучателяЗначенияРеквизита, ЗначениеПоляВыборки)

	Если ЭтоВложеннаяСтруктура Тогда
		Если Не ВыгружаемыеДанные.Свойство(ИмяВложеннойСтруктуры) Тогда
			ВыгружаемыеДанные.Вставить(ИмяВложеннойСтруктуры, Новый Структура);
		КонецЕсли;
		ПолучательЗначенияРеквизита = ВыгружаемыеДанные[ИмяВложеннойСтруктуры];
	Иначе
		ПолучательЗначенияРеквизита = ВыгружаемыеДанные;
	КонецЕсли;
	ПолучательЗначенияРеквизита.Вставить(КлючПолучателяЗначенияРеквизита, ЗначениеПоляВыборки);	
	
КонецПроцедуры

// Формирует текст запроса к БД в соответствии с ПКО.
//
// Параметры:
//	ОбъектИБ - Ссылка - Ссылка на выгружаемый объект.
//  ПКО - Строка - ПКО
//
// Возвращаемое значение:
//  Текст запроса.
//
Функция ТекстЗапросаКСсылочнымДанным(ОбъектИБ, ПКО)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	%СписокПолейШапки%
	|	%СписокПолейТабличныхЧастей%
	|ИЗ
	|	%ИмяОбъекта% КАК ОбъектВыгрузки
	|ГДЕ
	|	ОбъектВыгрузки.Ссылка = &Ссылка";
	СписокПолейШапки = "";
	
	КонвертацияРеквизитов = ПКО.КонвертацияШапки;
	Для Каждого Реквизит Из КонвертацияРеквизитов Цикл
		ДобавитьПолеВыборкиЗапроса(СписокПолейШапки, Реквизит.ИмяРеквизита, Реквизит.ИмяКлючаФормата);
		Если ЗначениеЗаполнено(Реквизит.ИмяПКО) Тогда
			ПравилоКонвертацииРеквизита = рдв_МенеджерОбмена.ПравилаКонвертацииПоИмениПКО(Реквизит.ИмяПКО, "Отправка");
			Если Не ЗначениеЗаполнено(ПравилоКонвертацииРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ВложенныйРеквизит Из ПравилоКонвертацииРеквизита.КонвертацияШапки Цикл
				Если ВложенныйРеквизит.Обязательный Тогда
					ИмяВложенногоРеквизита = Реквизит.ИмяРеквизита+"."+ВложенныйРеквизит.ИмяРеквизита;
					ИмяПоляВыборки = Реквизит.ИмяКлючаФормата+"__"+ВложенныйРеквизит.ИмяКлючаФормата;
					ДобавитьПолеВыборкиЗапроса(СписокПолейШапки, ИмяВложенногоРеквизита, ИмяПоляВыборки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СписокПолейТабличныхЧастей = "";
	Для Каждого КонвертацияТабличныхЧастей Из ПКО.КонвертацияТабличныхЧастей Цикл
		СписокПолейТабличнойЧасти = "";
		Для Каждого Реквизит Из КонвертацияТабличныхЧастей.КонвертацияСвойств Цикл
			ДобавитьПолеТЧВыборкиЗапроса(СписокПолейТабличнойЧасти, Реквизит.ИмяРеквизита, Реквизит.ИмяКлючаФормата);
			Если ЗначениеЗаполнено(Реквизит.ИмяПКО) Тогда
				ПравилоКонвертацииРеквизита = рдв_МенеджерОбмена.ПравилаКонвертацииПоИмениПКО(Реквизит.ИмяПКО, "Отправка");
				Если Не ЗначениеЗаполнено(ПравилоКонвертацииРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого ВложенныйРеквизит Из ПравилоКонвертацииРеквизита.КонвертацияШапки Цикл
					Если ВложенныйРеквизит.Обязательный Тогда
						ИмяВложенногоРеквизита = Реквизит.ИмяРеквизита+"."+ВложенныйРеквизит.ИмяРеквизита;
						ИмяПоляВыборки = Реквизит.ИмяКлючаФормата+"__"+ВложенныйРеквизит.ИмяКлючаФормата;
						ДобавитьПолеТЧВыборкиЗапроса(СписокПолейТабличнойЧасти, ИмяВложенногоРеквизита, ИмяПоляВыборки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла; 
        ДобавитьНачалоИКонецПоляТабличнойЧасти(СписокПолейТабличнойЧасти, КонвертацияТабличныхЧастей.ИмяТабличнойЧасти, КонвертацияТабличныхЧастей.ИмяКлючаФормата);
		ДобавитьТабличнуюЧастьВВыборку(СписокПолейТабличныхЧастей, СписокПолейТабличнойЧасти);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейШапки%", СписокПолейШапки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ОбъектИБ.Метаданные().ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейТабличныхЧастей%", СписокПолейТабличныхЧастей);
	
	Возврат ТекстЗапроса;
КонецФункции

// Формирует текст запроса к БД в соответствии с ПКО.
//
// Параметры:
//	ОбъектИБ - НаборЗаписей - Набор записей выгружаемого регистра.
//  ПКО - Строка - ПКО
//
// Возвращаемое значение:
//  Текст запроса.
//
Функция ТекстЗапросаКНаборуЗаписей(ОбъектИБ, ПКО)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	%СписокПолейШапки%
	|ИЗ
	|	%ИмяОбъекта% КАК ОбъектВыгрузки
	|ГДЕ
	|	%СписокПолейУсловий%";
	
	СписокПолейШапки = "";
	КонвертацияРеквизитов = ПКО.КонвертацияШапки;
	Для Каждого Реквизит Из КонвертацияРеквизитов Цикл
		ДобавитьПолеВыборкиЗапроса(СписокПолейШапки, Реквизит.ИмяРеквизита, Реквизит.ИмяКлючаФормата);
		Если ЗначениеЗаполнено(Реквизит.ИмяПКО) Тогда
			ПравилоКонвертацииРеквизита = рдв_МенеджерОбмена.ПравилаКонвертацииПоИмениПКО(Реквизит.ИмяПКО, "Отправка");
			Если Не ЗначениеЗаполнено(ПравилоКонвертацииРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ВложенныйРеквизит Из ПравилоКонвертацииРеквизита.КонвертацияШапки Цикл
				Если ВложенныйРеквизит.Обязательный Тогда
					ИмяВложенногоРеквизита = Реквизит.ИмяРеквизита+"."+ВложенныйРеквизит.ИмяРеквизита;
					ИмяПоляВыборки = Реквизит.ИмяКлючаФормата+"__"+ВложенныйРеквизит.ИмяКлючаФормата;
					ДобавитьПолеВыборкиЗапроса(СписокПолейШапки, ИмяВложенногоРеквизита, ИмяПоляВыборки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейШапки%", СписокПолейШапки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ОбъектИБ.ИдентификаторДанных);
	
	СписокПолейУсловий = "";
	Для Каждого ЭлементОтбора Из ОбъектИБ.ОтборНабораЗаписей Цикл
		ДобавитьУсловиеЗапроса(СписокПолейУсловий, "ОбъектВыгрузки", ЭлементОтбора.Имя); 
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейУсловий%", СписокПолейУсловий);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса к таблице отбора регистра в соответствии с ПКО.
//
// Параметры:
//	ТаблицаОтбора - ТаблицаЗначений - Таблица, которая содержит данные отбора регистра.
//  ПКО - Строка - ПКО
//
// Возвращаемое значение:
//  Текст запроса.
//
Функция ТекстЗапросаКОтборуНабораЗаписей(ТаблицаОтбора, ПКО)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	%СписокЭлементовОтбора%
	|ПОМЕСТИТЬ ОбъектВыгрузки
	|ИЗ
	|	&ТаблицаОтбора КАК ОбъектВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%СписокПолейОтбора%
	|ИЗ
	|	ОбъектВыгрузки КАК ОбъектВыгрузки";
	
		
	СписокЭлементовОтбора = "";
	СписокПолейОтбора = "";
	КонвертацияРеквизитов = ПКО.КонвертацияШапки;
	Для Каждого Реквизит Из КонвертацияРеквизитов Цикл
		Если ТаблицаОтбора.Колонки.Найти(Реквизит.ИмяРеквизита) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьПолеВыборкиЗапроса(СписокЭлементовОтбора, Реквизит.ИмяРеквизита, Реквизит.ИмяКлючаФормата);
		ДобавитьПолеВыборкиЗапроса(СписокПолейОтбора, Реквизит.ИмяРеквизита, Реквизит.ИмяКлючаФормата);
		Если ЗначениеЗаполнено(Реквизит.ИмяПКО) Тогда
			ПравилоКонвертацииРеквизита = рдв_МенеджерОбмена.ПравилаКонвертацииПоИмениПКО(Реквизит.ИмяПКО, "Отправка");
			Если Не ЗначениеЗаполнено(ПравилоКонвертацииРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			ТипРеквизитаСтрокой = ПравилоКонвертацииРеквизита.МетаданныеОбъекта.ПолноеИмя();
			Для Каждого ВложенныйРеквизит Из ПравилоКонвертацииРеквизита.КонвертацияШапки Цикл
				Если ВложенныйРеквизит.Обязательный Тогда
					ИмяВложенногоРеквизита = Реквизит.ИмяРеквизита+"."+ВложенныйРеквизит.ИмяРеквизита;
					ИмяПоляВыборки = Реквизит.ИмяКлючаФормата+"__"+ВложенныйРеквизит.ИмяКлючаФормата;
					ДобавитьТипизированноеПолеВыборкиЗапроса(СписокПолейОтбора, "ОбъектВыгрузки", Реквизит.ИмяРеквизита, ВложенныйРеквизит.ИмяРеквизита, ИмяПоляВыборки, ТипРеквизитаСтрокой);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокЭлементовОтбора%", СписокЭлементовОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейОтбора%", СписокПолейОтбора);
	
	Возврат ТекстЗапроса;
КонецФункции

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьУсловиеЗапроса(СписокПолейУсловий, ИмяОбъекта, ИмяРеквизита)

	Если СписокПолейУсловий <> "" Тогда
		СписокПолейУсловий = СписокПолейУсловий + "
		| И ";
	КонецЕсли;
	СписокПолейУсловий = СписокПолейУсловий + ИмяОбъекта+"."+ИмяРеквизита+" = &"+ИмяРеквизита;
	
КонецПроцедуры

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьПолеВыборкиЗапроса(СписокПолейШапки, ИмяРеквизита, ИмяПоляВыборки, ТипРеквизитаСтрокой = "")
	
	Если СписокПолейШапки <> "" Тогда
		СписокПолейШапки = СписокПолейШапки + ",
		| ";
	КонецЕсли;

	СписокПолейШапки = СписокПолейШапки + "ОбъектВыгрузки."+ИмяРеквизита+" КАК "+ИмяПоляВыборки;
	
КонецПроцедуры

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьТипизированноеПолеВыборкиЗапроса(СписокПолейШапки, ИмяТаблицы, ИмяРеквизита, ИмяВложенногоРеквизита, ИмяПоляВыборки, ТипРеквизитаСтрокой)
	
	Если СписокПолейШапки <> "" Тогда
		СписокПолейШапки = СписокПолейШапки + ",
		| ";
	КонецЕсли;

	СписокПолейШапки = СписокПолейШапки + "ВЫРАЗИТЬ("+ИмяТаблицы+"."+ИмяРеквизита+" КАК "+ТипРеквизитаСтрокой+")."+ИмяВложенногоРеквизита+" КАК "+ИмяПоляВыборки;
	
КонецПроцедуры

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьПолеТЧВыборкиЗапроса(СписокПолейТабличныхЧастей, ИмяРеквизита, ИмяПоляВыборки, ТипРеквизитаСтрокой = "")
	
	Если СписокПолейТабличныхЧастей <> "" Тогда
		СписокПолейТабличныхЧастей = СписокПолейТабличныхЧастей + ",
		| ";
	КонецЕсли;

	СписокПолейТабличныхЧастей = СписокПолейТабличныхЧастей + ИмяРеквизита+" КАК "+ИмяПоляВыборки;
	
КонецПроцедуры

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьНачалоИКонецПоляТабличнойЧасти(СписокПолейТабличнойЧасти, ИмяТабличнойЧасти, ИмяКлючаФормата) 

	СписокПолейТабличнойЧасти = ",
	|	ОбъектВыгрузки."+ИмяТабличнойЧасти+".(
	|	"+СписокПолейТабличнойЧасти + "
	|	) КАК "+ИмяТабличнойЧасти;
		
КонецПроцедуры

//служебная процедура, см. ТекстЗапросаКСсылочнымДанным 
Процедура ДобавитьТабличнуюЧастьВВыборку(СписокПолейТабличныхЧастей, СписокПолейТабличнойЧасти) 
  	
  	СписокПолейТабличныхЧастей = СписокПолейТабличныхЧастей + СписокПолейТабличнойЧасти;
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

// Конвертирует реквизиты загружаемого объекта.
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру загружаемых данных
//
Процедура КонвертироватьЗагружаемыеДанные(ЗагружаемыеДанные)

	Для Каждого КлючИЗначение Из ЗагружаемыеДанные Цикл
		Если КлючИЗначение.Ключ = "Отбор" Тогда
			ЗначенияОтбора = КлючИЗначение.Значение;
			КонвертироватьЗагружаемыеДанные(ЗначенияОтбора);
		ИначеЕсли Не ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда //это реквизит шапки
			ЗначениеРеквизита = КонвертироватьДанныеРеквизита(КлючИЗначение.Значение);
			ЗагружаемыеДанные[КлючИЗначение.Ключ] = ЗначениеРеквизита;                   
		Иначе
			ДанныеТЧ = КлючИЗначение.Значение;
			Для Каждого СтрокаТаблЧасти Из ДанныеТЧ Цикл
				Для Каждого КлючИЗначениеТЧ Из СтрокаТаблЧасти Цикл
					ЗначениеРеквизита = КонвертироватьДанныеРеквизита(КлючИЗначениеТЧ.Значение);
					СтрокаТаблЧасти[КлючИЗначениеТЧ.Ключ] = ЗначениеРеквизита;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//	Определяет служебные свойства загружаемого объекта БД
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру загружаемых данных
//
// Возвращаемое значение:
//   СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
Функция ПолучитьСвойстваЗагружаемогоОбъекта(ЗагружаемыеДанные)
	
	ТипЗначения = ЗагружаемыеДанные._ТипЗначения;
	
	ИмяОбъекта = Неопределено;
	ЗагружаемыеДанные.Свойство("_ИмяОбъекта", ИмяОбъекта);
	
	СвойстваЗагружаемогоОбъекта = Новый Структура;
	СвойстваЗагружаемогоОбъекта.Вставить("ЗагружаемыеДанные", ЗагружаемыеДанные);
	СвойстваЗагружаемогоОбъекта.Вставить("МенеджерОбъекта", Неопределено);
	СвойстваЗагружаемогоОбъекта.Вставить("ЭтоРегистр", Ложь);
	СвойстваЗагружаемогоОбъекта.Вставить("ЭтоДокумент", Ложь);
	СвойстваЗагружаемогоОбъекта.Вставить("ЭтоГруппа", Ложь);
	СвойстваЗагружаемогоОбъекта.Вставить("ПКО", Неопределено);
	
	рдв_МенеджерОбменаПереопределяемый.ОпределитьСвойстваЗагружаемогоОбъекта(СвойстваЗагружаемогоОбъекта);

	Если СвойстваЗагружаемогоОбъекта.МенеджерОбъекта = Неопределено Тогда
		СвойстваЗагружаемогоОбъекта.МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипЗначения);
		Если Лев(ИмяОбъекта, 8) = "Документ" Тогда
			СвойстваЗагружаемогоОбъекта.ЭтоДокумент = Истина;
		ИначеЕсли Лев(ИмяОбъекта, 7) = "Регистр" Тогда
			СвойстваЗагружаемогоОбъекта.ЭтоРегистр = Истина;
		ИначеЕсли ЗагружаемыеДанные.Свойство("ЭтоГруппа") И ЗагружаемыеДанные.ЭтоГруппа = Истина Тогда
			СвойстваЗагружаемогоОбъекта.ЭтоГруппа = Истина;
		КонецЕсли;
	КонецЕсли;

	Если СвойстваЗагружаемогоОбъекта.ПКО = Неопределено И ИмяОбъекта <> Неопределено Тогда
		СвойстваЗагружаемогоОбъекта.ПКО = рдв_МенеджерОбмена.ПравилаКонвертацииПоИмениОбъекта(ИмяОбъекта, "Получение");
	КонецЕсли;
	
	Возврат СвойстваЗагружаемогоОбъекта;
		
	
КонецФункции

//	Получает объект ИБ по загружаемым данным.
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, после конвертации реквизитов в объекты БД
//  СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект, НаборЗаписей и т.д.
//
Функция ПолучитьЗагружаемыйОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта)

	ЗагружаемыйОбъект = рдв_МенеджерОбменаПереопределяемый.ПолучитьЗагружаемыйОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);
	
	Если ЗагружаемыйОбъект <> Неопределено Тогда
		Возврат ЗагружаемыйОбъект;
	КонецЕсли;
	
	Если Не СвойстваЗагружаемогоОбъекта.ЭтоРегистр Тогда
		ЗагружаемыйОбъектСсылка = НайтиСсылкуНаОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);
		Если ЗначениеЗаполнено(ЗагружаемыйОбъектСсылка) Тогда
			СвойстваЗагружаемогоОбъекта.Вставить("Ссылка", ЗагружаемыйОбъектСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ЗагружаемыйОбъект = СоздатьЗагружаемыйОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);	

	Возврат ЗагружаемыйОбъект;
	
КонецФункции

//	Создает объект ИБ по загружаемым данным.
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, после конвертации реквизитов в объекты БД
//  СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
// Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект, НаборЗаписей и т.д.
//
Функция СоздатьЗагружаемыйОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта = Неопределено)

	Если СвойстваЗагружаемогоОбъекта = Неопределено Тогда
		СвойстваЗагружаемогоОбъекта = ПолучитьСвойстваЗагружаемогоОбъекта(ЗагружаемыеДанные);
	КонецЕсли;
	
	МенеджерОбъекта = СвойстваЗагружаемогоОбъекта.МенеджерОбъекта;
	
	Если СвойстваЗагружаемогоОбъекта.ЭтоРегистр Тогда
		ЗагружаемыйОбъект = МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого КлючИЗначение Из ЗагружаемыеДанные.Отбор Цикл
			ЗагружаемыйОбъект.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;   	
	Иначе
		ЗагружаемыйОбъектСсылка = Неопределено;
		СвойстваЗагружаемогоОбъекта.Свойство("Ссылка", ЗагружаемыйОбъектСсылка);
		УникальныйИдентификаторОбъекта = ЗагружаемыеДанные._GUID;
		Если ЗагружаемыйОбъектСсылка <> Неопределено Тогда
			ЗагружаемыйОбъект = ЗагружаемыйОбъектСсылка.ПолучитьОбъект();
		Иначе
			Если СвойстваЗагружаемогоОбъекта.ЭтоДокумент Тогда
				ЗагружаемыйОбъект = МенеджерОбъекта.СоздатьДокумент();
			ИначеЕсли СвойстваЗагружаемогоОбъекта.ЭтоГруппа Тогда
				ЗагружаемыйОбъект = МенеджерОбъекта.СоздатьГруппу();
			Иначе
				ЗагружаемыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
			ЗагружаемыйОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторОбъекта));
			ЗагружаемыйОбъект.УстановитьСсылкуНового(ЗагружаемыйОбъектСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗагружаемыйОбъект;
	
КонецФункции

//	Вызывается при конвертации ссылочных данных (объектов и реквизитов) в объект ИБ.
//	Выполняет поиск ссылки в БД
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//  СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка и т.д.
//
Функция НайтиСсылкуНаОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта = Неопределено)
	
	Если СвойстваЗагружаемогоОбъекта = Неопределено Тогда
		СвойстваЗагружаемогоОбъекта = ПолучитьСвойстваЗагружаемогоОбъекта(ЗагружаемыеДанные);
	КонецЕсли;
	
	МенеджерОбъекта = СвойстваЗагружаемогоОбъекта.МенеджерОбъекта;
	
	ЗагружаемыйОбъект = рдв_МенеджерОбменаПереопределяемый.НайтиСсылкуНаОбъект(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект) Тогда
		Возврат ЗагружаемыйОбъект;
	КонецЕсли;
	
	ЗагружаемыйОбъектСсылка = НайтиСсылкуНаОбъектПоИдентификатору(ЗагружаемыеДанные, МенеджерОбъекта);
	Если ЗначениеЗаполнено(ЗагружаемыйОбъектСсылка) Тогда
		Возврат ЗагружаемыйОбъектСсылка;
	КонецЕсли;
	
	ЗагружаемыйОбъектСсылка = НайтиСсылкуПоИмениПредопределенного(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта);
	Если ЗначениеЗаполнено(ЗагружаемыйОбъектСсылка) Тогда
		Возврат ЗагружаемыйОбъектСсылка;
	КонецЕсли;
	
	ЗагружаемыйОбъект = НайтиСсылкуНаОбъектПоИдентификаторуИсточника(ЗагружаемыеДанные);
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект) Тогда
		Возврат ЗагружаемыйОбъект;
	КонецЕсли;
	
	ПКО = СвойстваЗагружаемогоОбъекта.ПКО;
	ПоляПоиска = "";
	Если ЗначениеЗаполнено(ПКО) Тогда
		ПоляПоиска = ПКО.ПоляПоиска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляПоиска) Тогда
		ЗагружаемыйОбъектСсылка = НайтиСсылкуНаОбъектПоПолямПоиска(ЗагружаемыеДанные, ПКО.ПоляПоиска);
	КонецЕсли;
	
	Возврат ЗагружаемыйОбъектСсылка;
	
КонецФункции

//	Вызывается при конвертации ссылочных данных (объектов и реквизитов) в объект ИБ.
//	Выполняет поиск ссылки в БД по гуиду
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//  СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка и т.д.
//
Функция НайтиСсылкуНаОбъектПоИдентификатору(ЗагружаемыеДанные, МенеджерОбъекта)

	ЗагружаемыйОбъектСсылка = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗагружаемыеДанные._GUID));
	ЗагружаемыйОбъект = ЗагружаемыйОбъектСсылка.ПолучитьОбъект();
	Если ЗагружаемыйОбъект <> Неопределено Тогда
		Возврат ЗагружаемыйОбъектСсылка;
	КонецЕсли;
	
КонецФункции

Функция НайтиСсылкуПоИмениПредопределенного(ЗагружаемыеДанные, СвойстваЗагружаемогоОбъекта)
	
	Идентификатор = Неопределено;
	Если ЗагружаемыеДанные.Свойство("рдв_Идентификатор", Идентификатор) Тогда
		Предопределенный = СвойстваЗагружаемогоОбъекта.МенеджерОбъекта.Предопределенный(Идентификатор, Ложь);
		Возврат Предопределенный;
	КонецЕсли;
	
КонецФункции

Функция НайтиСсылкуНаОбъектПоИдентификаторуИсточника(ЗагружаемыеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовИсточника.Объект
	|ИЗ
	|	РегистрСведений.рдв_ИдентификаторыОбъектовИсточника КАК ИдентификаторыОбъектовИсточника
	|ГДЕ
	|	ИдентификаторыОбъектовИсточника.Идентификатор = &Идентификатор
	|	И ИдентификаторыОбъектовИсточника.ПолноеИмяИсточника = &ПолноеИмяИсточника";
	Идентификатор = ЗагружаемыеДанные._GUID;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	ПолноеИмяИсточника = ЗагружаемыеДанные._ТипЗначения;
	Запрос.УстановитьПараметр("ПолноеИмяИсточника", ПолноеИмяИсточника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Объект;
	
КонецФункции

//	Вызывается при конвертации ссылочных данных (объектов и реквизитов) в объект ИБ.
//	Выполняет поиск ссылки в БД по полям поиска
//
// Параметры:
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//  СвойстваЗагружаемогоОбъекта - Структура - коллекция свойств загружаемых данных. Реквизиты:
//      * МенеджерОбъекта - Менеджер - Менеджер загружаемого объекта:
//		* ЭтоРегистр - Булево - Признак того, что загружается регистр
//		* ЭтоДокумент - Булево - Признак того, что загружается документ
//		* ЭтоГруппа - Булево - Признак того, что загружается группа справочника
//		* ПКО - Строка таблицы значений - Правило конвертации объекта
//
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка и т.д.
//
Функция НайтиСсылкуНаОбъектПоПолямПоиска(ЗагружаемыеДанные, ПоляПоиска)
	
	Запрос = Новый Запрос;

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗагружаемыйОбъект.Ссылка КАК Ссылка
	|ИЗ
	|	%ИмяОбъекта% КАК ЗагружаемыйОбъект
	|ГДЕ
	|	%СписокПолейУсловий%";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ЗагружаемыеДанные._ТипЗначения);

	СписокПолейУсловий = "";
	МассивПолейПоиска = СтрРазделить(ПоляПоиска, ",");
	Для Каждого ПолеПоиска Из МассивПолейПоиска Цикл
		ДобавитьУсловиеЗапроса(СписокПолейУсловий, "ЗагружаемыйОбъект", ПолеПоиска); 
		Запрос.УстановитьПараметр(ПолеПоиска, ЗагружаемыеДанные[ПолеПоиска]);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СписокПолейУсловий%", СписокПолейУсловий);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

//	Заполняет инициализированный объект БД загружаемыми данными
//
// Параметры:
//	ЗагружаемыйОбъект - СправочникОбъект, ДокументОбъект, НаборЗаписей - Загружаемый объект
//	ЗагружаемыеДанные - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//
Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, ЗагружаемыеДанные)
	
	СвойстваЗагружаемогоОбъекта = ЗагружаемыйОбъект.ДополнительныеСвойства.СвойстваЗагружаемогоОбъекта;
	ПКО = СвойстваЗагружаемогоОбъекта.ПКО;
	
	Если СвойстваЗагружаемогоОбъекта.ЭтоРегистр Тогда
		Для Каждого ЗаписьРегистра Из ЗагружаемыеДанные.Записи Цикл
			НоваяЗапись = ЗагружаемыйОбъект.Добавить();
			Для Каждого РеквизитШапки Из ПКО.КонвертацияШапки Цикл
				ДанныеРеквизита = ЗаписьРегистра[РеквизитШапки.ИмяКлючаФормата];
				НоваяЗапись[РеквизитШапки.ИмяРеквизита] = ДанныеРеквизита;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого РеквизитШапки Из ПКО.КонвертацияШапки Цикл
			Если РеквизитШапки.ИмяРеквизита = "ЭтоГруппа" Тогда
				Продолжить;              	
			КонецЕсли;
			Если Не ЗагружаемыеДанные.Свойство(РеквизитШапки.ИмяКлючаФормата) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеРеквизита = ЗагружаемыеДанные[РеквизитШапки.ИмяКлючаФормата];
			ЗагружаемыйОбъект[РеквизитШапки.ИмяРеквизита] = ДанныеРеквизита;
		КонецЦикла;
		
		Для Каждого КонвертацияТабличныхЧастей Из ПКО.КонвертацияТабличныхЧастей Цикл
			ИмяТабличнойЧасти = КонвертацияТабличныхЧастей.ИмяТабличнойЧасти;
			Если ЗагружаемыеДанные.Свойство(ИмяТабличнойЧасти) Тогда
				ЗагружаемыйОбъект[ИмяТабличнойЧасти].Очистить();
				Для Каждого СтрокаТабличнойЧасти Из ЗагружаемыеДанные[ИмяТабличнойЧасти] Цикл
					НоваяСтрока = ЗагружаемыйОбъект[ИмяТабличнойЧасти].Добавить();
					Для Каждого РеквизитТЧ Из КонвертацияТабличныхЧастей.КонвертацияСвойств Цикл
						ДанныеРеквизита = Неопределено;
						СтрокаТабличнойЧасти.Свойство(РеквизитТЧ.ИмяКлючаФормата, ДанныеРеквизита);
						НоваяСтрока[РеквизитТЧ.ИмяРеквизита] = ДанныеРеквизита;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//	Конвертирует данные загружаемого реквизита. Выполняет поиск значений ссылочных реквизитов и конвертацию перечислений
//	
// Параметры:
//	ДанныеРеквизита - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//
// Возвращаемое значение:
//  Произвольное - приведенное к нужному типу значение реквизита объекта
//
Функция КонвертироватьДанныеРеквизита(ДанныеРеквизита)

	Если ТипЗнч(ДанныеРеквизита) = Тип("Строка") Тогда
		Попытка //пытаемся преобразовать в дату, если нет - возвращаем строку
			Значение = ПрочитатьДатуJSON(ДанныеРеквизита, ФорматДатыJSON.ISO);
		Исключение
			Значение = ДанныеРеквизита;
		КонецПопытки;
	ИначеЕсли ТипЗнч(ДанныеРеквизита) = Тип("Структура") И ДанныеРеквизита.Свойство("_ТипЗначения") Тогда
		ТипЗначения = ДанныеРеквизита._ТипЗначения;
		Если Лев(ТипЗначения, 12) = "Перечисление" Тогда
			Значение = КонвертироватьПеречисление(ДанныеРеквизита);
		Иначе
			Значение = КонвертироватьСсылку(ДанныеРеквизита);
		КонецЕсли;
	Иначе
		Значение = ДанныеРеквизита;
	КонецЕсли;
	
	//рдв_МенеджерОбменаПереопределяемый.ПослеКонвертацииДанныхРеквизита(Значение, ДанныеРеквизита);
	
	Возврат Значение;
		
	
КонецФункции

//	Конвертирует данные загружаемого реквизита с типом "Перечисление"
//	
// Параметры:
//	ДанныеРеквизита - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//
// Возвращаемое значение:
//  ПеречислениеСсылка - приведенное к нужному типу значение реквизита объекта
//
Функция КонвертироватьПеречисление(ДанныеРеквизита)
	
	ИмяОбъекта = ДанныеРеквизита._ТипЗначения;
	ЗначениеПеречисления = рдв_МенеджерОбменаПереопределяемый.ПолучитьЗначениеПеречисления(ДанныеРеквизита);
	Если ЗначениеПеречисления = Неопределено Тогда
		Если Метаданные.НайтиПоПолномуИмени(ИмяОбъекта) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
		Если ЗначениеЗаполнено(ДанныеРеквизита._Значение) Тогда
			ЗначениеПеречисления = МенеджерОбъекта[ДанныеРеквизита._Значение];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

//	Конвертирует данные загружаемого реквизита с типом "Ссылка".
//	Если ссылка не найдена, создает новый объект и заполняет обязательными реквизитами, переданными при выгрузке
//	
// Параметры:
//	ДанныеРеквизита - Структура - Содержит структуру реквизитов загружаемого объекта, до конвертации реквизитов в объекты БД
//
// Возвращаемое значение:
//  СправочникСсылка, ДокументСсылка и т.д. - приведенное к нужному типу значение реквизита объекта
//
Функция КонвертироватьСсылку(ДанныеРеквизита)

	СсылкаРеквизита = НайтиСсылкуНаОбъект(ДанныеРеквизита);
	Если Не ЗначениеЗаполнено(СсылкаРеквизита) Тогда
		ОбъектРеквизита = СоздатьЗагружаемыйОбъект(ДанныеРеквизита);
		ЗаполнитьЗначенияСвойств(ОбъектРеквизита, ДанныеРеквизита);
		ОбъектРеквизита.Записать();
		СсылкаРеквизита = ОбъектРеквизита.Ссылка;
	КонецЕсли;
	Возврат СсылкаРеквизита;
	
КонецФункции

//	Записывает загруженный объект БД
//
// Параметры:
//	ЗагружаемыйОбъект - СправочникОбъект, ДокументОбъект, НаборЗаписей - Загружаемый объект
//
Процедура ЗаписатьОбъектСБизнесЛогикой(ЗагружаемыйОбъект)
	
	ЭтоДокумент = ЗагружаемыйОбъект.ДополнительныеСвойства.СвойстваЗагружаемогоОбъекта.ЭтоДокумент;
	ЭтоРегистр = ЗагружаемыйОбъект.ДополнительныеСвойства.СвойстваЗагружаемогоОбъекта.ЭтоРегистр;
	
	Если ЭтоДокумент Тогда
		Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Ссылка) Тогда
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗагружаемыйОбъект.Ссылка, "Проведен, ПометкаУдаления");
			
			Если РеквизитыСсылки.Проведен Тогда
				Если ЗагружаемыйОбъект.ПометкаУдаления Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЗагружаемыйОбъект.УстановитьПометкуУдаления(Истина);
				ИначеЕсли Не ЗагружаемыйОбъект.Проведен Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе //был проведен, остался проведен
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			ИначеЕсли РеквизитыСсылки.ПометкаУдаления Тогда
				Если ЗагружаемыйОбъект.Проведен Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЗагружаемыйОбъект.УстановитьПометкуУдаления(Ложь);
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли Не ЗагружаемыйОбъект.ПометкаУдаления Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЗагружаемыйОбъект.УстановитьПометкуУдаления(Ложь);
				Иначе					
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			Иначе
				Если ЗагружаемыйОбъект.Проведен Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли ЗагружаемыйОбъект.ПометкаУдаления Тогда
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
					ЗагружаемыйОбъект.УстановитьПометкуУдаления(Истина);
				Иначе
					ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗагружаемыйОбъект.Проведен Тогда
				ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли ЗагружаемыйОбъект.ПометкаУдаления Тогда
				ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
				ЗагружаемыйОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоРегистр Тогда
		ЗагружаемыйОбъект.Записать();
	Иначе 
		Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Ссылка) Тогда
			РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗагружаемыйОбъект.Ссылка, "ПометкаУдаления");
			
			Если РеквизитыСсылки.ПометкаУдаления И Не ЗагружаемыйОбъект.ПометкаУдаления Тогда
				ЗагружаемыйОбъект.Записать();
				ЗагружаемыйОбъект.УстановитьПометкуУдаления(Ложь);
			ИначеЕсли Не РеквизитыСсылки.ПометкаУдаления И ЗагружаемыйОбъект.ПометкаУдаления Тогда
				ЗагружаемыйОбъект.Записать();
				ЗагружаемыйОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ЗагружаемыйОбъект.Записать();
			КонецЕсли;
		Иначе
			ЗагружаемыйОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ЗагружаемыйОбъект)
	
	ЗагружаемыйОбъект.ОбменДанными.Загрузка = Истина;
	ЗагружаемыйОбъект.Записать();
	ЗагружаемыйОбъект.ОбменДанными.Загрузка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти