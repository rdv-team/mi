
#Область ПрограммныйИнтерфейс

// Модуль бизнес логики интеграции. На него будут перенаправлены все вызовы для бизнес логики решения.
// 
// Возвращаемое значение:
//  Неопределено, ОбщийМодуль, Произвольный - Модуль бизнес логики интеграции
Функция МодульПрикладнойЛогики() Экспорт
	
	Возврат рдв_ИнтеграцияПереопределяемый.МодульПрикладнойЛогикиМониторингаДанных();
	
КонецФункции

Процедура РегламентОтправкиСообщенийДиагностики() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рдв_ОтправкаСообщенийДиагностики);
	
	ЗарегистрироватьСообщениеДиагностики();
	
КонецПроцедуры
																																			
Функция ПодготовитьДанныеДиагностики() Экспорт

	Возврат ДанныеКВыгрузке();	
	
КонецФункции

Процедура ЗаполнитьПравилаРегистрации(ПравилаРегистрации) Экспорт

	ВнешняяСистемаМониторинга = ВнешняяСистемаМониторинга();
	Если ЗначениеЗаполнено(ВнешняяСистемаМониторинга) Тогда
		ПравилаРегистрацииМониторинга = ПравилаРегистрации.СкопироватьКолонки();
		Для Каждого СтрокаПравил Из ПравилаРегистрации Цикл
			Если СтрокаПравил.ВнешняяСистема <> ВнешняяСистемаМониторинга Тогда
				СтрокаПравилМониторинга = ПравилаРегистрацииМониторинга.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПравилМониторинга, СтрокаПравил);
				СтрокаПравилМониторинга.ВнешняяСистема = ВнешняяСистемаМониторинга;
				СтрокаПравилМониторинга.АдресМетода = рдв_РегистрацияИзменений.АдресМетода(ВнешняяСистемаМониторинга);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПравилМониторинга Из ПравилаРегистрацииМониторинга Цикл
			СтрокаПравил = ПравилаРегистрации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПравил, СтрокаПравилМониторинга);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ВнешняяСистемаМониторинга() Экспорт
	
	Возврат МодульПрикладнойЛогики().ВнешняяСистемаМониторинга();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьСообщениеДиагностики()

	ВнешняяСистемаМонторинга = ВнешняяСистемаМониторинга();
	Если ВнешняяСистемаМонторинга = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пинг = Справочники.рдв_ВыгружаемыеОбъекты.СоздатьВыгружаемыйОбъектДиагностики();
	рдв_РегистрацияИзменений.ЗарегистрироватьДанныеДиагностики(ВнешняяСистемаМонторинга
																		, рдв_РегистрацияИзменений.АдресМетода(ВнешняяСистемаМонторинга, Пинг)
																		, Пинг);

КонецПроцедуры

Функция ДанныеКВыгрузке()
	
	ДанныеКВыгрузке = Новый Структура("incoming_queue, outgoing_queue", 0, 0); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.outgoing_queue КАК outgoing_queue,
	|	ВложенныйЗапрос.incoming_queue КАК incoming_queue
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК incoming_queue,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ рдв_РегистрацияИзменений.ДатаРегистрацииВМиллисекундах) КАК outgoing_queue
	|	ИЗ
	|		РегистрСведений.рдв_РегистрацияИзменений КАК рдв_РегистрацияИзменений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ рдв_ОчередиОбработкиДанных.ИдентификаторЗаписи),
	|		0
	|	ИЗ
	|		РегистрСведений.рдв_ОчередиОбработкиДанных КАК рдв_ОчередиОбработкиДанных
	|	ГДЕ
	|		рдв_ОчередиОбработкиДанных.Состояние <> ЗНАЧЕНИЕ(Перечисление.рдв_СостоянияОчередейОбработкиДанных.Выполнена)
	|		И рдв_ОчередиОбработкиДанных.ТипОчереди.ИмяОчереди = ""ОбработкаВходящихСообщений"") КАК ВложенныйЗапрос";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеКВыгрузке, Выборка);
	КонецЕсли;
	
	Возврат ДанныеКВыгрузке;
	
КонецФункции

#КонецОбласти
