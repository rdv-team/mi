
#Область ПрограммныйИнтерфейс

#Область JSON

Функция СтруктурироватьТекстJSON(ТекстJSON) Экспорт
	
	Возврат ПолучитьТекстJSON(ПолучитьДанныеJSON(ТекстJSON));
	
КонецФункции

Функция ПолучитьТекстJSON(ДанныеJSON) Экспорт
	
	Если ДанныеJSON = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПолучитьДанныеJSON(ТекстJSON, ПрочитатьВСоответствие = Ложь) Экспорт
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	
КонецФункции

Функция СтруктураСтандартногоЗапроса(ДанныеЗапроса, ДанныеМетода) Экспорт
	
	Если ДанныеЗапроса.ТипОбъекта = "ping" Тогда
		Направление = "ping";
	ИначеЕсли ДанныеЗапроса.ЭтоПодтверждениеПолучения Тогда
		Направление = "receiver";
	Иначе
		Направление = "sender";
	КонецЕсли;
	
	МетаданныеСообщения = Новый Структура;
	МетаданныеСообщения.Вставить("id", 			ДанныеЗапроса.ИдентификаторСообщения);
	МетаданныеСообщения.Вставить("eventid", 	ДанныеЗапроса.ИдентификаторСобытия);
	МетаданныеСообщения.Вставить("baseid", 		ДанныеЗапроса.ИмяИБ);
	МетаданныеСообщения.Вставить("timestamp", 	ДанныеЗапроса.ДатаРегистрацииUTC);
	МетаданныеСообщения.Вставить("direction", 	Направление);
	МетаданныеСообщения.Вставить("objecttype", 	ДанныеЗапроса.ТипОбъекта);
	
	ДанныеJSON = Новый Структура();
	ДанныеJSON.Вставить("data", ДанныеМетода);
	ДанныеJSON.Вставить("meta", МетаданныеСообщения);
								
	Возврат ДанныеJSON;
	
КонецФункции

Функция ТекстJSONСтандартногоЗапроса(Запрос) Экспорт
	
	ТекстJSON = ПолучитьТекстJSON(Запрос);
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Этот объект из внешнего источника.
// 
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - 
// 
// Возвращаемое значение:
//  Булево - Этот объект из внешнего источника
Функция ЭтотОбъектИзВнешнегоИсточника(СсылкаНаОбъект) Экспорт

	ПравилаРегистрации = рдв_РегистрацияИмененийПовтИсп.ИнициализироватьПравилаРегистрации();
	СтрокиПравил = ПравилаРегистрации.НайтиСтроки(Новый Структура("МетаданныеОбъекта", СсылкаНаОбъект.Метаданные()));
	
	Возврат СтрокиПравил.Количество() = 0;
	
КонецФункции

Функция СвязанныеИнформационныеБазыОбъекта(СсылкаНаОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовИсточника.ИнформационнаяБаза КАК ИнформационнаяБаза
	|ИЗ
	|	РегистрСведений.рдв_ИдентификаторыОбъектовИсточника КАК ИдентификаторыОбъектовИсточника
	|ГДЕ
	|	ИдентификаторыОбъектовИсточника.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	
	Базы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИнформационнаяБаза");
	
	Возврат Базы;
	
КонецФункции

// Очистить историю интеграции в регистрах контекст, сообщения, объекты
//
// Параметры:
//  НачалоПериода	 - Дата - 
//  КонецПериода	 - Дата - 
//
Процедура ОчиститьИсториюИнтеграции(НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	1
	|ИЗ
	|	РегистрСведений.рдв_СообщенияИнтеграции КАК рдв_СообщенияИнтеграции
	|ГДЕ
	|	рдв_СообщенияИнтеграции.ДатаЗаписиНачалоЧаса МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ рдв_СообщенияИнтеграции.СтатусОбработки = Значение(Перечисление.рдв_СтатусыОбработкиСообщений.Обработано)";
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = Нстр("ru='В периоде есть не обработанные сообщения.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	рдв_КонтекстСообщенийИнтеграции.ДатаЗаписиНачалоЧаса КАК ДатаЗаписиНачалоЧаса
	|ИЗ
	|	РегистрСведений.рдв_КонтекстСообщенийИнтеграции КАК рдв_КонтекстСообщенийИнтеграции
	|ГДЕ
	|	рдв_КонтекстСообщенийИнтеграции.ДатаЗаписиНачалоЧаса МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписиНачалоЧаса";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Набор = РегистрыСведений.рдв_КонтекстСообщенийИнтеграции.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаЗаписиНачалоЧаса.Установить(ВыборкаДетальныеЗаписи.ДатаЗаписиНачалоЧаса);
			Набор.Записать();
			
			Набор = РегистрыСведений.рдв_ОбъектыСообщенийИнтеграции.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаЗаписиНачалоЧаса.Установить(ВыборкаДетальныеЗаписи.ДатаЗаписиНачалоЧаса);
			Набор.Записать();
			
			Набор = РегистрыСведений.рдв_СообщенияИнтеграции.СоздатьНаборЗаписей();
			Набор.Отбор.ДатаЗаписиНачалоЧаса.Установить(ВыборкаДетальныеЗаписи.ДатаЗаписиНачалоЧаса);
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СообщениеВесьКонтекст(ИдентификаторСообщения) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеВесьКонтекст(ИдентификаторСообщения);
	
КонецФункции

Функция Сообщение(ИдентификаторСообщения) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.Сообщение(ИдентификаторСообщения);
	
КонецФункции

Функция СообщениеДанные(ИдентификаторСообщения) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеДанные(ИдентификаторСообщения);
	
КонецФункции

Функция СообщениеКонтекст(ИдентификаторСообщения, ИдентификаторКонтекста) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеКонтекст(ИдентификаторСообщения, ИдентификаторКонтекста);
	
КонецФункции

Функция СообщениеУдалить(ИдентификаторСообщения) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеУдалить(ИдентификаторСообщения);
	
КонецФункции

Функция СообщениеАктуальныйКонтекст(ИдентификаторСообщения) Экспорт
	
	Возврат РегистрыСведений.рдв_СообщенияИнтеграции.СообщениеАктуальныйКонтекст(ИдентификаторСообщения);
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ХешиВыгружаемогоОбъекта(ВыгружаемыйОбъект) Экспорт
	
	ХешиСохраненные = рдв_ХешиОбъектов.ХешиСохраненные(ВыгружаемыйОбъект);
	
	ХешиМассив = Новый Массив;
	Для Каждого Стр Из ХешиСохраненные Цикл
		Хеши = Новый Структура();
		Хеши.Вставить(Стр.рдв_Идентификатор, Стр.Хеш);
		ХешиМассив.Добавить(Хеши);
	КонецЦикла;
	
	Возврат Новый Структура("Хеши", ХешиМассив);
	
КонецФункции

#КонецОбласти

#КонецОбласти
