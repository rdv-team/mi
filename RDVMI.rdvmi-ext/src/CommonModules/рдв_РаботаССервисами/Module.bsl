#Область ПрограммныйИнтерфейс
	
Функция ПараметрыСервиса(ИмяИнтерфейса, ПредставлениеИнтерфейса) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяИнтерфейса", ИмяИнтерфейса);
	Параметры.Вставить("ПредставлениеИнтерфейса", ПредставлениеИнтерфейса);
	Параметры.Вставить("СтандартнаяСтруктураЗапроса", Истина);
	
	Возврат Параметры;
		
КонецФункции

Функция ИнициализироватьДанныеСервиса(ПараметрыСервиса, Запрос = Неопределено, ИмяВидаСообщения = "", Знач Направление = Неопределено, ИдентификаторСообщения = Неопределено) Экспорт
	
	ДанныеСервиса = ПолучитьСтруктуруДанныхСервиса(ПараметрыСервиса);
	ДанныеСервиса.ИмяВидаСообщения = ИмяВидаСообщения;
	
	Если ТипЗнч(Направление) = Тип("Строка") Тогда
		Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции[Направление];
	КонецЕсли;
	
	Если Направление <> Неопределено Тогда
		ДанныеСервиса.Направление = Направление;
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPЗапрос") Тогда
		ДанныеСервиса.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Исходящее;
	ИначеЕсли ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос") Тогда
		ДанныеСервиса.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Входящее;
	Иначе
		ДанныеСервиса.Направление = Перечисления.рдв_НаправленияСообщенийИнтеграции.Исходящее;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСервиса.ИдентификаторСообщения) Тогда
		Если Не ПустаяСтрока(ИдентификаторСообщения) Тогда
			ДанныеСервиса.ИдентификаторСообщения = ИдентификаторСообщения;
		Иначе
			ДанныеСервиса.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	рдв_РаботаССервисамиПереопределяемый.ПриИнициализацииДанныхСервиса(ДанныеСервиса);
			
	Возврат ДанныеСервиса;
	
КонецФункции

Функция ОбработатьВходящийЗапрос(ПараметрыСервиса, Запрос, ИмяВидаСообщения) Экспорт
	
	ДанныеСервиса = ИнициализироватьДанныеСервиса(ПараметрыСервиса, Запрос, ИмяВидаСообщения);
	ДанныеЗапроса = ДанныеЗапросаПоВходящемуЗапросу(Запрос, ДанныеСервиса);
	
	Попытка
		Если ПараметрыСервиса.СтандартнаяСтруктураЗапроса Тогда
			ДанныеЗапроса.Тело = Запрос.ПолучитьТелоКакСтроку();
			РазобратьДанныеСтандартногоЗапроса(ДанныеЗапроса, ДанныеСервиса);
		КонецЕсли;
	Исключение
		рдв_РаботаССервисами.ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, Неопределено, ДанныеСервиса);
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		РезультатОбработки = Неопределено;
		
		рдв_РаботаССервисамиПереопределяемый.ОбработатьВходящийЗапрос(ДанныеСервиса, ДанныеЗапроса, РезультатОбработки);
		
		Если РезультатОбработки = Неопределено Тогда
			Ошибка = НСтр("ru = 'Ошибка обработки входящего сообщения %1. Не найден обработчик.'");
			Ошибка = СтрШаблон(Ошибка, ИмяВидаСообщения);
			ВызватьИсключение Ошибка;
		ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("HTTPСервисОтвет") Тогда
			Ответ = РезультатОбработки;
		ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("Булево") Тогда
			Ответ = СформироватьСтандартныйОтветСервиса(ДанныеСервиса, РезультатОбработки);
		Иначе
			СтрураОтвета = СтруктураРезультатаОбработкиВходящегоЗапроса();
			ЗаполнитьЗначенияСвойств(СтрураОтвета, РезультатОбработки);
			Ответ  = СформироватьСтандартныйОтветСервиса(ДанныеСервиса, СтрураОтвета.Успешно, СтрураОтвета.Данные, СтрураОтвета.Ошибки);
		КонецЕсли;
		
	ИСключение
		рдв_РаботаССервисами.ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, Неопределено, ДанныеСервиса);
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеОтвета = ДанныеОтветаПоИсходящемуОтвету(Ответ, ДанныеСервиса);
	рдв_РаботаССервисами.ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, ДанныеОтвета, ДанныеСервиса);
	
	Возврат Ответ;
	
КонецФункции

Функция СтруктураРезультатаОбработкиВходящегоЗапроса() Экспорт
	Результат = Новый Структура("Успешно, Данные, Ошибки");
	Результат.Успешно = Ложь;
	Результат.Ошибки = Новый Массив();
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, ДанныеОтвета = Неопределено, ДанныеСервиса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Направление = ДанныеСервиса.Направление;
	Если ДанныеОтвета <> Неопределено Тогда
		ДатаОтвета = ДанныеОтвета.ДатаОтвета;
		ДатаОтветаМс = ДанныеОтвета.ДатаОтветаМс;
		КодСостоянияОтвета = ДанныеОтвета.КодСостоянияОтвета;
	Иначе
		ДатаОтвета = ТекущаяДата();
		ДатаОтветаМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КодСостоянияОтвета = 0;
	КонецЕсли;
	
	Если ДанныеЗапроса.Свойство("ИдентификаторСобытия") Тогда
		ИдентификаторСобытия = ДанныеЗапроса.ИдентификаторСобытия;
	Иначе
		ИдентификаторСобытия = "";
	КонецЕсли;
	
	СообщениеСсылка = Неопределено;
	ДанныеСервиса.Свойство("Сообщение", СообщениеСсылка);
	
	Если ЗначениеЗаполнено(СообщениеСсылка) Тогда
		СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();
	Иначе
		СообщениеОбъект = Справочники.рдв_СообщенияИнтеграции.СоздатьЭлемент();
	КонецЕсли;
	
	Интерфейс = Справочники.рдв_ИнтерфейсыИнтеграции.ПолучитьИнтерфейс(ДанныеСервиса);
	Если Не ЗначениеЗаполнено(Интерфейс) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ВидСообщения = Справочники.рдв_ВидыСообщенийИнтеграции.ПолучитьВидСообщения(Интерфейс, ДанныеСервиса.ИмяВидаСообщения);
	Если Не ЗначениеЗаполнено(ВидСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписыватьДанныеСообщений = Интерфейс.ЗаписыватьДанныеСообщений
		И ВидСообщения.ЗаписыватьДанныеСообщений;

	СообщениеОбъект.ДатаСообщения = ДанныеЗапроса.ДатаСообщения;
	СообщениеОбъект.Интерфейс = Интерфейс;
	СообщениеОбъект.Направление = Направление;
	СообщениеОбъект.ВидСообщения = ВидСообщения;
	СообщениеОбъект.РазмерСообщения = 0;
	СообщениеОбъект.ДатаОтвета = ДатаОтвета;
	СообщениеОбъект.РазмерОтвета = 0;
	СообщениеОбъект.БазовыйURL = ДанныеЗапроса.БазовыйURL;
	СообщениеОбъект.ОтносительныйURL = ДанныеЗапроса.ОтносительныйURL;
	СообщениеОбъект.КодСостоянияОтвета = КодСостоянияОтвета;
	СообщениеОбъект.ДлительностьМс = ДатаОтветаМс - ДанныеЗапроса.ДатаСообщенияМс;
	СообщениеОбъект.ИдентификаторСообщения = ДанныеЗапроса.ИдентификаторСообщения;
	СообщениеОбъект.ИдентификаторСобытия = ИдентификаторСобытия;

	
	ТелоСообщения = "";
	ЗаголовкиСообщения = ДанныеЗапроса.Заголовки;
	
	Запрос = ДанныеЗапроса.Запрос;
	Если ТипЗнч(Запрос) = Тип("HTTPЗапрос") Или ТипЗнч(Запрос) = Тип("HTTPСервисЗапрос") Тогда
		ТелоСообщения = Запрос.ПолучитьТелоКакСтроку();
		СообщениеОбъект.РазмерСообщения = СтрДлина(ТелоСообщения);
		ЗаголовкиСообщения = Запрос.Заголовки;
	Иначе
		ТелоСообщения = ДанныеЗапроса.Тело;;
		СообщениеОбъект.РазмерСообщения = СтрДлина(ТелоСообщения);
	КонецЕсли;
	
	Для Каждого Заголовок Из ЗаголовкиСообщения Цикл
		ЗаполнитьЗначенияСвойств(СообщениеОбъект.ЗаголовкиСообщения.Добавить(), Заголовок);
	КонецЦикла;
	
	ТелоОтвета = "";
	ЗаголовкиОтвета = Новый Соответствие();
	
	Если ДанныеОтвета <> Неопределено Тогда
		ЗаголовкиОтвета = ДанныеОтвета.Заголовки;
		Ответ = ДанныеОтвета.Ответ;
		Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Или ТипЗнч(Ответ) = Тип("HTTPСервисОтвет") Тогда
			ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
			СообщениеОбъект.РазмерОтвета = СтрДлина(ТелоОтвета);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Заголовок Из ЗаголовкиОтвета Цикл
		ЗаполнитьЗначенияСвойств(СообщениеОбъект.ЗаголовкиОтвета.Добавить(), Заголовок);
	КонецЦикла;
	
	СообщениеОбъект.Наименование = СтрШаблон(
	  	НСтр("ru = '%1 %2 от %3 %4 - %5'"),
		Формат(Интерфейс),
		Формат(ВидСообщения),
		Формат(СообщениеОбъект.ДатаСообщения), 
		Формат(СообщениеОбъект.Направление),
		Формат(СообщениеОбъект.РазмерСообщения + СообщениеОбъект.РазмерОтвета)
	);
	
	СообщениеОбъект.Записать();
	СообщениеСсылка = СообщениеОбъект.Ссылка;
	ДанныеСервиса.Вставить("Сообщение", СообщениеСсылка);
	
	// Данные запросов.
	ДанныеЗаполнены = (СообщениеОбъект.РазмерСообщения > 0 Или СообщениеОбъект.РазмерОтвета > 0);
	Если ЗаписыватьДанныеСообщений И ДанныеЗаполнены Тогда
		МенеджерЗаписи = РегистрыСведений.рдв_ДанныеСообщенийИнтеграции.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СообщениеИнтеграции = СообщениеСсылка;
		МенеджерЗаписи.ДанныеСообщения = Новый ХранилищеЗначения(ТелоСообщения, Новый СжатиеДанных(9));
		МенеджерЗаписи.ДанныеОтвета = Новый ХранилищеЗначения(ТелоОтвета, Новый СжатиеДанных(9));
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	// Объекты запросов.
	Если ДанныеСервиса.ОбъектыСообщения.Количество() > 0 Тогда
		ОбъектыСообщения = РегистрыСведений.рдв_ОбъектыСообщенийИнтеграции.СоздатьНаборЗаписей();
		ОбъектыСообщения.Отбор.СообщениеИнтеграции.Установить(СообщениеСсылка);
		Для Каждого ОбъектСообщения Из ДанныеСервиса.ОбъектыСообщения Цикл
			Если Не ЗначениеЗаполнено(ОбъектСообщения) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ОбъектыСообщения.Добавить();
			НоваяЗапись.СообщениеИнтеграции = СообщениеСсылка;
			НоваяЗапись.ОбъектСообщения = ОбъектСообщения;
			Если НоваяЗапись.ОбъектСообщения <> ОбъектСообщения Тогда
				// TODO: вызывать исключение или регистрировать ошибку.
				ОбъектыСообщения.Удалить(НоваяЗапись);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если ОбъектыСообщения.Количество() > 0 Тогда
			ТаблицаНабора = ОбъектыСообщения.Выгрузить();
			ТаблицаНабора.Свернуть("СообщениеИнтеграции, ОбъектСообщения");
			ОбъектыСообщения.Загрузить(ТаблицаНабора);
			ОбъектыСообщения.Записать(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СообщениеСсылка;
	
КонецФункции

Процедура ДописатьОбъектВСообщениеИнтеграции(СообщениеИнтеграции, ОбъектСообщения) Экспорт
	
	Если Не ЗначениеЗаполнено(СообщениеИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСообщения = РегистрыСведений.рдв_ОбъектыСообщенийИнтеграции.СоздатьМенеджерЗаписи();
	ОбъектыСообщения.СообщениеИнтеграции = СообщениеИнтеграции;
	ОбъектыСообщения.ОбъектСообщения = ОбъектСообщения;
	
	Если Не ЗначениеЗаполнено(ОбъектыСообщения.ОбъектСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыСообщения.Записать();
	
КонецПроцедуры

Процедура ЗаписатьИсключениеСервисаВЖурналРегистрации(ПараметрыСервиса, ИмяВидаСообщения, ИнформацияОбОшибке) Экспорт
	
	ТекстИсключения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ТекстИсключенияПодробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ЧастиИмениСобытия = Новый Массив;
	ЧастиИмениСобытия.Добавить("РаботаССервисами");
	ЧастиИмениСобытия.Добавить(ПараметрыСервиса.ИмяИнтерфейса);
	ЧастиИмениСобытия.Добавить(ИмяВидаСообщения);
	
	ЗаписьЖурналаРегистрации(
		СтрСоединить(ЧастиИмениСобытия, "."),
		УровеньЖурналаРегистрации.Ошибка,,
		ТекстИсключенияПодробно
	);
	
КонецПроцедуры

Функция ВыполнитьЗапросКСервису(ДанныеЗапроса, ДанныеСервиса) Экспорт
	
	ДанныеОтвета = ВыполнитьЗапросСлужебный(ДанныеЗапроса);
		
	ЗаписатьСообщениеИнтеграции(ДанныеЗапроса, ДанныеОтвета, ДанныеСервиса);
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ВыполнитьЗапрос(ДанныеСервиса, АдресМетода, ТекстСообщения, ВнешняяСистема)
	
	ДанныеЗапроса = рдв_РаботаССервисами.ДанныеЗапроса();
	ДанныеЗапроса.БазовыйURL = ВнешняяСистема.АдресСервиса;
	ДанныеЗапроса.ОтносительныйURL = АдресМетода;
	ДанныеЗапроса.Сервер = ВнешняяСистема.Сервер;
	ДанныеЗапроса.Порт = ВнешняяСистема.Порт;
	ДанныеЗапроса.ЗащищенноеСоединение = ВнешняяСистема.ЗащищенноеСоединение;
	
	ДанныеАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ВнешняяСистема, "Пользователь, Пароль");
	ДанныеЗапроса.Пароль = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пароль), ДанныеАвторизации.Пароль, "");
	ДанныеЗапроса.Пользователь = ?(ЗначениеЗаполнено(ДанныеАвторизации.Пользователь), ДанныеАвторизации.Пользователь, "");
	
	ДанныеЗапроса.Тело = ТекстСообщения;
	ДанныеЗапроса.Заголовки = рдв_РаботаССервисами.ЗаголовкиСтандартногоЗапроса();
	ДанныеОтвета = рдв_РаботаССервисами.ВыполнитьЗапросКСервису(ДанныеЗапроса, ДанныеСервиса);
	
	рдв_РаботаССервисами.РазобратьДанныеСтандартногоОтвета(ДанныеОтвета);
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ВыгрузитьСообщение(ПараметрыСообщения) Экспорт	

	ИмяВидаЗапроса = ПараметрыСообщения.ИмяВидаЗапроса;
	ПараметрыСервиса = рдв_РаботаССервисами.ПараметрыСервиса(ПараметрыСообщения.ИмяИнтерфейса, ПараметрыСообщения.ПредставлениеИнтерфейса);
 	ДанныеСервиса = рдв_РаботаССервисами.ИнициализироватьДанныеСервиса(ПараметрыСервиса, Неопределено, ИмяВидаЗапроса);

 	ДанныеСервиса.ОбъектыСообщения = ПараметрыСообщения.МассивОбъектов;

	АдресМетода = ПараметрыСообщения.АдресМетода;
	РезультатЗапроса = ВыполнитьЗапрос(ДанныеСервиса, АдресМетода, ПараметрыСообщения.ТекстСообщения, ПараметрыСообщения.ВнешняяСистема);

	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДанныеСервиса

Функция ПолучитьСтруктуруДанныхСервиса(ПараметрыСервиса)
	
	ДанныеСервиса = Новый Структура;
	
	// Общие параметры
	
	ДанныеСервиса.Вставить("Направление");
	ДанныеСервиса.Вставить("ПараметрыСервиса", ПараметрыСервиса);
	ДанныеСервиса.Вставить("ИмяВидаСообщения");
	ДанныеСервиса.Вставить("ОбъектыСообщения", Новый Массив);
	ДанныеСервиса.Вставить("ИдентификаторСообщения");
	ДанныеСервиса.Вставить("Сообщение");
	
	Возврат ДанныеСервиса;
	
КонецФункции

#КонецОбласти

#Область ДанныеЗапроса

Функция ДанныеЗапроса(URI = Неопределено) Экспорт
	
	ДанныеЗапроса = Новый Структура();
	
	// Свойства для заполения
	
	ДанныеЗапроса.Вставить("HTTPМетод", "POST");
	ДанныеЗапроса.Вставить("БазовыйURL");
	ДанныеЗапроса.Вставить("ОтносительныйURL");
	ДанныеЗапроса.Вставить("Сервер");
	ДанныеЗапроса.Вставить("Порт", 80);
	ДанныеЗапроса.Вставить("ЗащищенноеСоединение", Ложь);
	ДанныеЗапроса.Вставить("Пользователь");
	ДанныеЗапроса.Вставить("Пароль");
	ДанныеЗапроса.Вставить("Тело");
	ДанныеЗапроса.Вставить("Заголовки", Новый Соответствие());
	ДанныеЗапроса.Вставить("Таймаут", 30);
	
	// Служебные свойства
	
	ДанныеЗапроса.Вставить("ДатаСообщения", ТекущаяДата());
	ДанныеЗапроса.Вставить("ДатаСообщенияМс", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДанныеЗапроса.Вставить("Запрос");
	ДанныеЗапроса.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор()));
	ДанныеЗапроса.Вставить("ДанныеТиповогоЗапроса");
	
	Если ЗначениеЗаполнено(URI) Тогда
		
		СтруктураURI = СтруктураURI(URI);
		Схема = СтруктураURI.Схема;
		
		Если Схема = "HTTPS" Тогда
			ДанныеЗапроса.ЗащищенноеСоединение = Истина;
			ДанныеЗапроса.Порт = 443;
		ИначеЕсли Схема = "HTTP" Или ПустаяСтрока(Схема) Тогда
			// Оставляем схему по умолчанию HTTP
		Иначе
			Ошибка = НСтр("ru = 'Не поддерживаемая схема: %1'");
			Ошибка = СтрШаблон(Ошибка, Схема);
			ВызватьИсключение Ошибка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураURI.Логин) Тогда
			ДанныеЗапроса.Пользователь = СтруктураURI.Логин;
			ДанныеЗапроса.Пароль = СтруктураURI.Пароль;
		КонецЕсли;
		
		ДанныеЗапроса.Сервер = СтруктураURI.Хост;
		Если ЗначениеЗаполнено(СтруктураURI.Порт) Тогда
			ДанныеЗапроса.Порт = СтруктураURI.Порт;
		КонецЕсли;
		
		ДанныеЗапроса.БазовыйURL = СтруктураURI.ПутьНаСервере;
		
	КонецЕсли;
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ДанныеЗапросаПоВходящемуЗапросу(Запрос, ДанныеСервиса) 
	
	ДанныеЗапроса = ДанныеЗапроса();
	
	ДанныеЗапроса.HTTPМетод = Запрос.HTTPМетод;
	ДанныеЗапроса.БазовыйURL = Запрос.БазовыйURL;
	ДанныеЗапроса.ОтносительныйURL = Запрос.ОтносительныйURL;
	ДанныеЗапроса.Заголовки = Новый Соответствие(Запрос.Заголовки);
	ДанныеЗапроса.Запрос = Запрос;
	
	Возврат ДанныеЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДанныеОтвета

Функция ДанныеОтвета() Экспорт
	
	ДанныеОтвета = Новый Структура();
	
	ДанныеОтвета.Вставить("Ответ");
	ДанныеОтвета.Вставить("КодСостоянияОтвета", 0);
	ДанныеОтвета.Вставить("Заголовки", Новый Соответствие());
	
	// Свойства транспорта
	
	ДанныеОтвета.Вставить("ОшибкаТранспорта", Ложь);
	ДанныеОтвета.Вставить("СообщениеТранспорта");
	
	// Служебный свойства
	
	ДанныеОтвета.Вставить("ДатаОтвета", ТекущаяДата());
	ДанныеОтвета.Вставить("ДатаОтветаМс", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ДанныеОтвета.Вставить("ДанныеТиповогоОтвета");
	ДанныеОтвета.Вставить("ОшибкиТиповогоОтветаСтрокой", "");
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ДанныеОтветаПоИсходящемуОтвету(Ответ, ДанныеСервиса)
	
	ДанныеОтвета = ДанныеОтвета();
	ДанныеОтвета.Ответ = Ответ;
	ДанныеОтвета.КодСостоянияОтвета = Ответ.КодСостояния;
	ДанныеОтвета.Заголовки = Ответ.Заголовки;
	
	Возврат ДанныеОтвета;
	
КонецФункции

#КонецОбласти

#Область СтандартныйЗапрос

Процедура РазобратьДанныеСтандартногоЗапроса(ДанныеЗапроса, ДанныеСервиса)
	
	ТиповыеДанные = Новый Структура("Данные, Мета");
	ДанныеЗапроса.Вставить("ДанныеТиповогоЗапроса", ТиповыеДанные);
	
	Если ДанныеЗапроса.HTTPМетод = "GET" Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеJSON = ПолучитьДанныеJSON(ДанныеЗапроса.Тело);
	ИСключение
		ОписаниеОшибки = ОписаниеОшибки();
		Ошибка = НСтр("ru = 'Ошибка разбора JSON входящего запроса.'");
		Ошибка = Ошибка + "
		|" + ОписаниеОшибки;
		ВызватьИсключение Ошибка;
	КонецПопытки;
	
	СостояниеЧтения = рдв_ЧтениеJSON.НовоеСостояниеЧтения();
	ТиповыеДанные.Данные = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "data",,, СостояниеЧтения);
	ТиповыеДанные.Мета = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "meta",,, СостояниеЧтения);
	ИдентификаторСообщения = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "meta.id", "Строка",, СостояниеЧтения);
	
	Если СостояниеЧтения.ЕстьОшибки Тогда
		ВызватьИсключение СостояниеЧтения.Ошибка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ДанныеСервиса.ИдентификаторСообщения = ИдентификаторСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстJSONСтандартногоЗапроса(ДанныеЗапроса, ДанныеМетода) Экспорт
	
	ДанныеJSON = Новый Структура();
	ДанныеJSON.Вставить("data", ДанныеМетода);
	ДанныеJSON.Вставить("meta", Новый Структура("id, eventid, baseid", ДанныеЗапроса.ИдентификаторСообщения, ДанныеЗапроса.ИдентификаторСобытия, ДанныеЗапроса.ИмяИБ));
	
	ТекстJSON = ПолучитьТекстJSON(ДанныеJSON);
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти

#Область СтандартныйОтвет

Функция СформироватьСтандартныйОтветСервиса(ДанныеСервиса, Успешно = Истина, Данные = Неопределено, Ошибки = Неопределено) Экспорт
	
	КодСостоянияОтвета = 200; // Транспорт отработал
	
	Ответ = Новый HTTPСервисОтвет(КодСостоянияОтвета);
	ДобавитьЗаголовокContentTypeApplicationJson(Ответ.Заголовки);
	ДобавитьЗаголовокContentTypeCharset(Ответ.Заголовки, "utf-8");
	
	СтруктураJSON = Новый Структура();
	СтруктураJSON.Вставить("success", Успешно);
	Если ЗначениеЗаполнено(Данные) Тогда
		СтруктураJSON.Вставить("data", Данные);
	КонецЕсли;
	
	ИдентификаторСообщения = ДанныеСервиса.ИдентификаторСообщения;
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Мета = Новый Структура("id", ИдентификаторСообщения);
		СтруктураJSON.Вставить("meta", Мета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		СтруктураJSON.Вставить("errors", Ошибки);
	КонецЕсли;
	
	ТекстJSON = ПолучитьТекстJSON(СтруктураJSON);
	Ответ.УстановитьТелоИзСтроки(ТекстJSON);

	Возврат Ответ;
	
КонецФункции

Процедура РазобратьДанныеСтандартногоОтвета(ДанныеОтвета) Экспорт
	
	Результат = Новый Структура("Успешно, Данные, Мета, Ошибки", Ложь);
	ДанныеОтвета.Вставить("ДанныеТиповогоОтвета", Результат);

	Если ДанныеОтвета.ОшибкаТранспорта Тогда
		Возврат;
	КонецЕсли;
	
	ТелоОтвета = "";
	Если ДанныеОтвета.Ответ <> Неопределено Тогда
		ТелоОтвета = ДанныеОтвета.Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Если ДанныеОтвета.КодСостоянияОтвета <> 200 Тогда
		ДанныеОтвета.ОшибкаТранспорта = Истина;
		СообщениеТранспорта = НСтр("ru = 'Ошибочный код состояния HTTP: %1'");
		СообщениеТранспорта = СтрШаблон(СообщениеТранспорта, Формат(ДанныеОтвета.КодСостоянияОтвета, "ЧН=; ЧГ="));
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			СообщениеТранспорта = СообщениеТранспорта + "
			|
			|" + ТелоОтвета;
		КонецЕсли;
		
		ДанныеОтвета.СообщениеТранспорта = СообщениеТранспорта;
		Возврат;
	КонецЕсли;
		
	ДанныеJSON = Неопределено;
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		ДанныеJSON = ПолучитьДанныеJSON(ТелоОтвета);
	КонецЕсли;
	
	Если ДанныеJSON <> Неопределено Тогда
		СостояниеЧтения = рдв_ЧтениеJSON.НовоеСостояниеЧтения();
		
		Результат.Успешно = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "success", "Булево", Истина, СостояниеЧтения);
		Результат.Данные = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "data",,, СостояниеЧтения);
		Результат.Мета = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "meta", "Структура",, СостояниеЧтения);
		Результат.Ошибки = рдв_ЧтениеJSON.ПрочитатьПолеДанных(ДанныеJSON, "errors",,, СостояниеЧтения);
		
		Если СостояниеЧтения.ЕстьОшибки Тогда
			ДанныеОтвета.ОшибкаТранспорта = Истина;
			ДанныеОтвета.ОписаниеОшибкиТранспорта = СостояниеЧтения.Ошибка;
			Возврат;
		КонецЕсли;
		
		
		Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
			ДанныеОтвета.ОшибкиТиповогоОтветаСтрокой = СтрСоединить(Результат.Ошибки, "
			|");
		Иначе
			ДанныеОтвета.ОшибкиТиповогоОтветаСтрокой = Строка(Результат.Ошибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовкиСтандартногоЗапроса() Экспорт
	Заголовки = Новый Соответствие();
	ДобавитьЗаголовокContentTypeApplicationJson(Заголовки);
	ДобавитьЗаголовокContentTypeCharset(Заголовки, "utf-8");
	
	Возврат Заголовки;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоОдинСервис(ДанныеСервиса, ПараметрыСервиса) Экспорт
	
	Возврат (ДанныеСервиса.ПараметрыСервиса.ИмяИнтерфейса = ПараметрыСервиса.ИмяИнтерфейса);
	
КонецФункции

Функция ВыполнитьЗапросСлужебный(ДанныеЗапроса) Экспорт
	
	ДанныеОтвета = ДанныеОтвета();
	
	АдресРесурса = "/";
	АдресРесурса = ДобавитьURL(АдресРесурса, ДанныеЗапроса.БазовыйURL);
	АдресРесурса = ДобавитьURL(АдресРесурса, ДанныеЗапроса.ОтносительныйURL);
	
	Заголовки = ДанныеЗапроса.Заголовки;
	Если Не ЗначениеЗаполнено(Заголовки) Тогда
		Заголовки = Новый Соответствие();
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	ДанныеЗапроса.Запрос = Запрос;
	Если ДанныеЗапроса.HTTPМетод <> "GET" И ДанныеЗапроса.Тело <> Неопределено Тогда
		Тело = ДанныеЗапроса.Тело;
		
		Если ТипЗнч(Тело) = Тип("Строка") Тогда
			Запрос.УстановитьТелоИзСтроки(Тело);
		ИначеЕсли ТипЗнч(Тело) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(Тело);
		Иначе
			Ошибка = НСтр("ru = 'Ошибка типа тела запроса'");
			ВызватьИсключение Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если ДанныеЗапроса.ЗащищенноеСоединение Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	КонецЕсли;
	
	Порт = ДанныеЗапроса.Порт;
	Если Не ЗначениеЗаполнено(Порт) Тогда
		Порт = ?(ДанныеЗапроса.ЗащищенноеСоединение, 443, 80);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		ДанныеЗапроса.Сервер,
		Порт,
		ДанныеЗапроса.Пользователь,
		ДанныеЗапроса.Пароль,,
		ДанныеЗапроса.Таймаут,
		ЗащищенноеСоединение
	);
	
	HTTPМетод = ДанныеЗапроса.HTTPМетод;
	Если ПустаяСтрока(HTTPМетод) Тогда
		HTTPМетод = "POST";
	КонецЕсли;
	
	Попытка
		ДанныеЗапроса.ДатаСообщения = ТекущаяДата();
		ДанныеЗапроса.ДатаСообщенияМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		//	Выполнение запроса
		Ответ = Соединение.ВызватьHTTPМетод(HTTPМетод, Запрос);
		
		ДанныеОтвета.Ответ = Ответ;
		ДанныеОтвета.КодСостоянияОтвета = Ответ.КодСостояния;
		ДанныеОтвета.Заголовки = Ответ.Заголовки;
	Исключение
		ДанныеОтвета.ОшибкаТранспорта = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ДанныеОтвета.СообщениеТранспорта = ОписаниеОшибки;
	КонецПопытки;
	
	ДанныеОтвета.ДатаОтвета = ТекущаяДата();
	ДанныеОтвета.ДатаОтветаМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Возврат ДанныеОтвета;
КонецФункции

#Область JSON

//	Преобразует текст в формате JSON в соответствие или структуру.
//
Функция ПолучитьДанныеJSON(ТекстJSON, ПрочитатьВСоответствие = Ложь) Экспорт
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	
КонецФункции

//	Преобразует произвольные данные в текст формата JOSN.
//
Функция ПолучитьТекстJSON(ДанныеJSON) Экспорт
	
	Если ДанныеJSON = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СтруктурироватьТекстJSON(ТекстJSON) Экспорт
	
	Возврат ПолучитьТекстJSON(ПолучитьДанныеJSON(ТекстJSON));
	
КонецФункции

#КонецОбласти

#Область СтандартныеЗаголовки

Функция ДобавитьЗаголовок(Заголовки, Ключ, Значение) Экспорт
	ТекущееЗначение = Заголовки[Ключ];
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Или ПустаяСтрока(ТекущееЗначение) Тогда 
		Заголовки.Вставить(Ключ, Значение);
	Иначе
		ЭлементыЗначения = СтрРазделить(ТекущееЗначение, ";");
		НовыеЭлементыЗначения = СтрРазделить(Значение, ";");
		Для ИндексЭлемента = 0 По ЭлементыЗначения.Количество() - 1 Цикл
			ЭлементыЗначения[ИндексЭлемента] = НРег(СокрЛП(ЭлементыЗначения[ИндексЭлемента]));
		КонецЦикла;
		Для Каждого НовыйЭлемент Из НовыеЭлементыЗначения Цикл
			НовыйЭлемент = НРег(СокрЛП(НовыйЭлемент));
			Если ЭлементыЗначения.Найти(НовыйЭлемент) = Неопределено Тогда
				ЭлементыЗначения.Добавить(НовыйЭлемент);
			КонецЕсли;
		КонецЦикла;
		Заголовки.Вставить(Ключ, СтрСоединить(ЭлементыЗначения, "; "));
	КонецЕсли;
КонецФункции

Процедура ДобавитьЗаголовокContentTypeApplicationJson(Заголовки) Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-Type", "application/json");
КонецПроцедуры

Процедура ДобавитьЗаголовокContentTypeTextPlain(Заголовки) Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-Type", "text/plain");
КонецПроцедуры

Процедура ДобавитьЗаголовокContentTypeCharset(Заголовки, Кодировка = "utf-8") Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-Type", "charset=" + Кодировка);
КонецПроцедуры

Процедура ДобавитьЗаголовокContentTransferEncodingBase64(Заголовки) Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-transfer-encoding", "base64");
КонецПроцедуры

Процедура ДобавитьЗаголовокContentDescription(Заголовки, ОписаниеСодержимого) Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-Description", ОписаниеСодержимого);
КонецПроцедуры

Процедура ДобавитьЗаголовокContentDespositionAttachment(Заголовки, ИмяФайла = "") Экспорт
	ДобавитьЗаголовок(Заголовки, "Content-Disposition", "attachment");
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		ЗначениеЗаголовка = СтрШаблон("filename=""%1""", ИмяФайла);
		ДобавитьЗаголовок(Заголовки, "Content-Disposition", ЗначениеЗаголовка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьURL(Знач ИсходныйURL, Знач ДобавляемыйURL) Экспорт
	
	Разделитель = "/";

	Если ПустаяСтрока(ДобавляемыйURL) Или (ДобавляемыйURL = Разделитель) Тогда
		Возврат ИсходныйURL;
	КонецЕсли;
		
	Если Прав(ИсходныйURL, 1) =  Разделитель Тогда
		ИсходныйURL = Лев(ИсходныйURL, СтрДлина(ИсходныйURL) - 1);
	КонецЕсли;
	
	Если Лев(ДобавляемыйURL, 1) <>  Разделитель Тогда
		ДобавляемыйURL = Разделитель + ДобавляемыйURL;
	КонецЕсли;
	
	Возврат ИсходныйURL + ДобавляемыйURL;
	
КонецФункции

#КонецОбласти