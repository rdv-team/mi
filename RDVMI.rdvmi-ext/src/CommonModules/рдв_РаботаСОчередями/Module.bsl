
#Область ПрограммныйИнтерфейс

Функция ДобавитьВОчередь(Знач ТипОчереди, 
	Объект, 
	Параметры = Неопределено, 
	РазделительПотока = "", 
	ПроверятьОбъектВОчереди = Ложь,
	ОписаниеСостояния = Неопределено,
	ДатаНачалаОбработкиUTC = Неопределено) Экспорт
	
	#Если Не Сервер Тогда
		
	Возврат рдв_РаботаСОчередямиВызовСервера.ДобавитьВОчередь(
		ТипОчереди,
		Объект,
		Параметры,
		РазделительПотока,
		ПроверятьОбъектВОчереди,
		ОписаниеСостояния,
		ДатаНачалаОбработкиUTC
	);
		
	#Иначе
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
	Если Не ТипОчереди.РегистрироватьОчереди Тогда
		Возврат Неопределено;
	КонецЕсли;         
	
	ДанныеПараметров = ДанныеПараметровЗаписиОчереди(Параметры);
		
	Если ПроверятьОбъектВОчереди Тогда
		МассивСостояний = Новый Массив;
		МассивСостояний.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Новая);
		МассивСостояний.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Ошибка);
		Если ПроверитьОбъектВОчереди(ТипОчереди, Объект, ДанныеПараметров.Хеш, МассивСостояний) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ЗаписьОчереди = РегистрыСведений[ИмяРегистраОчередей].СоздатьМенеджерЗаписи();
	ЗаписьОчереди.Объект = Объект;
			
	Если ЗначениеЗаполнено(Объект) И Не ЗначениеЗаполнено(ЗаписьОчереди.Объект) Тогда
		ТекстОшибки = ОшибкаДобавленияВОчередьОбъектаНеподдерживаемогоТипа(ТипОчереди, Объект);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Добавление в очередь"), 
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаписьОчереди.ТипОчереди = ТипОчереди;
	ЗаписьОчереди.РазделительПотока = РазделительПотока;
	ЗаписьОчереди.Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных.Новая;
	ЗаписьОчереди.ОписаниеСостояния = ОписаниеСостояния;
	ЗаписьОчереди.ХранилищеПараметров = ДанныеПараметров.Хранилище;
	ЗаписьОчереди.ХешПараметров = ДанныеПараметров.Хеш;
	ЗаписьОчереди.ПредставлениеПараметров = ПредставлениеПараметровЗаписиОчереди(Параметры);
	ЗаписьОчереди.ДатаСозданияUTC = ТекущаяУниверсальнаяДата();
	ЗаписьОчереди.ДатаИзмененияСостоянияUTC = ТекущаяУниверсальнаяДата();
	// RM-2481 14.07.2022 tosina@rdv-it.ru Закомментирована и заменена 1 строка. Использовать в место "ТекущаяДата()" функцию "ТекущаяДатаСеанса()"				
	//ЗаписьОчереди.ДатаСоздания = ТекущаяДата();
	ЗаписьОчереди.ДатаСоздания = ТекущаяДатаСеанса();
	ЗаписьОчереди.ДатаНачалаОбработкиUTC = ДатаНачалаОбработкиUTC;
	ЗаписьОчереди.Записать();
	
	Если ТипОчереди.ВестиЖурналОчередей Тогда
		ЗаписатьВЖурналОчередей(ЗаписьОчереди);
	КонецЕсли; 
	
	Возврат ЗаписьОчереди.ИдентификаторЗаписи;
	
	#КонецЕсли

КонецФункции

Процедура ИзменитьСостояниеОчереди(Знач ТипОчереди, Знач ИдентификаторЗаписи,
	Знач Состояние = Неопределено,
	Знач ОписаниеСостояния = Неопределено,
	Знач ДатаСледующейПопыткиUTC = Неопределено,
	Знач ОстановленаОбработка = Неопределено,
	ДлительностьОбработки = 0, 
	НовыеЗначенияСвойств = Неопределено) Экспорт
	
	// НовыеЗначенияСвойств - Стуркутра, позволяет установить значения
	// доступных для изменения свойств записи очереди.
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
	ДатаИзмененияСостоянияUTC = ТекущаяУниверсальнаяДата();
	
	Если ТипЗнч(Состояние) = Тип("Строка") Тогда
		Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных[Состояние];
	КонецЕсли;
	
	ТаблицаДанныхОчереди = ПолучитьДанныеОчередиПоИдентификатору(ИдентификаторЗаписи);
	Если Не ЗначениеЗаполнено(ТаблицаДанныхОчереди) Тогда
		Возврат;	
	КонецЕсли;
	
	Набор = РегистрыСведений[ИмяРегистраОчередей].СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи);
	
	Для Каждого ДанныеОчереди Из ТаблицаДанныхОчереди Цикл
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеОчереди);

		Если ЗначениеЗаполнено(Состояние) Тогда
			Если Запись.Состояние <> Состояние Тогда
				Запись.ДатаИзмененияСостоянияUTC = ДатаИзмененияСостоянияUTC;
			КонецЕсли;
			Запись.Состояние = Состояние;
		КонецЕсли;
		Если ОписаниеСостояния <> Неопределено Тогда
			Запись.ОписаниеСостояния = ОписаниеСостояния;
		КонецЕсли;
		
		Если Запись.Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных.Ошибка Тогда
			// RM-2481 14.07.2022 akopylov@rdv-it.ru. Вынос кода в отдельную процедуру.
			УстановитьСвойстваЗаписиОчередиСОшибкой(Запись, ДатаСледующейПопыткиUTC, ОстановленаОбработка);
		КонецЕсли;
					
		Если ДатаСледующейПопыткиUTC <> Неопределено Тогда
			Запись.ДатаСледующейПопыткиUTC = ДатаСледующейПопыткиUTC;
		КонецЕсли;
		
		Если ОстановленаОбработка <> Неопределено Тогда
			Запись.ОстановленаОбработка = ОстановленаОбработка;
		КонецЕсли;
		
		Если НовыеЗначенияСвойств <> Неопределено Тогда
			ДоступныеСвойства = Новый Структура(
			"ХранилищеПараметров,
			|РазделительПотока,
			|КоличествоПопытокОбработки,
			|ДатаСледующейПопыткиUTC,
			|ОстановленаОбработка");
			Для Каждого КлючИЗначение Из НовыеЗначенияСвойств Цикл
				Если ДоступныеСвойства.Свойство(КлючИЗначение.Ключ) Тогда
					Запись[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Запись.Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных.Ошибка
			Или Запись.ОстановленаОбработка Тогда
			Запись.ИдентификаторПотока = "";
		КонецЕсли;

		//++ RM-2481 14.06.2022 tosina@rdv-it.ru				
		//Если ТипОчереди.ВестиЖурналОчередей Тогда
		Если Запись.ОстановленаОбработка Или ТипОчереди.ВестиЖурналОчередей Тогда
		//-- RM-2481 14.06.2022 tosina@rdv-it.ru				
			ЗаписатьВЖурналОчередей(Запись, ДлительностьОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных.Выполнена Тогда
		Набор.Очистить();	
	КонецЕсли;
		
	Набор.Записать();
		
КонецПроцедуры

Процедура УстановитьСвойстваЗаписиОчередиСОшибкой(Запись, ДатаСледующейПопыткиUTC, ОстановленаОбработка)  
	
	// RM-2481 14.07.2022 akopylov@rdv-it.ru. Вынос кода в отдельную процедуру.
	
	// Обработка очереди с ошибкой.
	
	// Увеличение счетчика попыток.
	КоличествоПопыток = Запись.КоличествоПопытокОбработки + 1;
	Запись.КоличествоПопытокОбработки = КоличествоПопыток;
	
	//++ RM-2481 14.07.2022 tosina@rdv-it.ru.
	
	// Расчет даты завершения обработки записи очереди.
	ДлительностьПопытокДней = Запись.ТипОчереди.ДлительностьПопытокДней;
	Если Не ЗначениеЗаполнено(ДлительностьПопытокДней) Тогда
		ДлительностьПопытокДней = 1; // Один день по умолчанию.
	КонецЕсли;
	ДлительностьПопытокСек = рдв_ОбщегоНазначения.ВремяВСекундах(ДлительностьПопытокДней, "День");
	
	// В случае отложенной обработки, расчет выполняется от даты начала обработки.
	Если ЗначениеЗаполнено(Запись.ДатаНачалаОбработкиUTC) Тогда
		ДатаЗавершенияОбработкиUTC = Запись.ДатаНачалаОбработкиUTC + ДлительностьПопытокСек;
	Иначе 
		ДатаЗавершенияОбработкиUTC = Запись.ДатаСозданияUTC + ДлительностьПопытокСек;
	КонецЕсли;

	// Проверка условий приостановки обработки очереди.
	Если ОстановленаОбработка = Неопределено И Не Запись.ОстановленаОбработка Тогда
		
		// Приостановка обработки записи очереди при достижении граничных значений.
		ОстановленаОбработка = ТекущаяДатаСеанса() > ДатаЗавершенияОбработкиUTC
			Или  Запись.КоличествоПопытокОбработки >= Запись.ТипОчереди.КоличествоПопыток;
			
		Запись.ОстановленаОбработка = ОстановленаОбработка;
			
	КонецЕсли;
	
	// Расчет даты следующей попытки 
	Если Не Запись.ОстановленаОбработка И ДатаСледующейПопыткиUTC = Неопределено Тогда
		
		// Расчет даты следующей попытки:
		// - ТекДата + ВремяДо2Попытки * Коэфф ^ (КолПопыток - 1).
		КоэффициентУвеличения = Запись.ТипОчереди.КоэффициентУвеличенияВремениМеждуПопытками;
		
		//ДатаСледующейПопытки = ТекущаяУниверсальнаяДата()
		//	+ Запись.ТипОчереди.ВремяДоВторойПопыткиСек
		//	* Pow(КоэффициентУвеличения, КоличествоПопыток - 1);
		ВремяДоСледующейПопыткиСек = Запись.ТипОчереди.ВремяДоВторойПопыткиСек * Pow(КоэффициентУвеличения, КоличествоПопыток - 1);
		МаксВремяМеждуПопыткамиСек = рдв_ОбщегоНазначения.ВремяВСекундах(Запись.ТипОчереди.ДлительностьПопытокДней, "День");	
		
		ДатаОтсчетаСледующийПопыткиUTC =  ТекущаяУниверсальнаяДата();
		
		Если ВремяДоСледующейПопыткиСек > МаксВремяМеждуПопыткамиСек Тогда
			ДатаСледующейПопыткиUTC = ДатаОтсчетаСледующийПопыткиUTC + МаксВремяМеждуПопыткамиСек;
		Иначе
			ДатаСледующейПопыткиUTC = ДатаОтсчетаСледующийПопыткиUTC + ВремяДоСледующейПопыткиСек;
		КонецЕсли;					
		
		Если ДатаСледующейПопыткиUTC > ДатаЗавершенияОбработкиUTC Тогда
			ДатаСледующейПопыткиUTC = ДатаЗавершенияОбработкиUTC;
		КонецЕсли;
		
		Запись.ДатаСледующейПопыткиUTC = ДатаСледующейПопыткиUTC;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеОчереди(Знач ТипОчереди, ИдентификаторыОчереди, ПоляОчереди = "*") Экспорт
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОчереди", ТипОчереди);
	Запрос.УстановитьПараметр("ИдентификаторыОчереди", ИдентификаторыОчереди);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + ПоляОчереди + "
	|ИЗ
	|	РегистрСведений." + ИмяРегистраОчередей + " КАК Очереди
	|ГДЕ
	|	Очереди.ТипОчереди = &ТипОчереди
	|	И Очереди.ИдентификаторЗаписи В(&ИдентификаторыОчереди)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПроверитьОбъектВОчереди(Знач ТипОчереди, Объект, ХешПараметров, Состояния = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОчереди", ТипОчереди);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ХешПараметров", ХешПараметров);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ТипОчереди = &ТипОчереди
	|	И Очереди.Объект = &Объект
	|	И Очереди.ХешПараметров = &ХешПараметров
	|	И НЕ Очереди.ОстановленаОбработка
	|	И &ОтборПоСостоянию";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей);
	ОтборПоСостоянию = "ИСТИНА";
	Если Состояния <> Неопределено Тогда
		ОтборПоСостоянию = "Очереди.Состояние В (&Состояния)";
		Запрос.УстановитьПараметр("Состояния", Состояния);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСостоянию", ОтборПоСостоянию);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область РегламентыОбработкиОчередей

Процедура РегламентЗапускаОчередей(Знач ТипОчереди) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рдв_ЗапускИнтеграцииОтправка);
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
	    ТипОчередиСсылка = ПолучитьТипОчереди(ТипОчереди);
		
		ОбрабатыватьОчередьВЦикле = ТипОчередиСсылка.ПростаяНастройкаРегламента
			И ТипОчередиСсылка.ПериодОбработкиОчередиСек < МинимальныйПериодЗапускаРегламента();
			
		Если ОбрабатыватьОчередьВЦикле И ЭтоФайловаяИБ() Тогда
			
			// Корректировка расписания для файловой ИБ.
			
			ОчередьОбъект = ТипОчередиСсылка.ПолучитьОбъект();
			ОчередьОбъект.ПериодОбработкиОчередиСек = МинимальныйПериодЗапускаРегламента();
			
			РасписаниеОчереди = РасписаниеОбработкиОчереди(ТипОчередиСсылка);
			УстановитьРасписаниеОработкиОчереди(ОчередьОбъект, РасписаниеОчереди.Расписание,
				РасписаниеОчереди.Использование);
			
			ОчередьОбъект.Записать();

			ОбрабатыватьОчередьВЦикле = Ложь;
			
		КонецЕсли;
		
		Если ОбрабатыватьОчередьВЦикле Тогда
			ВыполнитьОбработкуОчередиВЦикле(ТипОчередиСсылка);
		Иначе
			ВыполнитьОбработкуОчереди(ТипОчередиСсылка);
		КонецЕсли;
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("РегламентЗапускаОчередей"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстИсключения
		);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РегламентОчисткиЖурналаОчередей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рдв_ЗапускИнтеграцииОтправка);
	
	ИмяРегистраЖурналаОчередей = ИмяРегистраЖурналаОчередей();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыОчередей.Ссылка КАК ТипОчереди,
	|	ТипыОчередей.ХранениеЖурналовДней КАК ХранениеЖурналовДней
	|ИЗ
	|	Справочник.рдв_ТипыОчередейОбработкиДанных КАК ТипыОчередей
	|ГДЕ
	|	ТипыОчередей.ХранениеЖурналовДней > 0";
	
	//++ RM-2481 14.06.2022 tosina@rdv-it.ru				
	//СекундВДне = Дата(1, 1, 2) - Дата(1, 1, 1);
	СекундВДне = рдв_ОбщегоНазначения.ВремяВСекундах(1, "День");
	//-- RM-2481 14.06.2022 tosina@rdv-it.ru				
	
	ВыборкаТипыОчередей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТипыОчередей.Следующий() Цикл
		
		// RM-2481 14.07.2022 tosina@rdv-it.ru Переименование реквизитов журнала.
		//ДатаЖурнала = ТекущаяУниверсальнаяДата() - ВыборкаТипыОчередей.ХранениеЖурналовДней * СекундВДне;
		ДатаЖурналаUTC = ТекущаяУниверсальнаяДата() - ВыборкаТипыОчередей.ХранениеЖурналовДней * СекундВДне;
		ДатаЖурналаМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВыборкаТипыОчередей.ХранениеЖурналовДней * СекундВДне * 1000;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипОчереди", ВыборкаТипыОчередей.ТипОчереди);
		// RM-2481 14.07.2022 tosina@rdv-it.ru Переименование реквизитов журнала.
		//Запрос.УстановитьПараметр("ДатаЖурнала", ДатаЖурнала);
		Запрос.УстановитьПараметр("ДатаЖурналаUTC", ДатаЖурналаUTC);
		Запрос.УстановитьПараметр("ДатаЖурналаМс", ДатаЖурналаМс);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЖурналОчереди.ТипОчереди КАК ТипОчереди,
		// RM-2481 14.07.2022 tosina@rdv-it.ru Переименование реквизитов журнала.
		//|	ЖурналОчереди.ДатаЖурналаЧас КАК ДатаЖурналаЧас
		|	ЖурналОчереди.ДатаЖурналаЧасUTC КАК ДатаЖурналаЧасUTC
		|ИЗ
		|	&ИмяРегистраЖурналаОчередей КАК ЖурналОчереди
		|ГДЕ
		// RM-2481 14.07.2022 tosina@rdv-it.ru Переименование реквизитов журнала.
		//|	ЖурналОчереди.ДатаЖурнала <= &ДатаЖурнала
		|	ЖурналОчереди.ДатаЖурналаUTC <= &ДатаЖурналаUTC
		|	И ЖурналОчереди.ДатаЖурналаМс <= &ДатаЖурналаМс
		|	И ЖурналОчереди.ТипОчереди = &ТипОчереди";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраЖурналаОчередей", "РегистрСведений." + ИмяРегистраЖурналаОчередей);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений[ИмяРегистраЖурналаОчередей].СоздатьНаборЗаписей();
			Набор.Отбор.ТипОчереди.Установить(Выборка.ТипОчереди);
			// RM-2481 14.07.2022 tosina@rdv-it.ru Переименование реквизитов журнала.
			//Набор.Отбор.ДатаЖурналаЧас.Установить(Выборка.ДатаЖурналаЧас);
			Набор.Отбор.ДатаЖурналаЧасUTC.Установить(Выборка.ДатаЖурналаЧасUTC);
			Набор.Записать();
		КонецЦикла;
		
	КонецЦикла;
	
	//++ RM-2481 19.07.2022 tosina@rdv-it.ru				
	// Удаление отмененных очередей обработки данных
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	
	// Удалять записи не сразу а с задержкой в размере [СрокХраненияДней] дней
	СрокХраненияДней = СрокХраненияОстановленнойОчередиДней();
	СрокХраненияСекунд = рдв_ОбщегоНазначения.ВремяВСекундах(СрокХраненияДней, "День");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаУдаленияОчередиUTC", ТекущаяУниверсальнаяДата() - СрокХраненияСекунд);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очереди.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	Очереди.Объект КАК Объект
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ОстановленаОбработка
	|	И Очереди.ДатаИзмененияСостоянияUTC <= &ГраницаУдаленияОчередиUTC";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей);
	
	ВыборкаОчереди = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОчереди.Следующий() Цикл
		Набор = РегистрыСведений[ИмяРегистраОчередей].СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЗаписи.Установить(ВыборкаОчереди.ИдентификаторЗаписи);
		Набор.Отбор.Объект.Установить(ВыборкаОчереди.Объект);
		Набор.Записать();
	КонецЦикла;
	//-- RM-2481 19.07.2022 tosina@rdv-it.ru				
	
КонецПроцедуры

Функция РасписаниеОбработкиОчереди(Знач ТипОчереди) Экспорт

    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);

	Результат = Новый Структура("Расписание, Использование", Новый РасписаниеРегламентногоЗадания, Ложь);
	рдв_РаботаСОчередямиПереопределяемый.РасписаниеРегламентаОбработкиОчереди(ТипОчереди, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьРасписаниеОработкиОчереди(ТипОчередиОбъект, Расписание, Использование) Экспорт
	
	ТипОчереди = ТипОчередиОбъект.Ссылка;

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Справочники.рдв_ТипыОчередейОбработкиДанных.ИмяОчереди(ТипОчереди));

	Если Использование И ПустаяСтрока(ТипОчередиОбъект.ИмяПользователяРегламента) Тогда
		ИмяПользователя = рдв_ОбщегоНазначения.ИмяИзСинонима(Строка(ТипОчередиОбъект));
		ИмяПользователя = СтрШаблон(НСтр("ru = 'робот_%1'"), ИмяПользователя);
		ТипОчередиОбъект.ИмяПользователяРегламента = ИмяПользователя;
	КонецЕсли;
	
	рдв_РаботаСОчередямиПереопределяемый.УстановитьРасписаниеРегламентаОбработкиОчереди(
		ТипОчередиОбъект,
		Расписание, 
		ПараметрыЗадания,
		ИмяПользователя,
		Использование
	);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапускОбработкиОчередей

Процедура ВыполнитьОбработкуОчереди(Знач ТипОчереди, ИдентификаторыОчереди = Неопределено, ТолькоВОдномПотоке = Неопределено) Экспорт

	// Выполнение очереди по заданному регламенту или программному вызову.
	
	УстановитьПривилегированныйРежим(Истина);
	
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);

	Если Не ТипОчереди.ОбрабатыватьОчереди Тогда
		ТекстОшибки = ОшибкаОбработкаОчередиОтключена(ТипОчереди);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Ошибка обработки"), 
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаписиОчереди = ВыбратьЗаписиОчередиДляОбработки(ТипОчереди, ИдентификаторыОчереди);
	Если ЗаписиОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоВОдномПотоке <> Истина
		И ТипОчереди.МногопоточнаяОбработка Тогда
		
		// Многопоточная обработка очередей.
		
		НаименованиеЗаданий = СтрШаблон(НСтр("ru = 'Обработка очереди ""%1""'"), Формат(ТипОчереди));

		ОписаниеПараметров = рдв_Многопоточность.НовоеОписаниеПараметров();
		
		рдв_Многопоточность.ДобавитьПараметр(ОписаниеПараметров, "ТипОчереди", ТипОчереди);
		рдв_Многопоточность.ДобавитьПараметр(ОписаниеПараметров, "ИдентификаторыОчереди",, "ИдентификаторЗаписи", Истина);
		
		РазделителиДанных = "";
		РазделителиПотока = ЗаписиОчереди.Скопировать(, "РазделительПотока");
		РазделителиПотока.Свернуть("РазделительПотока");
		Для Каждого СтрокаРазделителя Из РазделителиПотока Цикл
			Если Не ПустаяСтрока(СтрокаРазделителя.РазделительПотока) Тогда
				РазделителиДанных = "РазделительПотока";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Задание = рдв_Многопоточность.НовоеЗадание(
			"рдв_РаботаСОчередями.ПорционнаяОбработкаОчередиВнутр",
			ЗаписиОчереди,
			ТипОчереди.КоличествоПотоков,
			ТипОчереди.МаксЗаписейВПотоке,
			ОписаниеПараметров,
			РазделителиДанных,
			НаименованиеЗаданий
		);
		// Запуск заданий-потков обработки с ожиданием завершения всех заданий.
		рдв_Многопоточность.ВыполнитьЗадание(Задание);
		
	Иначе
		
		// Обработка очередей в 1 потоке.

		ИдентификаторыОчередиНаОбработку = ЗаписиОчереди.ВыгрузитьКолонку("ИдентификаторЗаписи");
		ПорционнаяОбработкаОчередиВнутр(ТипОчереди, ИдентификаторыОчередиНаОбработку);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ВыполнитьОбработкуОчередиВЦикле(Знач ТипОчереди)
	
	// Регламент для очередей, которые должны выполнятся
	// достаточно часто, например, чаще чем раз в минуту.
	
	// Для обработчки очередей запускается регламент, который
	// живет в течении достаточно длительного времени (10-60 мин.),
	// в течении которого выполняется бесконечный цикл с паузами
	// в каждый цикл выполняется проверка наличия элементов очереди,
	// если есть элементы, то запускается отдельное фоновое задание
	// для выполнение элементов очереди.
	
    ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
	// Проверка возможности обработки очереди в цикле.
	Если ЭтоФайловаяИБ() Тогда
		ТекстОшибки = ОшибкаНастройкиЗапускаРегламентаЧащеЧемРазВМинуту(ТипОчереди);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если Не ТипОчереди.ОбрабатыватьОчереди Тогда
		ТекстОшибки = ОшибкаОбработкаОчередиОтключена(ТипОчереди);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Ошибка обработки"), 
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ВремяЖизниЗаданияОбработкиМин = ТипОчереди.ВремяЖизниЗаданияОбработкиМин;
	Если Не ЗначениеЗаполнено(ВремяЖизниЗаданияОбработкиМин) Тогда
		// По умолчанию 15 минут
		ВремяЖизниЗаданияОбработкиМин = 15;
	КонецЕсли;
	
	ВремяЗавершенияОбработки = ТекущаяУниверсальнаяДата() + ВремяЖизниЗаданияОбработкиМин * 60;
	
	// Новая таблица потоков.
	Потоки = Новый ТаблицаЗначений;
	Потоки.Колонки.Добавить("ИдентификаторПотока"); 
	Потоки.Колонки.Добавить("ИдентификаторЗадания"); 
	Потоки.Колонки.Добавить("КоличествоЗаписейОчереди");
	
	// Используется при сортировки по наименьшему количеству
	// записвей в потоке. Если в 2-х потоках по 1 записи,
	// то выбирается с большей датой послежнего добавления.
	// Цель: приоритезация потоков с целью выбора долго
	// обрабатываемых потоков в последнюю очередь.
	Потоки.Колонки.Добавить("ДатаПоследнегоДобавления");
	
	// Используется при удалении потока для очистки элментов
	// из соответствия "РазделителиПотоков"
	Потоки.Колонки.Добавить("Разделители");

	// Соответствие разделителей потоков и идентификаторов.
	РазделителиПотоков = Новый Соответствие;
	
	ПериодОбработкиОчередиСек = ТипОчереди.ПериодОбработкиОчередиСек;
	Если Не ЗначениеЗаполнено(ПериодОбработкиОчередиСек) Тогда
		ПериодОбработкиОчередиСек = 1;
	КонецЕсли;

	Пока ТекущаяУниверсальнаяДата() < ВремяЗавершенияОбработки Цикл
		
		// Получение записей очереди к обработке.
		ЗаписиОчереди = ВыбратьЗаписиОчередиДляОбработки(ТипОчереди);
		Если ЗаписиОчереди = Неопределено Тогда
			// Пауза, если нет данных для обработки.
			Пауза(ПериодОбработкиОчередиСек);
			Продолжить;
		КонецЕсли;
				
		Если ТипОчереди.МногопоточнаяОбработка Тогда
			// Распределение записей очереди по потокам, запуск потоков.
			ЗапущеныНовыеЗадания = ЗапуститьОбработкуЗаписейОчередиВПотоках(
				ТипОчереди,
				Потоки,
				РазделителиПотоков,
				ЗаписиОчереди,
				ВремяЗавершенияОбработки
			);
			Если Не ЗапущеныНовыеЗадания Тогда
				// Если новых задани не запущено, то запускается пауза,
				// также как в случае, если нет новых заданий.
				Пауза(ПериодОбработкиОчередиСек);
				Продолжить;
			КонецЕсли;
		Иначе
			// Обработка в одном потоке.
			ИдентификаторыОчереди = ЗаписиОчереди.ВыгрузитьКолонку("ИдентификаторЗаписи");
			ПорционнаяОбработкаОчередиВнутр(ТипОчереди, ИдентификаторыОчереди);
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область МногопоточнаяОбработка

Функция ЗапуститьОбработкуЗаписейОчередиВПотоках(ТипОчереди, Потоки, РазделителиПотоков,
	ЗаписиОчереди, ВремяЗавершенияОбработки) 

	// Возвращает Истина, если отправлены на обработку новые записи очереди.
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	МаксКоличествоПотоков = ТипОчереди.КоличествоПотоков;
	Если Не ЗначениеЗаполнено(МаксКоличествоПотоков) Тогда
		МаксКоличествоПотоков = 1;
	КонецЕсли;
	
	МаксЗаписейВПотоке = ТипОчереди.МаксЗаписейВПотоке;
	
	// Идентификаторы фоновых заданий к удалению,
	// если не находятся в завершенном состоянии.
	ЗаданияКУдалению = Новый Массив;
	
	// Актуализация количества записей очереди в потоках по текущим данным.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОчереди", ТипОчереди);
	СостоянияОчереди = Новый Массив;
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Новая);
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Пропущена);
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Обработка);
	Запрос.УстановитьПараметр("Состояния", СостоянияОчереди); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очереди.ИдентификаторПотока КАК ИдентификаторПотока,
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписейОчереди
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ТипОчереди = &ТипОчереди
	|	И Очереди.Состояние В(&Состояния)
	|	И НЕ Очереди.ОстановленаОбработка
	|	И Очереди.ИдентификаторПотока <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	Очереди.ИдентификаторПотока";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей);
	
	ТекущиеПотоки = Запрос.Выполнить().Выгрузить();
	Если ТекущиеПотоки.Количество() > 0 Тогда
		Для Каждого СтрокаТекПотока Из ТекущиеПотоки Цикл
			СтрокаПотока = Потоки.Найти(СтрокаТекПотока.ИдентификаторПотока, "ИдентификаторПотока");
			Если СтрокаПотока <> Неопределено Тогда
				СтрокаПотока.КоличествоЗаписейОчереди = СтрокаТекПотока.КоличествоЗаписейОчереди;
			ИначеЕсли Не ПустаяСтрока(СтрокаТекПотока.ИдентификаторПотока) Тогда
				// Поток, оставщийся от предыщего цикла обработки потоков,
				// он считается как один из потоков, для ограничения количества потков,
				// будет автоматически завершен по контролю времени завершения обработки.
				СтрокаПотока = Потоки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПотока, СтрокаТекПотока);
				ЗаполнитьРазделителиПотоковПоДаннымОчереди(ТипОчереди, СтрокаПотока, РазделителиПотоков);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Нет записей в потоках.
		Для Каждого СтрокаПотока Из Потоки Цикл
			СтрокаПотока.КоличествоЗаписейОчереди = 0;
			Для Каждого РазделительПотока Из СтрокаПотока.Разделители Цикл
				РазделителиПотоков[РазделительПотока] = Неопределено;
			КонецЦикла;
			СтрокаПотока.Разделители.Очистить();
		КонецЦикла;
		// Фактически в потоках нет обработки,
		// выполняется очистка идентификаторов.
		Для Каждого СтрокаЗаписи Из ЗаписиОчереди Цикл
			СтрокаЗаписи.ИдентификаторПотока = "";
		КонецЦикла;			
	КонецЕсли;
	
	// Удаление неактивных потоков.
	КоличествоПотоков = Потоки.Количество();
	Для ОбратныйИндекс = 1 По КоличествоПотоков Цикл
		СтрокаПотока = Потоки[КоличествоПотоков - ОбратныйИндекс];
		Если ТекущиеПотоки.Найти(СтрокаПотока.ИдентификаторПотока, "ИдентификаторПотока") <> Неопределено Тогда
			// Есть поток в данных.
			Продолжить;
		КонецЕсли;
		ЗаданиеПотока = НайтиАктивноеЗаданиеПотокаОбработкиОчереди(СтрокаПотока);
		Если ЗаданиеПотока <> Неопределено Тогда
			// Задание потока ещё активно.
			Продолжить;
		КонецЕсли;
		// Удаления потока: нет в данных и нет активного задания
		Для Каждого РазделительПотока Из СтрокаПотока.Разделители Цикл
			РазделителиПотоков[РазделительПотока] = Неопределено;
		КонецЦикла;
		Потоки.Удалить(СтрокаПотока);
	КонецЦикла;

	// Назначение новых записей очереди на потоки обработки очереди
	// в соответствии с разделителями.
	ДобавленныеЗаписиВПотоки = Новый ТаблицаЗначений;
	ДобавленныеЗаписиВПотоки.Колонки.Добавить("ИдентификаторЗаписи");
	ДобавленныеЗаписиВПотоки.Колонки.Добавить("ИдентификаторПотока");
	
	Для Каждого СтрокаЗаписи Из ЗаписиОчереди Цикл
		
		Если Не ПустаяСтрока(СтрокаЗаписи.ИдентификаторПотока) Тогда
			// Запись очереди уже распределена на поток.
			Продолжить;
		КонецЕсли;
		
		// Определение идентификатора потока по разделителю записи.
		ИдентификаторПотока = РазделителиПотоков[СтрокаЗаписи.Объект];
		Если ИдентификаторПотока = Неопределено
			И Не ПустаяСтрока(СтрокаЗаписи.РазделительПотока) Тогда
			ИдентификаторПотока = РазделителиПотоков[СтрокаЗаписи.РазделительПотока];
		КонецЕсли;
		
		Если ИдентификаторПотока <> Неопределено Тогда
			// Добавление записи в существующий поток, найденному по разделителю,
			// с проверкой возможности добавления по ограничению записей.
			СтрокаПотока = Потоки.Найти(ИдентификаторПотока, "ИдентификаторПотока");
			// Есть строка потока не найдена, то будет добавлен новый поток.
			ДобавитьЗаписьОчередиВПоток(СтрокаЗаписи, Потоки, МаксЗаписейВПотоке,
				РазделителиПотоков, ДобавленныеЗаписиВПотоки, СтрокаПотока);
		ИначеЕсли Потоки.Количество() = 0 Тогда
			// Добавление нового потока для записи очереди.
			ДобавитьЗаписьОчередиВПоток(СтрокаЗаписи, Потоки, МаксЗаписейВПотоке,
				РазделителиПотоков, ДобавленныеЗаписиВПотоки);
		Иначе 
			
			ДобавленаЗапись = Ложь;
				
			// Добавление в существущий поток по приоритету до добавления нового потока.
			// Ищем существующий поток с наименьшим количеством записей.
			ПотокиКопия = Потоки.Скопировать();
			ПотокиКопия.Сортировать("КоличествоЗаписейОчереди, ДатаПоследнегоДобавления УБЫВ");
			Если Не ДобавленаЗапись И ПотокиКопия[0].КоличествоЗаписейОчереди < 2 Тогда
				СтрокаПотока = Потоки.Найти(ПотокиКопия[0].ИдентификаторПотока, "ИдентификаторПотока");
				ДобавленаЗапись = ДобавитьЗаписьОчередиВПоток(СтрокаЗаписи, Потоки, МаксЗаписейВПотоке,
					РазделителиПотоков, ДобавленныеЗаписиВПотоки, СтрокаПотока);
			КонецЕсли;
				
			// Добавление нового потока, если количество потоков меньше максимального.
			Если Не ДобавленаЗапись И Потоки.Количество() < МаксКоличествоПотоков Тогда
				ДобавленаЗапись = ДобавитьЗаписьОчередиВПоток(СтрокаЗаписи, Потоки, МаксЗаписейВПотоке,
					РазделителиПотоков, ДобавленныеЗаписиВПотоки);
			КонецЕсли;
				
			// Добавление в существующий поток, если достигнут максимум по количеству потоков. 	
			Если Не ДобавленаЗапись Тогда
				СтрокаПотока = Потоки.Найти(ПотокиКопия[0].ИдентификаторПотока, "ИдентификаторПотока");
				ДобавитьЗаписьОчередиВПоток(СтрокаЗаписи, Потоки, МаксЗаписейВПотоке,
					РазделителиПотоков, ДобавленныеЗаписиВПотоки, СтрокаПотока);
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	// Проверка состояния и запуск заданий обработки потоков.
	Для Каждого СтрокаПотока Из Потоки Цикл
		
		ЗаданиеПотока = НайтиАктивноеЗаданиеПотокаОбработкиОчереди(СтрокаПотока);
		Если ЗаданиеПотока <> Неопределено Тогда
			СтрокаПотока.ИдентификаторЗадания = ЗаданиеПотока.УникальныйИдентификатор;
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПотока = СтрокаПотока.ИдентификаторПотока;
		КлючЗадания = ИдентификаторПотока;
		
		НомерПотока = Формат(Потоки.Индекс(СтрокаПотока) + 1, "ЧГ=0");

		// Запуск нового фонового задания обработки. 
		ИмяМетодаЗадания = "рдв_РаботаСОчередями.ОработатьОчередиВПотоке";
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ТипОчереди);
		ПараметрыЗадания.Добавить(ИдентификаторПотока);
		ПараметрыЗадания.Добавить(ВремяЗавершенияОбработки);
		
		НаименованиеЗадания = НСтр("ru = '%1 - поток № %2 - %3'");
		НаименованиеЗадания = СтрШаблон(НаименованиеЗадания, ТипОчереди, НомерПотока, ИдентификаторПотока);
		
		ЗаданиеПотока = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыЗадания, КлючЗадания, НаименованиеЗадания);
		СтрокаПотока.ИдентификаторЗадания = ЗаданиеПотока.УникальныйИдентификатор;
		
	КонецЦикла;

	Если ДобавленныеЗаписиВПотоки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Возврат Истина;
		
КонецФункции

Функция НайтиАктивноеЗаданиеПотокаОбработкиОчереди(СтрокаПотока)
	
	// Проверка активности задания потока.
	Если ЗначениеЗаполнено(СтрокаПотока.ИдентификаторЗадания) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтрокаПотока.ИдентификаторЗадания);
		Если ФоновоеЗадание <> Неопределено Тогда
			Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				Возврат ФоновоеЗадание;
			ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				// Ошибка во внутренних механизмах обработки очередей,
				// заврешение все фонового задания с передачей ошибки.
				ТекстИсключения = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Ошибка потока"), 
					УровеньЖурналаРегистрации.Ошибка,,, ТекстИсключения);
				ВызватьИсключение ТекстИсключения;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
					
	// Поиск активного задания потока по ключу.
	КлючЗадания = СтрокаПотока.ИдентификаторПотока;
	Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	
	НайденныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если НайденныеЗадания.Количество() > 0 Тогда
		Возврат НайденныеЗадания[0];
	КонецЕсли;

КонецФункции

Функция ДобавитьЗаписьОчередиВПоток(ЗаписьОчереди, ТаблицаПотоков, МаксЗаписейВПотоке,
	РазделителиПотоков, ДобавленныеЗаписи, СтрокаПотока = Неопределено)
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	ЗаписьДобавлена = Ложь;
	
	Если СтрокаПотока = Неопределено Тогда
		// Добавление нового потока.
		СтрокаПотока = ТаблицаПотоков.Добавить();
		СтрокаПотока.ИдентификаторПотока = Строка(Новый УникальныйИдентификатор);
		СтрокаПотока.КоличествоЗаписейОчереди = 0;
		СтрокаПотока.Разделители = Новый Массив;
	КонецЕсли;
	
	// Добавление записи очереди в поток с которолем количества записей в потоке.
	Если Не ЗначениеЗаполнено(МаксЗаписейВПотоке)
		Или СтрокаПотока.КоличествоЗаписейОчереди < МаксЗаписейВПотоке Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторЗаписи", ЗаписьОчереди.ИдентификаторЗаписи); 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	РегистрСведений." + ИмяРегистраОчередей + " КАК Т
		|ГДЕ
		|	Т.ИдентификаторЗаписи = &ИдентификаторЗаписи";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаЗапроса.Следующий();
			
			Набор = РегистрыСведений[ИмяРегистраОчередей].СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторЗаписи.Установить(ЗаписьОчереди.ИдентификаторЗаписи);
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗапроса);

			Запись.ИдентификаторПотока = СтрокаПотока.ИдентификаторПотока;
			Набор.Записать();
			
			ЗаписьДобавлена = Истина;

			СтрокаДобавления = ДобавленныеЗаписи.Добавить();
			СтрокаДобавления.ИдентификаторЗаписи = ЗаписьОчереди.ИдентификаторЗаписи;
			СтрокаДобавления.ИдентификаторПотока = СтрокаПотока.ИдентификаторПотока;
		
			// Счетчик записей в потоке.
			СтрокаПотока.ДатаПоследнегоДобавления = ТекущаяУниверсальнаяДата();
			СтрокаПотока.КоличествоЗаписейОчереди = СтрокаПотока.КоличествоЗаписейОчереди + 1;

			// Добавление разделителей.
			ДобавитьРазделителиПотокаЗаписиОчереди(ЗаписьОчереди, СтрокаПотока, РазделителиПотоков);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ЗаписьДобавлена;
	
КонецФункции

// Для внутреннего использования в методе: ОбработкаОчередиВЦикле()
Процедура ОработатьОчередиВПотоке(ТипОчереди, ИдентификаторПотока, ВремяЗавершенияОбработки) Экспорт
	
	ЗаписиОчереди = ВыбратьЗаписиОчередиДляОбработки(ТипОчереди,, ИдентификаторПотока);
	Пока ЗаписиОчереди <> Неопределено Цикл
		
		ИдентификаторыОчереди = ЗаписиОчереди.ВыгрузитьКолонку("ИдентификаторЗаписи");
		ПорционнаяОбработкаОчередиВнутр(ТипОчереди, ИдентификаторыОчереди); 		
		
		Если ТекущаяУниверсальнаяДата() > ВремяЗавершенияОбработки Тогда
			// Закрытие потока по окончанию времени обработки.
			Возврат;
		КонецЕсли;
		
		// Получение доступных записей очереди для обработки в потоке.
		ЗаписиОчереди = ВыбратьЗаписиОчередиДляОбработки(ТипОчереди,, ИдентификаторПотока);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьРазделителиПотоковПоДаннымОчереди(ТипОчереди, СтрокаПотока, РазделителиПотоков)
	
	// Используется при восстановлении потока по данным регистра очередей.
	Если СтрокаПотока.Разделители = Неопределено Тогда
		СтрокаПотока.Разделители = Новый Массив;
	КонецЕсли;
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОчереди", ТипОчереди);
	СостоянияОчереди = Новый Массив;
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Новая);
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Пропущена);
	СостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Обработка);
	Запрос.УстановитьПараметр("Состояния", СостоянияОчереди); 
	Запрос.УстановитьПараметр("ИдентификаторПотока", СтрокаПотока.ИдентификаторПотока);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очереди.Объект КАК Объект,
	|	Очереди.РазделительПотока КАК РазделительПотока
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ТипОчереди = &ТипОчереди
	|	И Очереди.Состояние В(&Состояния)
	|	И НЕ Очереди.ОстановленаОбработка
	|	И Очереди.ИдентификаторПотока = &ИдентификаторПотока";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьРазделителиПотокаЗаписиОчереди(Выборка, СтрокаПотока, РазделителиПотоков);	
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьРазделителиПотокаЗаписиОчереди(ЗаписьОчереди, СтрокаПотока, РазделителиПотоков)
	
	Если РазделителиПотоков[ЗаписьОчереди.Объект] = Неопределено Тогда
		РазделителиПотоков[ЗаписьОчереди.Объект] = СтрокаПотока.ИдентификаторПотока;
		СтрокаПотока.Разделители.Добавить(ЗаписьОчереди.Объект); 
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗаписьОчереди.РазделительПотока) Тогда
		Если РазделителиПотоков[ЗаписьОчереди.РазделительПотока] = Неопределено Тогда
			РазделителиПотоков[ЗаписьОчереди.РазделительПотока] = СтрокаПотока.ИдентификаторПотока;
			СтрокаПотока.Разделители.Добавить(ЗаписьОчереди.РазделительПотока); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаПорцийЗаписейОчереди

Функция ВыбратьЗаписиОчередиДляОбработки(ТипОчереди, ИдентификаторыОчереди = Неопределено, ИдентификаторПотока = Неопределено) 
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОчереди", ТипОчереди);
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Очереди.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	Очереди.Объект КАК Объект,
	|	Очереди.РазделительПотока КАК РазделительПотока,
	|	Очереди.ИдентификаторПотока КАК ИдентификаторПотока
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ТипОчереди = &ТипОчереди
	|	И НЕ Очереди.ОстановленаОбработка
	|	И Очереди.ДатаНачалаОбработкиUTC <= &ТекущаяУниверсальнаяДата
	|	И &ДополнительныйОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Очереди.ДатаСозданияUTC";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей);
	
	ТекстВыбратьПервые = "";
	Если ТипОчереди.МаксОчередейВВыборке > 0 Тогда
		ТекстВыбратьПервые = "ПЕРВЫЕ " + Формат(ТипОчереди.МаксОчередейВВыборке, "ЧГ=0");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 0", ТекстВыбратьПервые);
		
	Если ИдентификаторыОчереди <> Неопределено Тогда
		// Если указан идентификатор, то обработка очереди запускается безусловно.
		ДополнительныйОтбор =
		"	Очереди.ИдентификаторЗаписи В(&ИдентификаторыОчереди)";
		Запрос.УстановитьПараметр("ИдентификаторыОчереди", ИдентификаторыОчереди);
	ИначеЕсли Не ПустаяСтрока(ИдентификаторПотока) Тогда
		ДополнительныйОтбор =
		"	Очереди.ИдентификаторПотока = &ИдентификаторПотока
		|	И (Очереди.ДатаСледующейПопыткиUTC = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ &ТекущаяУниверсальнаяДата > Очереди.ДатаСледующейПопыткиUTC)";
		Запрос.УстановитьПараметр("ИдентификаторПотока", ИдентификаторПотока);
	Иначе
		// Проверка по дате следующей попытке обработки.
		ДополнительныйОтбор =
		"	(Очереди.ДатаСледующейПопыткиUTC = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ &ТекущаяУниверсальнаяДата > Очереди.ДатаСледующейПопыткиUTC)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор", ДополнительныйОтбор);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();

КонецФункции

Функция ПорционнаяОбработкаОчередиВнутр(ТипОчереди, ИдентификаторыОчереди) Экспорт
	
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	ТипОчереди = ПолучитьТипОчереди(ТипОчереди);
	
   	Если Не ТипОчереди.ОбрабатыватьОчереди Тогда
		ТекстОшибки = ОшибкаОбработкаОчередиОтключена(ТипОчереди);
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Ошибка обработки"), 
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Порции = СформироватьПорцииЭлементовОчереди(ТипОчереди, ИдентификаторыОчереди);
	
	// Обработка порций идентификаторов очереди.
	Для Каждого Порция Из Порции Цикл
		
		// Удаляем лишние идентификаторы очереди
		// по данным на момент начала обработки порции.
		УдалитьНеобрабатываемыеОчередиИзПорции(ТипОчереди, Порция);
		Если Порция.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыПорции = Порция.ВыгрузитьКолонку("ИдентификаторЗаписи");

		Попытка
			
			// Установка объектных блокировок.
			
			ДанныеДляБлокировки = ПолучитьДанныеОчереди(ТипОчереди, ИдентификаторыПорции,
				"ИдентификаторЗаписи, Объект, ХешПараметров");
			
			ИдентификаторыСОшибкойБлокировки = Новый Массив;
			
			УстановитьОбъектнуюБлокировкуПорцииОчереди(ТипОчереди, ДанныеДляБлокировки, Истина, ИдентификаторыСОшибкойБлокировки);
			
			// Удаление из порции записей с ошибкой блокировки.
			Для Каждого ИдентификаторСОшибкой Из ИдентификаторыСОшибкойБлокировки Цикл
				СтрокаПорции = Порция.Найти(ИдентификаторСОшибкой, "ИдентификаторЗаписи");
				Порция.Удалить(СтрокаПорции);
			КонецЦикла;
			
			Если Порция.Количество() > 0 Тогда
				
				// Запуск процедуры обработки записей очереди.
				ОбработатьПорциюЭлементовОчереди(ТипОчереди, Порция);
				
				// Удаление объектных блокировок.
				УстановитьОбъектнуюБлокировкуПорцииОчереди(ТипОчереди, ДанныеДляБлокировки, Ложь);
				
			КонецЕсли;

		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		
			// Представление идентификаторов записей очереди для описания ошибки.
			ПредставлениеИдентификаторы = "";
			Если ИдентификаторыПорции.Количество() = 1 Тогда
				ПредставлениеИдентификаторы = Строка(ИдентификаторыПорции[0]);
			ИначеЕсли ИдентификаторыПорции.Количество() > 1 Тогда
				ПредставлениеИдентификаторы = Строка(ИдентификаторыПорции[0]) + ", ...";				
			Иначе
				ПредставлениеИдентификаторы = "-";
			КонецЕсли;

			// Фиксация ошибки в журнале регистрации.
			ТекстОшибки = НСтр("ru = 'Ошибка обработки очереди ""%1""
                                |Всего записей очереди: %2
                                |Идентификаторы очереди: %3
                                |Детальное описание ошибки:
                                |%4'");
			ТекстОшибки = СтрШаблон(ТекстОшибки,
				Формат(ТипОчереди),
				Формат(Порция.Количество()),
				ПредставлениеИдентификаторы,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)
			);
				
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации("Ошибки обработки"), 
				УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				
			// Фиксация ошибки в записи очереди.
			ТекстОшибки = НСтр("ru = '%1
                                   |(см. детали в журнале регистрации)'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			Для Каждого Идентификатор Из ИдентификаторыПорции Цикл
				ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Ошибка", ТекстОшибки);
			КонецЦикла;
			
			УстановитьОбъектнуюБлокировкуПорцииОчереди(ТипОчереди, ДанныеДляБлокировки, Ложь);

		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция СформироватьПорцииЭлементовОчереди(ТипОчереди, ИдентификаторыОчереди)
	
	// Массив из таблиц значений.
	Порции = Новый Массив;

	// Генерация порций обработки очереди.
	ШаблонПорции = Новый ТаблицаЗначений;
	ШаблонПорции.Колонки.Добавить("ИдентификаторЗаписи");

	Если ТипОчереди.ПорционнаяОбработка Тогда
		МаксЗаписейВПорции = ТипОчереди.МаксЗаписейВПорции;
		Если МаксЗаписейВПорции > 0 Тогда
			// Разбиение на порции с учетом ограничений.
			Порция = ШаблонПорции.СкопироватьКолонки();
			Для Каждого Идентификатор Из ИдентификаторыОчереди Цикл
				Если Порция.Количество() >= МаксЗаписейВПорции Тогда
					Порции.Добавить(Порция);
					Порция = ШаблонПорции.СкопироватьКолонки();
				КонецЕсли;
				Порция.Добавить().ИдентификаторЗаписи = Идентификатор;
			КонецЦикла;
			Порции.Добавить(Порция);
		Иначе
			// Все идентификаторы в одной порции.
			Порция = ШаблонПорции.СкопироватьКолонки();
			Для Каждого Идентификатор Из ИдентификаторыОчереди Цикл
				Порция.Добавить().ИдентификаторЗаписи = Идентификатор;
			КонецЦикла;
			Порции.Добавить(Порция);
		КонецЕсли;
	Иначе
		// Каждый идентификатор в отдельной порции.
		Для Каждого Идентификатор Из ИдентификаторыОчереди Цикл
			Порция = ШаблонПорции.СкопироватьКолонки();
			Порция.Добавить().ИдентификаторЗаписи = Идентификатор;
			Порции.Добавить(Порция);
		КонецЦикла;
	КонецЕсли;

	Возврат Порции;
	
КонецФункции

Процедура УдалитьНеобрабатываемыеОчередиИзПорции(ТипОчереди, Порция)
	
	ИдентификаторыПорции = Порция.ВыгрузитьКолонку("ИдентификаторЗаписи");

	НеобрабатываемыеСостоянияОчереди = Новый Массив;
	Если Не ЗначениеЗаполнено(ТипОчереди.МаксВремяОбработкиМин) Тогда
		НеобрабатываемыеСостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Обработка);
	КонецЕсли;
	НеобрабатываемыеСостоянияОчереди.Добавить(Перечисления.рдв_СостоянияОчередейОбработкиДанных.Выполнена);
	
	// Удаление идентификаторов порции не подлежащих обработке.
	ДанныеЗаписейПорции = ПолучитьДанныеОчереди(ТипОчереди, ИдентификаторыПорции,
		"ИдентификаторЗаписи, ОстановленаОбработка, Состояние, ДатаИзмененияСостоянияUTC");
	
	// Удаление необрабатываемых очередей по состоянию,
	// либо с учетом времени нахояждения в состоянии обработки.
	КоличествоИдентификаторов = ИдентификаторыПорции.Количество();
	Если КоличествоИдентификаторов >= 1000 Тогда
		ДанныеЗаписейПорции.Индексы.Добавить("ИдентификаторЗаписи");
	КонецЕсли; 
	
	Для ОбратныйИндекс = 1 По КоличествоИдентификаторов Цикл
		
		ИндексИдентификатораПорции = КоличествоИдентификаторов - ОбратныйИндекс;
		НайденнаяСтрока = ДанныеЗаписейПорции.Найти(ИдентификаторыПорции[ИндексИдентификатораПорции], "ИдентификаторЗаписи");
		
		// Контроль максимального допустимого времени обработки элемента очереди.
		Если НайденнаяСтрока <> Неопределено
			И НайденнаяСтрока.Состояние = Перечисления.рдв_СостоянияОчередейОбработкиДанных.Обработка
			И ЗначениеЗаполнено(НайденнаяСтрока.ДатаИзмененияСостоянияUTC)
			И ТипОчереди.МаксВремяОбработкиМин > 0 Тогда
			ТекущееВремяОбработкиОчередиСек = ТекущаяУниверсальнаяДата() - НайденнаяСтрока.ДатаИзмененияСостоянияUTC;
			ВремяОбработкиОчередиИстекло = ТекущееВремяОбработкиОчередиСек > ТипОчереди.МаксВремяОбработкиМин * 60; 
			Если Не ВремяОбработкиОчередиИстекло Тогда
				// Не запускаем новую обработку.
				Порция.Удалить(ИндексИдентификатораПорции);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Удаление из порации идентификаторов очереди, не подходящих для обработки.
		Если НайденнаяСтрока = Неопределено
			Или НайденнаяСтрока.ОстановленаОбработка
			Или НеобрабатываемыеСостоянияОчереди.Найти(НайденнаяСтрока.Состояние) <> Неопределено Тогда
			Порция.Удалить(ИндексИдентификатораПорции);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ОбработатьПорциюЭлементовОчереди(ТипОчереди, Порция)
					
	// Проверка наличия идентификаторов в порции.
	ИдентификаторыПорции = Порция.ВыгрузитьКолонку("ИдентификаторЗаписи");

	// Установка статуса обработки очереди - Обработка.
	Для Каждого Идентификатор Из ИдентификаторыПорции Цикл
		ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Обработка");
	КонецЦикла;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Структура данных передаваемая в обработчики очередей для возврата результата.
	РезультатОбработки = Новый Структура;
	
	// Обработанные записи - Соответствие или Неопределено:
	// - Идентификатор -> ОписаниеЗаписи
	РезультатОбработки.Вставить("Обработанные", Неопределено);
	
	// Идентификаторы очереди с пропуском обработки:
	// - Идентификатор -> ПричинаПропуска
	РезультатОбработки.Вставить("Пропущенные", Новый Соответствие);
	
	// Соответствие идентификаторов и описаний ошибок:
	// - Идентификатор -> ОписаниеОшибки
	РезультатОбработки.Вставить("Ошибки", Новый Соответствие);
	
	// Соответствие идентификаторов и изменяемых свойств очередей:
	// - Идентификатор -> СтруктураСвойств
	РезультатОбработки.Вставить("ЗначенияСвойств", Новый Соответствие);
		
	// ЗАПУСК ОБРАБОТКИ ЗАПИСЕЙ ОЧЕРЕДИ.
	ИмяОчереди = Справочники.рдв_ТипыОчередейОбработкиДанных.ИмяОчереди(ТипОчереди);
	рдв_РаботаСОчередямиПереопределяемый.ВыполнитьОбработкуОчереди(
		ИмяОчереди, ИдентификаторыПорции, РезультатОбработки);
		
	// Замер средней длительности обработки на 1 запись.
	ДлительностьОбработкиМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
	ДлительностьОбработкиМс = Цел(ДлительностьОбработкиМс / ИдентификаторыПорции.Количество());
	
	// Установка статусов обработки записей очереди
	// по данным результата обработки.
	ОбработанныеЗаписи = РезультатОбработки.Обработанные;
	ПропущенныеЗаписи = РезультатОбработки.Пропущенные;
	ОшибкиОбработки = РезультатОбработки.Ошибки;
	НовыеЗначенияСвойств = РезультатОбработки.ЗначенияСвойств;
	Для Каждого Идентификатор Из ИдентификаторыПорции Цикл
		Если ПропущенныеЗаписи[Идентификатор] <> Неопределено Тогда
			ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Пропущена",
				ПропущенныеЗаписи[Идентификатор],,,, НовыеЗначенияСвойств[Идентификатор]);
		ИначеЕсли ОшибкиОбработки[Идентификатор] <> Неопределено Тогда
			ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Ошибка", 
				ОшибкиОбработки[Идентификатор],,,, НовыеЗначенияСвойств[Идентификатор]);
		ИначеЕсли ОбработанныеЗаписи = Неопределено Тогда
			ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Выполнена",,,,
				ДлительностьОбработкиМс, НовыеЗначенияСвойств[Идентификатор]);
		Иначе
			// Если установка обаботанных записей очереди выполняется
			// внутри обработчика очереди (ОбработанныеЗаписи <> Неопределено),
			// то дополнительно выполнется проверка, что статус установлен для всех записей.
			Если ОбработанныеЗаписи[Идентификатор] = Неопределено Тогда
				ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Ошибка", 
					ОписаниеСостоянияНеУстановленоСостояниеОбработкиОчереди());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если заполнено соответствие обработанных записей,
	// то записи в соответствии считаем выполненными безусловно.
	Если ОбработанныеЗаписи <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ОбработанныеЗаписи Цикл
			Идентификатор = КлючИЗначение.Ключ;
			ИзменитьСостояниеОчереди(ТипОчереди, Идентификатор, "Выполнена",
				ОбработанныеЗаписи[Идентификатор],,,
				ДлительностьОбработкиМс,
				НовыеЗначенияСвойств[Идентификатор]
			);
		КонецЦикла;
	КонецЕсли;

КонецФункции

Процедура УстановитьОбъектнуюБлокировкуПорцииОчереди(ТипОчереди, ДанныеДляБлокировки, Заблокировать, ИдентификаторыСОшибкойБлокировки = Неопределено)
	
	// Установка блокировки в разерезах:
	// - По всем полям (записи),
	// - Тип очереди, Объект, Хеш параметров.
	ИмяРегистраОчередей = ИмяРегистраОчередей();
	Для Каждого СтрокаДанных Из ДанныеДляБлокировки Цикл
		
		// Блокировка всей записи.
		ЗначенияКлюча = Новый Структура("ТипОчереди, Объект, ХешПараметров, ИдентификаторЗаписи");
		ЗаполнитьЗначенияСвойств(ЗначенияКлюча, СтрокаДанных);
		ЗначенияКлюча.ТипОчереди = ТипОчереди;
		
		КлючЗаписи = РегистрыСведений[ИмяРегистраОчередей].СоздатьКлючЗаписи(ЗначенияКлюча);
		Если Заблокировать Тогда
			Попытка
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			Исключение
				Если ИдентификаторыСОшибкойБлокировки <> Неопределено
					И ЭтоОшибкаОбъектнойБлокировки(ОписаниеОшибки()) Тогда
					ИдентификаторыСОшибкойБлокировки.Добавить(СтрокаДанных.ИдентификаторЗаписи);
					Продолжить;
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		Иначе
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		КонецЕсли;
				
		// Блокировка по полям кроме идентификатора.
		ЗначенияКлюча.ИдентификаторЗаписи = "";		
		
		КлючЗаписи = РегистрыСведений[ИмяРегистраОчередей].СоздатьКлючЗаписи(ЗначенияКлюча);
		Если Заблокировать Тогда
			Попытка
				ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
			Исключение
				Если ИдентификаторыСОшибкойБлокировки <> Неопределено
					И ЭтоОшибкаОбъектнойБлокировки(ОписаниеОшибки()) Тогда
					ИдентификаторыСОшибкойБлокировки.Добавить(СтрокаДанных.ИдентификаторЗаписи);
					Продолжить;
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		Иначе
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ДанныеПараметровЗаписиОчереди(Параметры) Экспорт
	ХранилищеПараметров = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
	Если Параметры <> Неопределено Тогда
		ХешПараметров = ПолучитьХешУникальныйИдентификаторХранилищаЗначения(ХранилищеПараметров);
	Иначе
		ХешПараметров = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	Возврат Новый Структура("Хранилище, Хеш", ХранилищеПараметров, ХешПараметров);  
КонецФункции

Функция ПредставлениеПараметровЗаписиОчереди(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		Возврат "";
	КонецЕсли;
	
	// Строки текста представления.
	Представление = Новый Массив;
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		Или ТипЗнч(Параметры) = Тип("Соответствие") Тогда
		Для Каждого КлючИЗначение Из Параметры Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ПредставлениеЗначения = Формат(КлючИЗначение.Значение);
				Если ПустаяСтрока(ПредставлениеЗначения) Тогда
					ПредставлениеЗначения = "<...>";
				КонецЕсли;
			Иначе
				ПредставлениеЗначения = "<   >";
			КонецЕсли;			
			Представление.Добавить(СтрШаблон("%1: %2", КлючИЗначение.Ключ, ПредставлениеЗначения));
		КонецЦикла;
	Иначе
		Представление.Добавить(Формат(Параметры));
	КонецЕсли;
	
	Возврат СтрСоединить(Представление, Символы.ПС);	
	
КонецФункции

Функция ЭтоОшибкаОбъектнойБлокировки(ТекстОшибки)
	ПодстрокаОшибки = "Ошибка блокировки объекта. Объект уже заблокирован";
	Возврат СтрНайти(ТекстОшибки, ПодстрокаОшибки) > 0;
КонецФункции

Процедура ЗаполнитьТипОчередиПоУмолчанию(ТипОчередиОбъект) Экспорт

	ИмяОчереди = Справочники.рдв_ТипыОчередейОбработкиДанных.ИмяОчереди(ТипОчередиОбъект);
	
	// Обработка очередей.
	ТипОчередиОбъект.РегистрироватьОчереди = Истина;
	ТипОчередиОбъект.ОбрабатыватьОчереди = Истина;
	ТипОчередиОбъект.МаксВремяОбработкиМин = 30;
		
	// Порционная обработка
	ТипОчередиОбъект.МаксОчередейВВыборке = 1000;
	ТипОчередиОбъект.ПорционнаяОбработка = Ложь;
	ТипОчередиОбъект.МаксЗаписейВПорции = 1;
	
	// Попытки
	ТипОчередиОбъект.КоличествоПопыток = 3;
	ТипОчередиОбъект.ДлительностьПопытокДней = 1;
	ТипОчередиОбъект.ВремяДоВторойПопыткиСек = 300;
	ТипОчередиОбъект.КоэффициентУвеличенияВремениМеждуПопытками = 2;

	// Многопточность
	ТипОчередиОбъект.МногопоточнаяОбработка = Ложь;
	ТипОчередиОбъект.КоличествоПотоков = 5;
	ТипОчередиОбъект.МаксЗаписейВПотоке = 0;
	ТипОчередиОбъект.ХранениеЖурналовДней = 60;
	
	// Регламент обработки очередей
	ТипОчередиОбъект.ПростаяНастройкаРегламента = Истина;
	Если Не ЭтоФайловаяИБ() Тогда
		ТипОчередиОбъект.ПериодОбработкиОчередиСек = 5;
	Иначе
		ТипОчередиОбъект.ПериодОбработкиОчередиСек = МинимальныйПериодЗапускаРегламента() * 3;
	КонецЕсли;
	ТипОчередиОбъект.ВремяЖизниЗаданияОбработкиМин = 15;
	
	рдв_РаботаСОчередямиПереопределяемый.ЗаполнитьТипОчередиПоУмолчанию(ИмяОчереди, ТипОчередиОбъект);
	
КонецПроцедуры 

Функция ПолучитьТипОчереди(Знач ТипОчереди) Экспорт
	
	Если ТипЗнч(ТипОчереди) = Тип("Строка") Тогда
		ТипОчередиПоИмени = Справочники.рдв_ТипыОчередейОбработкиДанных.НайтиПоИмени(ТипОчереди);
		Если Не ЗначениеЗаполнено(ТипОчередиПоИмени) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректное имя типа очереди: %1'"), ТипОчереди);
		КонецЕсли;
		Возврат ТипОчередиПоИмени;
	Иначе
		Возврат ТипОчереди;
	КонецЕсли;
КонецФункции 

Функция ЗаписатьВЖурналОчередей(ДанныеОчереди, ДлительностьОбработки = 0)
	
	ИмяРегистраЖурналаОчередей = ИмяРегистраЖурналаОчередей();
	
	ЗаписьЖурнала = РегистрыСведений[ИмяРегистраЖурналаОчередей].СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьЖурнала, ДанныеОчереди);
	// RM-2481 14.07.2022 tosina@rdv-it.ru Закомментирована и заменена 1 строка. Переименование реквизитов журнала				
	//ЗаписьЖурнала.ДатаЖурнала = ТекущаяУниверсальнаяДата();
	ЗаписьЖурнала.ДатаЖурналаUTC = ТекущаяУниверсальнаяДата();
	ЗаписьЖурнала.ДатаЖурналаМс = ТекущаяУниверсальнаяДатаВМиллисекундах();
	// RM-2481 14.07.2022 tosina@rdv-it.ru Закомментирована и заменена 1 строка. Переименование реквизитов журнала. Использовать в место "ТекущаяДата()" функцию "ТекущаяДатаСеанса()"				
	//ЗаписьЖурнала.ДатаЖурналаЛокальная = ТекущаяДата();
	ЗаписьЖурнала.ДатаЖурнала = ТекущаяДатаСеанса();
	ЗаписьЖурнала.ДлительностьОбработки = ДлительностьОбработки;
	// RM-2481 14.07.2022 tosina@rdv-it.ru Закомментирована и заменена 1 строка. Переименование реквизитов журнала				
	//ЗаписьЖурнала.ДатаЖурналаЧас = НачалоЧаса(ЗаписьЖурнала.ДатаЖурнала);
	ЗаписьЖурнала.ДатаЖурналаЧасUTC = НачалоЧаса(ЗаписьЖурнала.ДатаЖурналаUTC);
	ЗаписьЖурнала.Записать(Ложь);
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(Событие) Экспорт
	Возврат "ОчередиОбработкиДанных." + Событие;
КонецФункции

Функция ОписаниеСостоянияНеУстановленоСостояниеОбработкиОчереди()
	Возврат НСтр("ru = 'Не установлено состояние обработки записи очереди в обработчике очередей'");
КонецФункции

Функция ПолучитьДанныеОчередиПоИдентификатору(ИдентификаторЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ИЗ
	|	&ИмяРегистраОчередей КАК Очереди
	|ГДЕ
	|	Очереди.ИдентификаторЗаписи = &ИдентификаторЗаписи";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистраОчередей", "РегистрСведений." + ИмяРегистраОчередей());
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ИмяРегистраОчередей() Экспорт
	Возврат рдв_РаботаСОчередямиКлиентСерверПереопределяемый.ИмяРегистраОчередей();
КонецФункции

Функция ИмяРегистраЖурналаОчередей() Экспорт
	Возврат рдв_РаботаСОчередямиКлиентСерверПереопределяемый.ИмяРегистраЖурналаОчередей();
КонецФункции

Функция ЭтоФайловаяИБ() Экспорт
	Возврат рдв_ОбщегоНазначения.ЭтоФайловаяИБ();
КонецФункции

Функция МинимальныйПериодЗапускаРегламента() Экспорт
	Возврат 60;
КонецФункции

Процедура Пауза(Секунд)
	рдв_Пауза.Пауза(Секунд);	
КонецПроцедуры

Функция СрокХраненияОстановленнойОчередиДней() 
	
	// RM-2481 14.06.2022 tosina@rdv-it.ru				
	
	Возврат рдв_РаботаСОчередямиПереопределяемый.СрокХраненияОстановленнойОчередиДней();
КонецФункции

#КонецОбласти

#Область ОписанияОшибок

Функция ОшибкаНастройкиЗапускаРегламентаЧащеЧемРазВМинуту(ТипОчереди)
	ТекстОшибки = НСтр("ru = 'Ошибка настройки регламента очереди ""%1"": запуск чаще,
                        |чем каждые %2 секунд не возмжен в файловой базе'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(ТипОчереди), МинимальныйПериодЗапускаРегламента());
	Возврат ТекстОшибки;
КонецФункции

Функция ОшибкаДобавленияВОчередьОбъектаНеподдерживаемогоТипа(ТипОчереди, Объект)
	ТекстОшибки = НСтр("ru = 'Добавление в очередь ""%1"" объекта ""%2"" не поддерживаемого очередью типа ""%3""'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Формат(ТипОчереди), Формат(Объект), Формат(ТипЗнч(Объект)));
	Возврат ТекстОшибки;
КонецФункции

Функция ОшибкаОбработкаОчередиОтключена(ТипОчереди)
	ТекстОшибки = НСтр("ru = 'Отключена обработка очереди ""%1""'");
	Возврат СтрШаблон(ТекстОшибки, Формат(ТипОчереди));
КонецФункции

#КонецОбласти

#Область ХешированиеДанных

Функция ПолучитьХешУникальныйИдентификаторХранилищаЗначения(ХранилищеЗначения) Экспорт
	Возврат ПолучитьХешУникальныйИдентификаторТекста(XMLСтрока(ХранилищеЗначения));
КонецФункции

Функция ПолучитьХешУникальныйИдентификаторТекста(Текст) Экспорт
	Хеш = НРег(ПолучитьХешMD5(Текст));
	Шаблон = "%1-%2-%3-%4-%5";
	УИ = СтрШаблон(Шаблон, Сред(Хеш, 1, 8), Сред(Хеш, 9, 4), Сред(Хеш, 13, 4), Сред(Хеш, 17, 4), Сред(Хеш, 21));
	Возврат Новый УникальныйИдентификатор(УИ);
КонецФункции

Функция ПолучитьХешMD5(Текст) Экспорт
	ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешMD5.Добавить(Текст);
	Возврат СтрЗаменить(Строка(ХешMD5.ХешСумма), " ", "");
КонецФункции

#КонецОбласти
